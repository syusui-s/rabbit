{"version":3,"file":"useSubscription-CPqs05Fd.js","sources":["../../src/nostr/useSubscription.ts"],"sourcesContent":["import { createSignal, createEffect, createMemo, onMount, onCleanup, on } from 'solid-js';\n\nimport { type Filter } from 'nostr-tools/filter';\nimport { type SubscribeManyParams } from 'nostr-tools/pool';\nimport { type Event as NostrEvent } from 'nostr-tools/pure';\nimport { insertEventIntoDescendingList } from 'nostr-tools/utils';\n\nimport useConfig from '@/core/useConfig';\nimport usePool from '@/nostr/usePool';\nimport useStats from '@/nostr/useStats';\nimport epoch from '@/utils/epoch';\n\nexport type UseSubscriptionProps = {\n  relayUrls: string[];\n  filters: Filter[];\n  options?: SubscribeManyParams;\n  /**\n   * subscribe not only stored events but also new events published after the subscription\n   * default is true\n   */\n  continuous?: boolean;\n  /**\n   * limit the number of events\n   */\n  limit?: number;\n  /**\n   * limit the number of events until EOSE\n   * This should be same to `limit` of REQ\n   */\n  eoseLimit?: number;\n  clientEventFilter?: (event: NostrEvent) => boolean;\n  onEvent?: (event: NostrEvent & { id: string }) => void;\n  onEOSE?: () => void;\n  signal?: AbortSignal;\n  debugId?: string;\n};\n\nlet count = 0;\n\nconst { setActiveSubscriptions } = useStats();\nsetInterval(() => {\n  setActiveSubscriptions(count);\n}, 1000);\n\n// avoid updating an array rapidly while this is fetching stored events\nconst useThrottledEvents = ({\n  eose,\n  limit,\n  eoseLimit,\n}: {\n  eose: () => boolean;\n  limit: () => number;\n  eoseLimit: () => number;\n}) => {\n  const SecondsToIgnore = 300; // 5 min\n  const [events, setEvents] = createSignal<NostrEvent[]>([]);\n\n  const delayedEvents: NostrEvent[] = [];\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n\n  const reflectDelayedEvents = () => {\n    setEvents((currentEvents) => {\n      const newEvents = [...currentEvents];\n      delayedEvents.forEach((event) => {\n        insertEventIntoDescendingList(newEvents, event);\n      });\n      return newEvents.slice(0, eoseLimit());\n    });\n    // clear delayed events\n    delayedEvents.splice(0, delayedEvents.length);\n  };\n\n  const startTimerIfNotStarted = () => {\n    if (timeoutId != null) return;\n    timeoutId = setTimeout(() => {\n      timeoutId = undefined;\n      reflectDelayedEvents();\n    }, 100);\n  };\n\n  const stopTimer = () => {\n    if (timeoutId != null) {\n      clearTimeout(timeoutId);\n    }\n  };\n\n  const addEvent = (event: NostrEvent) => {\n    const diffSec = event.created_at - epoch();\n    if (diffSec > SecondsToIgnore) return;\n    if (diffSec > 0) {\n      setTimeout(() => addEvent(event), diffSec * 1000);\n      return;\n    }\n\n    if (!eose()) {\n      delayedEvents.push(event);\n      startTimerIfNotStarted();\n    } else {\n      // SimplePool de-duplicates events but sometimes onEvent is called for duplicated events.\n      // insertEventIntoDescendingList de-duplicates events.\n      // https://github.com/syusui-s/rabbit/issues/5\n      setEvents((currentEvents) => {\n        const newEvents = [...currentEvents];\n        insertEventIntoDescendingList(newEvents, event);\n        return newEvents.slice(0, limit());\n      });\n    }\n  };\n\n  const clearEvents = () => {\n    setEvents([]);\n    stopTimer();\n  };\n\n  createEffect(() => {\n    if (eose()) {\n      reflectDelayedEvents();\n    }\n  });\n\n  onCleanup(() => {\n    stopTimer();\n  });\n\n  return { events, setEvents, addEvent, clearEvents };\n};\n\nconst useSubscription = (propsProvider: () => UseSubscriptionProps | null) => {\n  const { config, shouldMuteEvent } = useConfig();\n  const pool = usePool();\n  const [eose, setEose] = createSignal<boolean>(false);\n  const props = createMemo(propsProvider);\n\n  const eoseLimit = () => propsProvider()?.eoseLimit ?? 25;\n  const limit = () => propsProvider()?.limit ?? 50;\n\n  const { events, addEvent, clearEvents, setEvents } = useThrottledEvents({\n    eose,\n    eoseLimit,\n    limit,\n  });\n\n  createEffect(\n    on(\n      () => [config().mutedPubkeys, config().mutedKeywords],\n      () => {\n        setEvents((currentEvents) => currentEvents.filter((event) => !shouldMuteEvent(event)));\n      },\n      { defer: true },\n    ),\n  );\n\n  onMount(() => {\n    console.debug('subscription mounted', propsProvider()?.debugId, propsProvider());\n    onCleanup(() => {\n      console.debug('subscription unmount', propsProvider()?.debugId, propsProvider());\n    });\n  });\n\n  const startSubscription = () => {\n    console.debug('startSubscription: start');\n\n    const currentProps = props();\n    if (currentProps == null) return;\n    const {\n      relayUrls,\n      filters,\n      options,\n      onEvent,\n      onEOSE,\n      clientEventFilter,\n      continuous = true,\n    } = currentProps;\n    let subscribing = true;\n    count += 1;\n\n    clearEvents();\n    setEose(false);\n\n    const sub = pool().subscribeMany(\n      relayUrls,\n      filters,\n      options ?? {\n        maxWait: 12000,\n        onevent: (event: NostrEvent) => {\n          if (onEvent != null) {\n            onEvent(event as NostrEvent & { id: string });\n          }\n          if (clientEventFilter != null && !clientEventFilter(event)) {\n            return;\n          }\n\n          addEvent(event);\n        },\n        oneose: () => {\n          // sometimes `oneose` called twice\n          if (eose()) return;\n\n          if (onEOSE != null) {\n            onEOSE();\n          }\n          setEose(true);\n\n          if (!continuous) {\n            sub.close();\n            if (subscribing) {\n              subscribing = false;\n              count -= 1;\n            }\n          }\n        },\n      },\n    );\n\n    onCleanup(() => {\n      console.debug('startSubscription: end');\n      sub.close();\n      if (subscribing) {\n        subscribing = false;\n        count -= 1;\n      }\n    });\n  };\n\n  createEffect(\n    on(\n      () => [props()],\n      () => startSubscription(),\n    ),\n  );\n\n  return { events, eose };\n};\n\nexport default useSubscription;\n"],"names":["count","setActiveSubscriptions","useStats","useThrottledEvents","eose","limit","eoseLimit","events","setEvents","createSignal","delayedEvents","timeoutId","reflectDelayedEvents","currentEvents","newEvents","event","insertEventIntoDescendingList","startTimerIfNotStarted","stopTimer","addEvent","diffSec","epoch","clearEvents","createEffect","onCleanup","useSubscription","propsProvider","config","shouldMuteEvent","useConfig","pool","usePool","setEose","props","createMemo","on","onMount","startSubscription","currentProps","relayUrls","filters","options","onEvent","onEOSE","clientEventFilter","continuous","subscribing","sub"],"mappings":"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"}