(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const u of i.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&s(u)}).observe(document,{childList:!0,subtree:!0});function n(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerpolicy&&(i.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?i.credentials="include":r.crossorigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(r){if(r.ep)return;r.ep=!0;const i=n(r);fetch(r.href,i)}})();const L={};function ne(t){L.context=t}const Nt=(t,e)=>t===e,Ee=Symbol("solid-proxy"),kt=Symbol("solid-track"),ce={equals:Nt};let ot=ht;const I=1,fe=2,ut={owned:null,cleanups:null,context:null,owner:null},Pe={};var x=null;let V=null,E=null,M=null,U=null,Re=0;function z(t,e){const n=E,s=x,r=t.length===0,i=r?ut:{owned:null,cleanups:null,context:null,owner:e||s},u=r?t:()=>t(()=>Q(()=>ve(i)));x=i,E=null;try{return j(u,!0)}finally{E=n,x=s}}function K(t,e){e=e?Object.assign({},ce,e):ce;const n={value:t,observers:null,observerSlots:null,comparator:e.equals||void 0},s=r=>(typeof r=="function"&&(r=r(n.value)),ft(n,r));return[ct.bind(n),s]}function Ie(t,e,n){const s=be(t,e,!0,I);Z(s)}function H(t,e,n){const s=be(t,e,!1,I);Z(s)}function Le(t,e,n){ot=Ht;const s=be(t,e,!1,I);s.user=!0,U?U.push(s):Z(s)}function D(t,e,n){n=n?Object.assign({},ce,n):ce;const s=be(t,e,!0,0);return s.observers=null,s.observerSlots=null,s.comparator=n.equals||void 0,Z(s),ct.bind(s)}function Kt(t,e,n){let s,r,i;arguments.length===2&&typeof e=="object"||arguments.length===1?(s=!0,r=t,i=e||{}):(s=t,r=e,i=n||{});let u=null,o=Pe,l=null,c=!1,a="initialValue"in i,h=typeof s=="function"&&D(s);const f=new Set,[d,p]=(i.storage||K)(i.initialValue),[C,w]=K(void 0),[O,P]=K(void 0,{equals:!1}),[g,b]=K(a?"ready":"unresolved");if(L.context){l=`${L.context.id}${L.context.count++}`;let y;i.ssrLoadFrom==="initial"?o=i.initialValue:L.load&&(y=L.load(l))&&(o=y[0])}function A(y,m,v,N){return u===y&&(u=null,a=!0,(y===o||m===o)&&i.onHydrated&&queueMicrotask(()=>i.onHydrated(N,{value:m})),o=Pe,S(m,v)),m}function S(y,m){j(()=>{m||p(()=>y),b(m?"errored":"ready"),w(m);for(const v of f.keys())v.decrement();f.clear()},!1)}function F(){const y=_t,m=d(),v=C();if(v&&!u)throw v;return E&&!E.user&&y&&Ie(()=>{O(),u&&(y.resolved||f.has(y)||(y.increment(),f.add(y)))}),m}function q(y=!0){if(y!==!1&&c)return;c=!1;const m=h?h():s;if(m==null||m===!1){A(u,Q(d));return}const v=o!==Pe?o:Q(()=>r(m,{value:d(),refetching:y}));return typeof v!="object"||!(v&&"then"in v)?(A(u,v,void 0,m),v):(u=v,c=!0,queueMicrotask(()=>c=!1),j(()=>{b(a?"refreshing":"pending"),P()},!1),v.then(N=>A(v,N,void 0,m),N=>A(v,void 0,yt(N),m)))}return Object.defineProperties(F,{state:{get:()=>g()},error:{get:()=>C()},loading:{get(){const y=g();return y==="pending"||y==="refreshing"}},latest:{get(){if(!a)return F();const y=C();if(y&&!u)throw y;return d()}}}),h?Ie(()=>q(!1)):q(!1),[F,{refetch:q,mutate:p}]}function Os(t){return j(t,!1)}function Q(t){const e=E;E=null;try{return t()}finally{E=e}}function at(t,e,n){const s=Array.isArray(t);let r,i=n&&n.defer;return u=>{let o;if(s){o=Array(t.length);for(let c=0;c<t.length;c++)o[c]=t[c]()}else o=t();if(i){i=!1;return}const l=Q(()=>e(o,r,u));return r=o,l}}function jt(t){Le(()=>Q(t))}function Y(t){return x===null||(x.cleanups===null?x.cleanups=[t]:x.cleanups.push(t)),t}function Ss(){return E}function lt(){return x}function Ut(t,e){const n=x;x=t;try{return j(e,!0)}catch(s){Me(s)}finally{x=n}}function It(t){const e=E,n=x;return Promise.resolve().then(()=>{E=e,x=n;let s;return j(t,!1),E=x=null,s?s.done:void 0})}function me(t,e){const n=Symbol("context");return{id:n,Provider:Gt(n),defaultValue:t}}function re(t){let e;return(e=pt(x,t.id))!==void 0?e:t.defaultValue}function ge(t){const e=D(t),n=D(()=>xe(e()));return n.toArray=()=>{const s=n();return Array.isArray(s)?s:s!=null?[s]:[]},n}let _t;function ct(){const t=V;if(this.sources&&(this.state||t))if(this.state===I||t)Z(this);else{const e=M;M=null,j(()=>de(this),!1),M=e}if(E){const e=this.observers?this.observers.length:0;E.sources?(E.sources.push(this),E.sourceSlots.push(e)):(E.sources=[this],E.sourceSlots=[e]),this.observers?(this.observers.push(E),this.observerSlots.push(E.sources.length-1)):(this.observers=[E],this.observerSlots=[E.sources.length-1])}return this.value}function ft(t,e,n){let s=t.value;return(!t.comparator||!t.comparator(s,e))&&(t.value=e,t.observers&&t.observers.length&&j(()=>{for(let r=0;r<t.observers.length;r+=1){const i=t.observers[r],u=V&&V.running;u&&V.disposed.has(i),(u&&!i.tState||!u&&!i.state)&&(i.pure?M.push(i):U.push(i),i.observers&&dt(i)),u||(i.state=I)}if(M.length>1e6)throw M=[],new Error},!1)),e}function Z(t){if(!t.fn)return;ve(t);const e=x,n=E,s=Re;E=x=t,$t(t,t.value,s),E=n,x=e}function $t(t,e,n){let s;try{s=t.fn(e)}catch(r){t.pure&&(t.state=I,t.owned&&t.owned.forEach(ve),t.owned=null),Me(r)}(!t.updatedAt||t.updatedAt<=n)&&(t.updatedAt!=null&&"observers"in t?ft(t,s):t.value=s,t.updatedAt=n)}function be(t,e,n,s=I,r){const i={fn:t,state:s,updatedAt:null,owned:null,sources:null,sourceSlots:null,cleanups:null,value:e,owner:x,context:null,pure:n};return x===null||x!==ut&&(x.owned?x.owned.push(i):x.owned=[i]),i}function he(t){const e=V;if(t.state===0||e)return;if(t.state===fe||e)return de(t);if(t.suspense&&Q(t.suspense.inFallback))return t.suspense.effects.push(t);const n=[t];for(;(t=t.owner)&&(!t.updatedAt||t.updatedAt<Re);)(t.state||e)&&n.push(t);for(let s=n.length-1;s>=0;s--)if(t=n[s],t.state===I||e)Z(t);else if(t.state===fe||e){const r=M;M=null,j(()=>de(t,n[0]),!1),M=r}}function j(t,e){if(M)return t();let n=!1;e||(M=[]),U?n=!0:U=[],Re++;try{const s=t();return Bt(n),s}catch(s){M||(U=null),Me(s)}}function Bt(t){if(M&&(ht(M),M=null),t)return;const e=U;U=null,e.length&&j(()=>ot(e),!1)}function ht(t){for(let e=0;e<t.length;e++)he(t[e])}function Ht(t){let e,n=0;for(e=0;e<t.length;e++){const s=t[e];s.user?t[n++]=s:he(s)}for(L.context&&ne(),e=0;e<n;e++)he(t[e])}function de(t,e){const n=V;t.state=0;for(let s=0;s<t.sources.length;s+=1){const r=t.sources[s];r.sources&&(r.state===I||n?r!==e&&he(r):(r.state===fe||n)&&de(r,e))}}function dt(t){const e=V;for(let n=0;n<t.observers.length;n+=1){const s=t.observers[n];(!s.state||e)&&(s.state=fe,s.pure?M.push(s):U.push(s),s.observers&&dt(s))}}function ve(t){let e;if(t.sources)for(;t.sources.length;){const n=t.sources.pop(),s=t.sourceSlots.pop(),r=n.observers;if(r&&r.length){const i=r.pop(),u=n.observerSlots.pop();s<r.length&&(i.sourceSlots[u]=s,r[s]=i,n.observerSlots[s]=u)}}if(t.owned){for(e=0;e<t.owned.length;e++)ve(t.owned[e]);t.owned=null}if(t.cleanups){for(e=0;e<t.cleanups.length;e++)t.cleanups[e]();t.cleanups=null}t.state=0,t.context=null}function yt(t){return t instanceof Error||typeof t=="string"?t:new Error("Unknown error")}function Me(t){throw t=yt(t),t}function pt(t,e){return t?t.context&&t.context[e]!==void 0?t.context[e]:pt(t.owner,e):void 0}function xe(t){if(typeof t=="function"&&!t.length)return xe(t());if(Array.isArray(t)){const e=[];for(let n=0;n<t.length;n++){const s=xe(t[n]);Array.isArray(s)?e.push.apply(e,s):e.push(s)}return e}return t}function Gt(t,e){return function(s){let r;return H(()=>r=Q(()=>(x.context={[t]:s.value},ge(()=>s.children))),void 0),r}}function As(t){return{subscribe(e){if(!(e instanceof Object)||e==null)throw new TypeError("Expected the observer to be an object.");const n=typeof e=="function"?e:e.next&&e.next.bind(e);if(!n)return{unsubscribe(){}};const s=z(r=>(Le(()=>{const i=t();Q(()=>n(i))}),r));return lt()&&Y(s),{unsubscribe(){s()}}},[Symbol.observable||"@@observable"](){return this}}}const Vt=Symbol("fallback");function _e(t){for(let e=0;e<t.length;e++)t[e]()}function Wt(t,e,n={}){let s=[],r=[],i=[],u=0,o=e.length>1?[]:null;return Y(()=>_e(i)),()=>{let l=t()||[],c,a;return l[kt],Q(()=>{let f=l.length,d,p,C,w,O,P,g,b,A;if(f===0)u!==0&&(_e(i),i=[],s=[],r=[],u=0,o&&(o=[])),n.fallback&&(s=[Vt],r[0]=z(S=>(i[0]=S,n.fallback())),u=1);else if(u===0){for(r=new Array(f),a=0;a<f;a++)s[a]=l[a],r[a]=z(h);u=f}else{for(C=new Array(f),w=new Array(f),o&&(O=new Array(f)),P=0,g=Math.min(u,f);P<g&&s[P]===l[P];P++);for(g=u-1,b=f-1;g>=P&&b>=P&&s[g]===l[b];g--,b--)C[b]=r[g],w[b]=i[g],o&&(O[b]=o[g]);for(d=new Map,p=new Array(b+1),a=b;a>=P;a--)A=l[a],c=d.get(A),p[a]=c===void 0?-1:c,d.set(A,a);for(c=P;c<=g;c++)A=s[c],a=d.get(A),a!==void 0&&a!==-1?(C[a]=r[c],w[a]=i[c],o&&(O[a]=o[c]),a=p[a],d.set(A,a)):i[c]();for(a=P;a<f;a++)a in C?(r[a]=C[a],i[a]=w[a],o&&(o[a]=O[a],o[a](a))):r[a]=z(h);r=r.slice(0,u=f),s=l.slice(0)}return r});function h(f){if(i[a]=f,o){const[d,p]=K(a);return o[a]=p,e(l[a],d)}return e(l[a])}}}function R(t,e){return Q(()=>t(e||{}))}function ue(){return!0}const Jt={get(t,e,n){return e===Ee?n:t.get(e)},has(t,e){return e===Ee?!0:t.has(e)},set:ue,deleteProperty:ue,getOwnPropertyDescriptor(t,e){return{configurable:!0,enumerable:!0,get(){return t.get(e)},set:ue,deleteProperty:ue}},ownKeys(t){return t.keys()}};function Oe(t){return(t=typeof t=="function"?t():t)?t:{}}function mt(...t){let e=!1;for(let s=0;s<t.length;s++){const r=t[s];e=e||!!r&&Ee in r,t[s]=typeof r=="function"?(e=!0,D(r)):r}if(e)return new Proxy({get(s){for(let r=t.length-1;r>=0;r--){const i=Oe(t[r])[s];if(i!==void 0)return i}},has(s){for(let r=t.length-1;r>=0;r--)if(s in Oe(t[r]))return!0;return!1},keys(){const s=[];for(let r=0;r<t.length;r++)s.push(...Object.keys(Oe(t[r])));return[...new Set(s)]}},Jt);const n={};for(let s=t.length-1;s>=0;s--)if(t[s]){const r=Object.getOwnPropertyDescriptors(t[s]);for(const i in r)i in n||Object.defineProperty(n,i,{enumerable:!0,get(){for(let u=t.length-1;u>=0;u--){const o=(t[u]||{})[i];if(o!==void 0)return o}}})}return n}function Qe(t){let e,n;const s=r=>{const i=L.context;if(i){const[o,l]=K();(n||(n=t())).then(c=>{ne(i),l(()=>c.default),ne()}),e=o}else if(!e){const[o]=Kt(()=>(n||(n=t())).then(l=>l.default));e=o}let u;return D(()=>(u=e())&&Q(()=>{if(!i)return u(r);const o=L.context;ne(i);const l=u(r);return ne(o),l}))};return s.preload=()=>n||((n=t()).then(r=>e=()=>r.default),n),s}function Es(t){const e="fallback"in t&&{fallback:()=>t.fallback};return D(Wt(()=>t.each,t.children,e||void 0))}function gt(t){let e=!1;const n=t.keyed,s=D(()=>t.when,void 0,{equals:(r,i)=>e?r===i:!r==!i});return D(()=>{const r=s();if(r){const i=t.children,u=typeof i=="function"&&i.length>0;return e=n||u,u?Q(()=>i(r)):i}return t.fallback},void 0,void 0)}function xs(t){let e=!1,n=!1;const s=(u,o)=>u[0]===o[0]&&(e?u[1]===o[1]:!u[1]==!o[1])&&u[2]===o[2],r=ge(()=>t.children),i=D(()=>{let u=r();Array.isArray(u)||(u=[u]);for(let o=0;o<u.length;o++){const l=u[o].when;if(l)return n=!!u[o].keyed,[o,l,u[o]]}return[-1]},void 0,{equals:s});return D(()=>{const[u,o,l]=i();if(u<0)return t.fallback;const c=l.children,a=typeof c=="function"&&c.length>0;return e=n||a,a?Q(()=>c(o)):c},void 0,void 0)}function qs(t){return t}const zt=["allowfullscreen","async","autofocus","autoplay","checked","controls","default","disabled","formnovalidate","hidden","indeterminate","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","seamless","selected"],Xt=new Set(["className","value","readOnly","formNoValidate","isMap","noModule","playsInline",...zt]),Yt=new Set(["innerHTML","textContent","innerText","children"]),Zt=Object.assign(Object.create(null),{className:"class",htmlFor:"for"}),$e=Object.assign(Object.create(null),{class:"className",formnovalidate:"formNoValidate",ismap:"isMap",nomodule:"noModule",playsinline:"playsInline",readonly:"readOnly"}),en=new Set(["beforeinput","click","dblclick","contextmenu","focusin","focusout","input","keydown","keyup","mousedown","mousemove","mouseout","mouseover","mouseup","pointerdown","pointermove","pointerout","pointerover","pointerup","touchend","touchmove","touchstart"]),tn={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"};function nn(t,e,n){let s=n.length,r=e.length,i=s,u=0,o=0,l=e[r-1].nextSibling,c=null;for(;u<r||o<i;){if(e[u]===n[o]){u++,o++;continue}for(;e[r-1]===n[i-1];)r--,i--;if(r===u){const a=i<s?o?n[o-1].nextSibling:n[i-o]:l;for(;o<i;)t.insertBefore(n[o++],a)}else if(i===o)for(;u<r;)(!c||!c.has(e[u]))&&e[u].remove(),u++;else if(e[u]===n[i-1]&&n[o]===e[r-1]){const a=e[--r].nextSibling;t.insertBefore(n[o++],e[u++].nextSibling),t.insertBefore(n[--i],a),e[r]=n[i]}else{if(!c){c=new Map;let h=o;for(;h<i;)c.set(n[h],h++)}const a=c.get(e[u]);if(a!=null)if(o<a&&a<i){let h=u,f=1,d;for(;++h<r&&h<i&&!((d=c.get(e[h]))==null||d!==a+f);)f++;if(f>a-o){const p=e[u];for(;o<a;)t.insertBefore(n[o++],p)}else t.replaceChild(n[o++],e[u++])}else u++;else e[u++].remove()}}}const Be="_$DX_DELEGATE";function sn(t,e,n,s={}){let r;return z(i=>{r=i,e===document?t():cn(e,t(),e.firstChild?null:void 0,n)},s.owner),()=>{r(),e.textContent=""}}function Fs(t,e,n){const s=document.createElement("template");s.innerHTML=t;let r=s.content.firstChild;return n&&(r=r.firstChild),r}function bt(t,e=window.document){const n=e[Be]||(e[Be]=new Set);for(let s=0,r=t.length;s<r;s++){const i=t[s];n.has(i)||(n.add(i),e.addEventListener(i,dn))}}function vt(t,e,n){n==null?t.removeAttribute(e):t.setAttribute(e,n)}function rn(t,e,n,s){s==null?t.removeAttributeNS(e,n):t.setAttributeNS(e,n,s)}function on(t,e){e==null?t.removeAttribute("class"):t.className=e}function un(t,e,n,s){if(s)Array.isArray(n)?(t[`$$${e}`]=n[0],t[`$$${e}Data`]=n[1]):t[`$$${e}`]=n;else if(Array.isArray(n)){const r=n[0];t.addEventListener(e,n[0]=i=>r.call(t,n[1],i))}else t.addEventListener(e,n)}function an(t,e,n={}){const s=Object.keys(e||{}),r=Object.keys(n);let i,u;for(i=0,u=r.length;i<u;i++){const o=r[i];!o||o==="undefined"||e[o]||(He(t,o,!1),delete n[o])}for(i=0,u=s.length;i<u;i++){const o=s[i],l=!!e[o];!o||o==="undefined"||n[o]===l||!l||(He(t,o,!0),n[o]=l)}return n}function ln(t,e,n){if(!e)return n?vt(t,"style"):e;const s=t.style;if(typeof e=="string")return s.cssText=e;typeof n=="string"&&(s.cssText=n=void 0),n||(n={}),e||(e={});let r,i;for(i in n)e[i]==null&&s.removeProperty(i),delete n[i];for(i in e)r=e[i],r!==n[i]&&(s.setProperty(i,r),n[i]=r);return n}function Ds(t,e={},n,s){const r={};return s||H(()=>r.children=X(t,e.children,r.children)),H(()=>e.ref&&e.ref(t)),H(()=>fn(t,e,n,!0,r,!0)),r}function Rs(t,e,n){return Q(()=>t(e,n))}function cn(t,e,n,s){if(n!==void 0&&!s&&(s=[]),typeof e!="function")return X(t,e,s,n);H(r=>X(t,e(),r,n),s)}function fn(t,e,n,s,r={},i=!1){e||(e={});for(const u in r)if(!(u in e)){if(u==="children")continue;r[u]=Ge(t,u,null,r[u],n,i)}for(const u in e){if(u==="children"){s||X(t,e.children);continue}const o=e[u];r[u]=Ge(t,u,o,r[u],n,i)}}function hn(t){return t.toLowerCase().replace(/-([a-z])/g,(e,n)=>n.toUpperCase())}function He(t,e,n){const s=e.trim().split(/\s+/);for(let r=0,i=s.length;r<i;r++)t.classList.toggle(s[r],n)}function Ge(t,e,n,s,r,i){let u,o,l;if(e==="style")return ln(t,n,s);if(e==="classList")return an(t,n,s);if(n===s)return s;if(e==="ref")i||n(t);else if(e.slice(0,3)==="on:"){const c=e.slice(3);s&&t.removeEventListener(c,s),n&&t.addEventListener(c,n)}else if(e.slice(0,10)==="oncapture:"){const c=e.slice(10);s&&t.removeEventListener(c,s,!0),n&&t.addEventListener(c,n,!0)}else if(e.slice(0,2)==="on"){const c=e.slice(2).toLowerCase(),a=en.has(c);if(!a&&s){const h=Array.isArray(s)?s[0]:s;t.removeEventListener(c,h)}(a||n)&&(un(t,c,n,a),a&&bt([c]))}else if((l=Yt.has(e))||!r&&($e[e]||(o=Xt.has(e)))||(u=t.nodeName.includes("-")))e==="class"||e==="className"?on(t,n):u&&!o&&!l?t[hn(e)]=n:t[$e[e]||e]=n;else{const c=r&&e.indexOf(":")>-1&&tn[e.split(":")[0]];c?rn(t,c,e,n):vt(t,Zt[e]||e,n)}return n}function dn(t){const e=`$$${t.type}`;let n=t.composedPath&&t.composedPath()[0]||t.target;for(t.target!==n&&Object.defineProperty(t,"target",{configurable:!0,value:n}),Object.defineProperty(t,"currentTarget",{configurable:!0,get(){return n||document}}),L.registry&&!L.done&&(L.done=!0,document.querySelectorAll("[id^=pl-]").forEach(s=>{for(;s&&s.nodeType!==8&&s.nodeValue!=="pl-"+t;){let r=s.nextSibling;s.remove(),s=r}s&&s.remove()}));n;){const s=n[e];if(s&&!n.disabled){const r=n[`${e}Data`];if(r!==void 0?s.call(n,r,t):s.call(n,t),t.cancelBubble)return}n=n._$host||n.parentNode||n.host}}function X(t,e,n,s,r){for(L.context&&!n&&(n=[...t.childNodes]);typeof n=="function";)n=n();if(e===n)return n;const i=typeof e,u=s!==void 0;if(t=u&&n[0]&&n[0].parentNode||t,i==="string"||i==="number"){if(L.context)return n;if(i==="number"&&(e=e.toString()),u){let o=n[0];o&&o.nodeType===3?o.data=e:o=document.createTextNode(e),n=J(t,n,s,o)}else n!==""&&typeof n=="string"?n=t.firstChild.data=e:n=t.textContent=e}else if(e==null||i==="boolean"){if(L.context)return n;n=J(t,n,s)}else{if(i==="function")return H(()=>{let o=e();for(;typeof o=="function";)o=o();n=X(t,o,n,s)}),()=>n;if(Array.isArray(e)){const o=[],l=n&&Array.isArray(n);if(qe(o,e,n,r))return H(()=>n=X(t,o,n,s,!0)),()=>n;if(L.context){if(!o.length)return n;for(let c=0;c<o.length;c++)if(o[c].parentNode)return n=o}if(o.length===0){if(n=J(t,n,s),u)return n}else l?n.length===0?Ve(t,o,s):nn(t,n,o):(n&&J(t),Ve(t,o));n=o}else if(e instanceof Node){if(L.context&&e.parentNode)return n=u?[e]:e;if(Array.isArray(n)){if(u)return n=J(t,n,s,e);J(t,n,null,e)}else n==null||n===""||!t.firstChild?t.appendChild(e):t.replaceChild(e,t.firstChild);n=e}}return n}function qe(t,e,n,s){let r=!1;for(let i=0,u=e.length;i<u;i++){let o=e[i],l=n&&n[i];if(o instanceof Node)t.push(o);else if(!(o==null||o===!0||o===!1))if(Array.isArray(o))r=qe(t,o,l)||r;else if(typeof o=="function")if(s){for(;typeof o=="function";)o=o();r=qe(t,Array.isArray(o)?o:[o],Array.isArray(l)?l:[l])||r}else t.push(o),r=!0;else{const c=String(o);l&&l.nodeType===3&&l.data===c?t.push(l):t.push(document.createTextNode(c))}}return r}function Ve(t,e,n=null){for(let s=0,r=e.length;s<r;s++)t.insertBefore(e[s],n)}function J(t,e,n,s){if(n===void 0)return t.textContent="";const r=s||document.createTextNode("");if(e.length){let i=!1;for(let u=e.length-1;u>=0;u--){const o=e[u];if(r!==o){const l=o.parentNode===t;!i&&!u?l?t.replaceChild(r,o):t.insertBefore(r,n):l&&o.remove()}else i=!0}}else t.insertBefore(r,n);return[r]}const yn=!1;function pn(t,e,n){return t.addEventListener(e,n),()=>t.removeEventListener(e,n)}function mn([t,e],n,s){return[n?()=>n(t()):t,s?r=>e(s(r)):e]}function gn(t){try{return document.querySelector(t)}catch{return null}}function bn(t,e){const n=gn(`#${t}`);n?n.scrollIntoView():e&&window.scrollTo(0,0)}function vn(t,e,n,s){let r=!1;const i=o=>typeof o=="string"?{value:o}:o,u=mn(K(i(t()),{equals:(o,l)=>o.value===l.value}),void 0,o=>(!r&&e(o),o));return n&&Y(n((o=t())=>{r=!0,u[1](i(o)),r=!1})),{signal:u,utils:s}}function wn(t){if(t){if(Array.isArray(t))return{signal:t}}else return{signal:K({value:""})};return t}function Cn(){return vn(()=>({value:window.location.pathname+window.location.search+window.location.hash,state:history.state}),({value:t,replace:e,scroll:n,state:s})=>{e?window.history.replaceState(s,"",t):window.history.pushState(s,"",t),bn(window.location.hash.slice(1),n)},t=>pn(window,"popstate",()=>t()),{go:t=>window.history.go(t)})}function Pn(){let t=new Set;function e(r){return t.add(r),()=>t.delete(r)}let n=!1;function s(r,i){if(n)return!(n=!1);const u={to:r,options:i,defaultPrevented:!1,preventDefault:()=>u.defaultPrevented=!0};for(const o of t)o.listener({...u,from:o.location,retry:l=>{l&&(n=!0),o.navigate(r,i)}});return!u.defaultPrevented}return{subscribe:e,confirm:s}}const On=/^(?:[a-z0-9]+:)?\/\//i,Sn=/^\/+|\/+$/g;function se(t,e=!1){const n=t.replace(Sn,"");return n?e||/^[?#]/.test(n)?n:"/"+n:""}function le(t,e,n){if(On.test(e))return;const s=se(t),r=n&&se(n);let i="";return!r||e.startsWith("/")?i=s:r.toLowerCase().indexOf(s.toLowerCase())!==0?i=s+r:i=r,(i||"/")+se(e,!i)}function An(t,e){if(t==null)throw new Error(e);return t}function wt(t,e){return se(t).replace(/\/*(\*.*)?$/g,"")+se(e)}function En(t){const e={};return t.searchParams.forEach((n,s)=>{e[s]=n}),e}function xn(t,e){const[n,s]=t.split("/*",2),r=n.split("/").filter(Boolean),i=r.length;return u=>{const o=u.split("/").filter(Boolean),l=o.length-i;if(l<0||l>0&&s===void 0&&!e)return null;const c={path:i?"":"/",params:{}};for(let a=0;a<i;a++){const h=r[a],f=o[a];if(h[0]===":")c.params[h.slice(1)]=f;else if(h.localeCompare(f,void 0,{sensitivity:"base"})!==0)return null;c.path+=`/${f}`}return s&&(c.params[s]=l?o.slice(-l).join("/"):""),c}}function qn(t){const[e,n]=t.pattern.split("/*",2),s=e.split("/").filter(Boolean);return s.reduce((r,i)=>r+(i.startsWith(":")?2:3),s.length-(n===void 0?0:1))}function Ct(t){const e=new Map,n=lt();return new Proxy({},{get(s,r){return e.has(r)||Ut(n,()=>e.set(r,D(()=>t()[r]))),e.get(r)()},getOwnPropertyDescriptor(){return{enumerable:!0,configurable:!0}},ownKeys(){return Reflect.ownKeys(t())}})}function Pt(t){let e=/(\/?\:[^\/]+)\?/.exec(t);if(!e)return[t];let n=t.slice(0,e.index),s=t.slice(e.index+e[0].length);const r=[n,n+=e[1]];for(;e=/^(\/\:[^\/]+)\?/.exec(s);)r.push(n+=e[1]),s=s.slice(e[0].length);return Pt(s).reduce((i,u)=>[...i,...r.map(o=>o+u)],[])}const Fn=100,Ot=me(),we=me(),Te=()=>An(re(Ot),"Make sure your app is wrapped in a <Router />");let ie;const St=()=>ie||re(we)||Te().base,Ls=()=>Te().navigatorFactory();function Dn(t,e="",n){const{component:s,data:r,children:i}=t,u=!i||Array.isArray(i)&&!i.length,o={key:t,element:s?()=>R(s,{}):()=>{const{element:l}=t;return l===void 0&&n?R(n,{}):l},preload:t.component?s.preload:t.preload,data:r};return At(t.path).reduce((l,c)=>{for(const a of Pt(c)){const h=wt(e,a),f=u?h:h.split("/*",1)[0];l.push({...o,originalPath:a,pattern:f,matcher:xn(f,!u)})}return l},[])}function Rn(t,e=0){return{routes:t,score:qn(t[t.length-1])*1e4-e,matcher(n){const s=[];for(let r=t.length-1;r>=0;r--){const i=t[r],u=i.matcher(n);if(!u)return null;s.unshift({...u,route:i})}return s}}}function At(t){return Array.isArray(t)?t:[t]}function Et(t,e="",n,s=[],r=[]){const i=At(t);for(let u=0,o=i.length;u<o;u++){const l=i[u];if(l&&typeof l=="object"&&l.hasOwnProperty("path")){const c=Dn(l,e,n);for(const a of c){s.push(a);const h=Array.isArray(l.children)&&l.children.length===0;if(l.children&&!h)Et(l.children,a.pattern,n,s,r);else{const f=Rn([...s],r.length);r.push(f)}s.pop()}}}return s.length?r:r.sort((u,o)=>o.score-u.score)}function Ln(t,e){for(let n=0,s=t.length;n<s;n++){const r=t[n].matcher(e);if(r)return r}return[]}function Mn(t,e){const n=new URL("http://sar"),s=D(l=>{const c=t();try{return new URL(c,n)}catch{return console.error(`Invalid path ${c}`),l}},n,{equals:(l,c)=>l.href===c.href}),r=D(()=>s().pathname),i=D(()=>s().search,!0),u=D(()=>s().hash),o=D(()=>"");return{get pathname(){return r()},get search(){return i()},get hash(){return u()},get state(){return e()},get key(){return o()},query:Ct(at(i,()=>En(s())))}}function Qn(t,e="",n,s){const{signal:[r,i],utils:u={}}=wn(t),o=u.parsePath||(y=>y),l=u.renderPath||(y=>y),c=u.beforeLeave||Pn(),a=le("",e),h=void 0;if(a===void 0)throw new Error(`${a} is not a valid base path`);a&&!r().value&&i({value:a,replace:!0,scroll:!1});const[f,d]=K(!1),p=async y=>{d(!0);try{await It(y)}finally{d(!1)}},[C,w]=K(r().value),[O,P]=K(r().state),g=Mn(C,O),b=[],A={pattern:a,params:{},path:()=>a,outlet:()=>null,resolvePath(y){return le(a,y)}};if(n)try{ie=A,A.data=n({data:void 0,params:{},location:g,navigate:F(A)})}finally{ie=void 0}function S(y,m,v){Q(()=>{if(typeof m=="number"){m&&(u.go?c.confirm(m,v)&&u.go(m):console.warn("Router integration does not support relative routing"));return}const{replace:N,resolve:W,scroll:_,state:ee}={replace:!1,resolve:!0,scroll:!0,...v},$=W?y.resolvePath(m):le("",m);if($===void 0)throw new Error(`Path '${m}' is not a routable path`);if(b.length>=Fn)throw new Error("Too many redirects");const te=C();if(($!==te||ee!==O())&&!yn){if(c.confirm($,v)){const Tt=b.push({value:te,replace:N,scroll:_,state:O()});p(()=>{w($),P(ee)}).then(()=>{b.length===Tt&&q({value:$,state:ee})})}}})}function F(y){return y=y||re(we)||A,(m,v)=>S(y,m,v)}function q(y){const m=b[0];m&&((y.value!==m.value||y.state!==m.state)&&i({...y,replace:m.replace,scroll:m.scroll}),b.length=0)}H(()=>{const{value:y,state:m}=r();Q(()=>{y!==C()&&p(()=>{w(y),P(m)})})});{let y=function(m){if(m.defaultPrevented||m.button!==0||m.metaKey||m.altKey||m.ctrlKey||m.shiftKey)return;const v=m.composedPath().find(te=>te instanceof Node&&te.nodeName.toUpperCase()==="A");if(!v||!v.hasAttribute("link"))return;const N=v.href;if(v.target||!N&&!v.hasAttribute("state"))return;const W=(v.getAttribute("rel")||"").split(/\s+/);if(v.hasAttribute("download")||W&&W.includes("external"))return;const _=new URL(N);if(_.origin!==window.location.origin||a&&_.pathname&&!_.pathname.toLowerCase().startsWith(a.toLowerCase()))return;const ee=o(_.pathname+_.search+_.hash),$=v.getAttribute("state");m.preventDefault(),S(A,ee,{resolve:!1,replace:v.hasAttribute("replace"),scroll:!v.hasAttribute("noscroll"),state:$&&JSON.parse($)})};bt(["click"]),document.addEventListener("click",y),Y(()=>document.removeEventListener("click",y))}return{base:A,out:h,location:g,isRouting:f,renderPath:l,parsePath:o,navigatorFactory:F,beforeLeave:c}}function Tn(t,e,n,s){const{base:r,location:i,navigatorFactory:u}=t,{pattern:o,element:l,preload:c,data:a}=s().route,h=D(()=>s().path),f=Ct(()=>s().params);c&&c();const d={parent:e,pattern:o,get child(){return n()},path:h,params:f,data:e.data,outlet:l,resolvePath(p){return le(r.path(),p,h())}};if(a)try{ie=d,d.data=a({data:e.data,params:f,location:i,navigate:u(d)})}finally{ie=void 0}return d}const Nn=t=>{const{source:e,url:n,base:s,data:r,out:i}=t,u=e||Cn(),o=Qn(u,s,r);return R(Ot.Provider,{value:o,get children(){return t.children}})},kn=t=>{const e=Te(),n=St(),s=ge(()=>t.children),r=D(()=>Et(s(),wt(n.pattern,t.base||""),Kn)),i=D(()=>Ln(r(),e.location.pathname));e.out&&e.out.matches.push(i().map(({route:c,path:a,params:h})=>({originalPath:c.originalPath,pattern:c.pattern,path:a,params:h})));const u=[];let o;const l=D(at(i,(c,a,h)=>{let f=a&&c.length===a.length;const d=[];for(let p=0,C=c.length;p<C;p++){const w=a&&a[p],O=c[p];h&&w&&O.route.key===w.route.key?d[p]=h[p]:(f=!1,u[p]&&u[p](),z(P=>{u[p]=P,d[p]=Tn(e,d[p-1]||n,()=>l()[p+1],()=>i()[p])}))}return u.splice(c.length).forEach(p=>p()),h&&f?h:(o=d[0],d)}));return R(gt,{get when(){return l()&&o},children:c=>R(we.Provider,{value:c,get children(){return c.outlet()}})})},Se=t=>{const e=ge(()=>t.children);return mt(t,{get children(){return e()}})},Kn=()=>{const t=St();return R(gt,{get when(){return t.child},children:e=>R(we.Provider,{value:e,get children(){return e.outlet()}})})};const jn="modulepreload",Un=function(t){return"/rabbit/"+t},We={},Ne=function(e,n,s){if(!n||n.length===0)return e();const r=document.getElementsByTagName("link");return Promise.all(n.map(i=>{if(i=Un(i),i in We)return;We[i]=!0;const u=i.endsWith(".css"),o=u?'[rel="stylesheet"]':"";if(!!s)for(let a=r.length-1;a>=0;a--){const h=r[a];if(h.href===i&&(!u||h.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${i}"]${o}`))return;const c=document.createElement("link");if(c.rel=u?"stylesheet":jn,u||(c.as="script",c.crossOrigin=""),c.href=i,document.head.appendChild(c),u)return new Promise((a,h)=>{c.addEventListener("load",a),c.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${i}`)))})})).then(()=>e())};class Ce{constructor(){this.listeners=[],this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.push(e),this.onSubscribe(),()=>{this.listeners=this.listeners.filter(n=>n!==e),this.onUnsubscribe()}}hasListeners(){return this.listeners.length>0}onSubscribe(){}onUnsubscribe(){}}const ke=typeof window>"u"||"Deno"in window;function k(){}function In(t,e){return typeof t=="function"?t(e):t}function _n(t){return typeof t=="number"&&t>=0&&t!==1/0}function $n(t,e){return Math.max(t+(e||0)-Date.now(),0)}function ae(t,e,n){return oe(t)?typeof e=="function"?{...n,queryKey:t,queryFn:e}:{...e,queryKey:t}:t}function Ms(t,e,n){return oe(t)?typeof e=="function"?{...n,mutationKey:t,mutationFn:e}:{...e,mutationKey:t}:typeof t=="function"?{...e,mutationFn:t}:{...t}}function B(t,e,n){return oe(t)?[{...e,queryKey:t},n]:[t||{},e]}function Je(t,e){const{type:n="all",exact:s,fetchStatus:r,predicate:i,queryKey:u,stale:o}=t;if(oe(u)){if(s){if(e.queryHash!==Ke(u,e.options))return!1}else if(!ye(e.queryKey,u))return!1}if(n!=="all"){const l=e.isActive();if(n==="active"&&!l||n==="inactive"&&l)return!1}return!(typeof o=="boolean"&&e.isStale()!==o||typeof r<"u"&&r!==e.state.fetchStatus||i&&!i(e))}function ze(t,e){const{exact:n,fetching:s,predicate:r,mutationKey:i}=t;if(oe(i)){if(!e.options.mutationKey)return!1;if(n){if(G(e.options.mutationKey)!==G(i))return!1}else if(!ye(e.options.mutationKey,i))return!1}return!(typeof s=="boolean"&&e.state.status==="loading"!==s||r&&!r(e))}function Ke(t,e){return(e?.queryKeyHashFn||G)(t)}function G(t){return JSON.stringify(t,(e,n)=>Fe(n)?Object.keys(n).sort().reduce((s,r)=>(s[r]=n[r],s),{}):n)}function ye(t,e){return xt(t,e)}function xt(t,e){return t===e?!0:typeof t!=typeof e?!1:t&&e&&typeof t=="object"&&typeof e=="object"?!Object.keys(e).some(n=>!xt(t[n],e[n])):!1}function qt(t,e){if(t===e)return t;const n=Xe(t)&&Xe(e);if(n||Fe(t)&&Fe(e)){const s=n?t.length:Object.keys(t).length,r=n?e:Object.keys(e),i=r.length,u=n?[]:{};let o=0;for(let l=0;l<i;l++){const c=n?l:r[l];u[c]=qt(t[c],e[c]),u[c]===t[c]&&o++}return s===i&&o===s?t:u}return e}function Qs(t,e){if(t&&!e||e&&!t)return!1;for(const n in t)if(t[n]!==e[n])return!1;return!0}function Xe(t){return Array.isArray(t)&&t.length===Object.keys(t).length}function Fe(t){if(!Ye(t))return!1;const e=t.constructor;if(typeof e>"u")return!0;const n=e.prototype;return!(!Ye(n)||!n.hasOwnProperty("isPrototypeOf"))}function Ye(t){return Object.prototype.toString.call(t)==="[object Object]"}function oe(t){return Array.isArray(t)}function Ft(t){return new Promise(e=>{setTimeout(e,t)})}function Ze(t){Ft(0).then(t)}function Bn(){if(typeof AbortController=="function")return new AbortController}function Hn(t,e,n){return n.isDataEqual!=null&&n.isDataEqual(t,e)?t:typeof n.structuralSharing=="function"?n.structuralSharing(t,e):n.structuralSharing!==!1?qt(t,e):e}class Gn extends Ce{constructor(){super(),this.setup=e=>{if(!ke&&window.addEventListener){const n=()=>e();return window.addEventListener("visibilitychange",n,!1),window.addEventListener("focus",n,!1),()=>{window.removeEventListener("visibilitychange",n),window.removeEventListener("focus",n)}}}}onSubscribe(){this.cleanup||this.setEventListener(this.setup)}onUnsubscribe(){if(!this.hasListeners()){var e;(e=this.cleanup)==null||e.call(this),this.cleanup=void 0}}setEventListener(e){var n;this.setup=e,(n=this.cleanup)==null||n.call(this),this.cleanup=e(s=>{typeof s=="boolean"?this.setFocused(s):this.onFocus()})}setFocused(e){this.focused=e,e&&this.onFocus()}onFocus(){this.listeners.forEach(e=>{e()})}isFocused(){return typeof this.focused=="boolean"?this.focused:typeof document>"u"?!0:[void 0,"visible","prerender"].includes(document.visibilityState)}}const De=new Gn;class Vn extends Ce{constructor(){super(),this.setup=e=>{if(!ke&&window.addEventListener){const n=()=>e();return window.addEventListener("online",n,!1),window.addEventListener("offline",n,!1),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",n)}}}}onSubscribe(){this.cleanup||this.setEventListener(this.setup)}onUnsubscribe(){if(!this.hasListeners()){var e;(e=this.cleanup)==null||e.call(this),this.cleanup=void 0}}setEventListener(e){var n;this.setup=e,(n=this.cleanup)==null||n.call(this),this.cleanup=e(s=>{typeof s=="boolean"?this.setOnline(s):this.onOnline()})}setOnline(e){this.online=e,e&&this.onOnline()}onOnline(){this.listeners.forEach(e=>{e()})}isOnline(){return typeof this.online=="boolean"?this.online:typeof navigator>"u"||typeof navigator.onLine>"u"?!0:navigator.onLine}}const pe=new Vn;function Wn(t){return Math.min(1e3*2**t,3e4)}function je(t){return(t??"online")==="online"?pe.isOnline():!0}class Dt{constructor(e){this.revert=e?.revert,this.silent=e?.silent}}function Ae(t){return t instanceof Dt}function Rt(t){let e=!1,n=0,s=!1,r,i,u;const o=new Promise((w,O)=>{i=w,u=O}),l=w=>{s||(d(new Dt(w)),t.abort==null||t.abort())},c=()=>{e=!0},a=()=>{e=!1},h=()=>!De.isFocused()||t.networkMode!=="always"&&!pe.isOnline(),f=w=>{s||(s=!0,t.onSuccess==null||t.onSuccess(w),r?.(),i(w))},d=w=>{s||(s=!0,t.onError==null||t.onError(w),r?.(),u(w))},p=()=>new Promise(w=>{r=O=>{const P=s||!h();return P&&w(O),P},t.onPause==null||t.onPause()}).then(()=>{r=void 0,s||t.onContinue==null||t.onContinue()}),C=()=>{if(s)return;let w;try{w=t.fn()}catch(O){w=Promise.reject(O)}Promise.resolve(w).then(f).catch(O=>{var P,g;if(s)return;const b=(P=t.retry)!=null?P:3,A=(g=t.retryDelay)!=null?g:Wn,S=typeof A=="function"?A(n,O):A,F=b===!0||typeof b=="number"&&n<b||typeof b=="function"&&b(n,O);if(e||!F){d(O);return}n++,t.onFail==null||t.onFail(n,O),Ft(S).then(()=>{if(h())return p()}).then(()=>{e?d(O):C()})})};return je(t.networkMode)?C():p().then(C),{promise:o,cancel:l,continue:()=>r?.()?o:Promise.resolve(),cancelRetry:c,continueRetry:a}}const Ue=console;function Jn(){let t=[],e=0,n=a=>{a()},s=a=>{a()};const r=a=>{let h;e++;try{h=a()}finally{e--,e||o()}return h},i=a=>{e?t.push(a):Ze(()=>{n(a)})},u=a=>(...h)=>{i(()=>{a(...h)})},o=()=>{const a=t;t=[],a.length&&Ze(()=>{s(()=>{a.forEach(h=>{n(h)})})})};return{batch:r,batchCalls:u,schedule:i,setNotifyFunction:a=>{n=a},setBatchNotifyFunction:a=>{s=a}}}const T=Jn();class Lt{destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),_n(this.cacheTime)&&(this.gcTimeout=setTimeout(()=>{this.optionalRemove()},this.cacheTime))}updateCacheTime(e){this.cacheTime=Math.max(this.cacheTime||0,e??(ke?1/0:5*60*1e3))}clearGcTimeout(){this.gcTimeout&&(clearTimeout(this.gcTimeout),this.gcTimeout=void 0)}}class zn extends Lt{constructor(e){super(),this.abortSignalConsumed=!1,this.defaultOptions=e.defaultOptions,this.setOptions(e.options),this.observers=[],this.cache=e.cache,this.logger=e.logger||Ue,this.queryKey=e.queryKey,this.queryHash=e.queryHash,this.initialState=e.state||Xn(this.options),this.state=this.initialState,this.scheduleGc()}get meta(){return this.options.meta}setOptions(e){this.options={...this.defaultOptions,...e},this.updateCacheTime(this.options.cacheTime)}optionalRemove(){!this.observers.length&&this.state.fetchStatus==="idle"&&this.cache.remove(this)}setData(e,n){const s=Hn(this.state.data,e,this.options);return this.dispatch({data:s,type:"success",dataUpdatedAt:n?.updatedAt,manual:n?.manual}),s}setState(e,n){this.dispatch({type:"setState",state:e,setStateOptions:n})}cancel(e){var n;const s=this.promise;return(n=this.retryer)==null||n.cancel(e),s?s.then(k).catch(k):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(this.initialState)}isActive(){return this.observers.some(e=>e.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some(e=>e.getCurrentResult().isStale)}isStaleByTime(e=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!$n(this.state.dataUpdatedAt,e)}onFocus(){var e;const n=this.observers.find(s=>s.shouldFetchOnWindowFocus());n&&n.refetch({cancelRefetch:!1}),(e=this.retryer)==null||e.continue()}onOnline(){var e;const n=this.observers.find(s=>s.shouldFetchOnReconnect());n&&n.refetch({cancelRefetch:!1}),(e=this.retryer)==null||e.continue()}addObserver(e){this.observers.indexOf(e)===-1&&(this.observers.push(e),this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:e}))}removeObserver(e){this.observers.indexOf(e)!==-1&&(this.observers=this.observers.filter(n=>n!==e),this.observers.length||(this.retryer&&(this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.scheduleGc()),this.cache.notify({type:"observerRemoved",query:this,observer:e}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||this.dispatch({type:"invalidate"})}fetch(e,n){var s,r;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&n!=null&&n.cancelRefetch)this.cancel({silent:!0});else if(this.promise){var i;return(i=this.retryer)==null||i.continueRetry(),this.promise}}if(e&&this.setOptions(e),!this.options.queryFn){const d=this.observers.find(p=>p.options.queryFn);d&&this.setOptions(d.options)}Array.isArray(this.options.queryKey);const u=Bn(),o={queryKey:this.queryKey,pageParam:void 0,meta:this.meta},l=d=>{Object.defineProperty(d,"signal",{enumerable:!0,get:()=>{if(u)return this.abortSignalConsumed=!0,u.signal}})};l(o);const c=()=>this.options.queryFn?(this.abortSignalConsumed=!1,this.options.queryFn(o)):Promise.reject("Missing queryFn"),a={fetchOptions:n,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:c};if(l(a),(s=this.options.behavior)==null||s.onFetch(a),this.revertState=this.state,this.state.fetchStatus==="idle"||this.state.fetchMeta!==((r=a.fetchOptions)==null?void 0:r.meta)){var h;this.dispatch({type:"fetch",meta:(h=a.fetchOptions)==null?void 0:h.meta})}const f=d=>{if(Ae(d)&&d.silent||this.dispatch({type:"error",error:d}),!Ae(d)){var p,C;(p=(C=this.cache.config).onError)==null||p.call(C,d,this)}this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return this.retryer=Rt({fn:a.fetchFn,abort:u?.abort.bind(u),onSuccess:d=>{var p,C;if(typeof d>"u"){f(new Error("undefined"));return}this.setData(d),(p=(C=this.cache.config).onSuccess)==null||p.call(C,d,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:f,onFail:(d,p)=>{this.dispatch({type:"failed",failureCount:d,error:p})},onPause:()=>{this.dispatch({type:"pause"})},onContinue:()=>{this.dispatch({type:"continue"})},retry:a.options.retry,retryDelay:a.options.retryDelay,networkMode:a.options.networkMode}),this.promise=this.retryer.promise,this.promise}dispatch(e){const n=s=>{var r,i;switch(e.type){case"failed":return{...s,fetchFailureCount:e.failureCount,fetchFailureReason:e.error};case"pause":return{...s,fetchStatus:"paused"};case"continue":return{...s,fetchStatus:"fetching"};case"fetch":return{...s,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:(r=e.meta)!=null?r:null,fetchStatus:je(this.options.networkMode)?"fetching":"paused",...!s.dataUpdatedAt&&{error:null,status:"loading"}};case"success":return{...s,data:e.data,dataUpdateCount:s.dataUpdateCount+1,dataUpdatedAt:(i=e.dataUpdatedAt)!=null?i:Date.now(),error:null,isInvalidated:!1,status:"success",...!e.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const u=e.error;return Ae(u)&&u.revert&&this.revertState?{...this.revertState}:{...s,error:u,errorUpdateCount:s.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:s.fetchFailureCount+1,fetchFailureReason:u,fetchStatus:"idle",status:"error"};case"invalidate":return{...s,isInvalidated:!0};case"setState":return{...s,...e.state}}};this.state=n(this.state),T.batch(()=>{this.observers.forEach(s=>{s.onQueryUpdate(e)}),this.cache.notify({query:this,type:"updated",action:e})})}}function Xn(t){const e=typeof t.initialData=="function"?t.initialData():t.initialData,n=typeof e<"u",s=n?typeof t.initialDataUpdatedAt=="function"?t.initialDataUpdatedAt():t.initialDataUpdatedAt:0;return{data:e,dataUpdateCount:0,dataUpdatedAt:n?s??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:n?"success":"loading",fetchStatus:"idle"}}class Yn extends Ce{constructor(e){super(),this.config=e||{},this.queries=[],this.queriesMap={}}build(e,n,s){var r;const i=n.queryKey,u=(r=n.queryHash)!=null?r:Ke(i,n);let o=this.get(u);return o||(o=new zn({cache:this,logger:e.getLogger(),queryKey:i,queryHash:u,options:e.defaultQueryOptions(n),state:s,defaultOptions:e.getQueryDefaults(i)}),this.add(o)),o}add(e){this.queriesMap[e.queryHash]||(this.queriesMap[e.queryHash]=e,this.queries.push(e),this.notify({type:"added",query:e}))}remove(e){const n=this.queriesMap[e.queryHash];n&&(e.destroy(),this.queries=this.queries.filter(s=>s!==e),n===e&&delete this.queriesMap[e.queryHash],this.notify({type:"removed",query:e}))}clear(){T.batch(()=>{this.queries.forEach(e=>{this.remove(e)})})}get(e){return this.queriesMap[e]}getAll(){return this.queries}find(e,n){const[s]=B(e,n);return typeof s.exact>"u"&&(s.exact=!0),this.queries.find(r=>Je(s,r))}findAll(e,n){const[s]=B(e,n);return Object.keys(s).length>0?this.queries.filter(r=>Je(s,r)):this.queries}notify(e){T.batch(()=>{this.listeners.forEach(n=>{n(e)})})}onFocus(){T.batch(()=>{this.queries.forEach(e=>{e.onFocus()})})}onOnline(){T.batch(()=>{this.queries.forEach(e=>{e.onOnline()})})}}class Zn extends Lt{constructor(e){super(),this.options={...e.defaultOptions,...e.options},this.mutationId=e.mutationId,this.mutationCache=e.mutationCache,this.logger=e.logger||Ue,this.observers=[],this.state=e.state||es(),this.updateCacheTime(this.options.cacheTime),this.scheduleGc()}get meta(){return this.options.meta}setState(e){this.dispatch({type:"setState",state:e})}addObserver(e){this.observers.indexOf(e)===-1&&(this.observers.push(e),this.clearGcTimeout(),this.mutationCache.notify({type:"observerAdded",mutation:this,observer:e}))}removeObserver(e){this.observers=this.observers.filter(n=>n!==e),this.scheduleGc(),this.mutationCache.notify({type:"observerRemoved",mutation:this,observer:e})}optionalRemove(){this.observers.length||(this.state.status==="loading"?this.scheduleGc():this.mutationCache.remove(this))}continue(){var e,n;return(e=(n=this.retryer)==null?void 0:n.continue())!=null?e:this.execute()}async execute(){const e=()=>{var g;return this.retryer=Rt({fn:()=>this.options.mutationFn?this.options.mutationFn(this.state.variables):Promise.reject("No mutationFn found"),onFail:(b,A)=>{this.dispatch({type:"failed",failureCount:b,error:A})},onPause:()=>{this.dispatch({type:"pause"})},onContinue:()=>{this.dispatch({type:"continue"})},retry:(g=this.options.retry)!=null?g:0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode}),this.retryer.promise},n=this.state.status==="loading";try{var s,r,i,u,o,l;if(!n){var c,a,h,f;this.dispatch({type:"loading",variables:this.options.variables}),await((c=(a=this.mutationCache.config).onMutate)==null?void 0:c.call(a,this.state.variables,this));const b=await((h=(f=this.options).onMutate)==null?void 0:h.call(f,this.state.variables));b!==this.state.context&&this.dispatch({type:"loading",context:b,variables:this.state.variables})}const g=await e();return await((s=(r=this.mutationCache.config).onSuccess)==null?void 0:s.call(r,g,this.state.variables,this.state.context,this)),await((i=(u=this.options).onSuccess)==null?void 0:i.call(u,g,this.state.variables,this.state.context)),await((o=(l=this.options).onSettled)==null?void 0:o.call(l,g,null,this.state.variables,this.state.context)),this.dispatch({type:"success",data:g}),g}catch(g){try{var d,p,C,w,O,P;throw await((d=(p=this.mutationCache.config).onError)==null?void 0:d.call(p,g,this.state.variables,this.state.context,this)),await((C=(w=this.options).onError)==null?void 0:C.call(w,g,this.state.variables,this.state.context)),await((O=(P=this.options).onSettled)==null?void 0:O.call(P,void 0,g,this.state.variables,this.state.context)),g}finally{this.dispatch({type:"error",error:g})}}}dispatch(e){const n=s=>{switch(e.type){case"failed":return{...s,failureCount:e.failureCount,failureReason:e.error};case"pause":return{...s,isPaused:!0};case"continue":return{...s,isPaused:!1};case"loading":return{...s,context:e.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!je(this.options.networkMode),status:"loading",variables:e.variables};case"success":return{...s,data:e.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...s,data:void 0,error:e.error,failureCount:s.failureCount+1,failureReason:e.error,isPaused:!1,status:"error"};case"setState":return{...s,...e.state}}};this.state=n(this.state),T.batch(()=>{this.observers.forEach(s=>{s.onMutationUpdate(e)}),this.mutationCache.notify({mutation:this,type:"updated",action:e})})}}function es(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0}}class ts extends Ce{constructor(e){super(),this.config=e||{},this.mutations=[],this.mutationId=0}build(e,n,s){const r=new Zn({mutationCache:this,logger:e.getLogger(),mutationId:++this.mutationId,options:e.defaultMutationOptions(n),state:s,defaultOptions:n.mutationKey?e.getMutationDefaults(n.mutationKey):void 0});return this.add(r),r}add(e){this.mutations.push(e),this.notify({type:"added",mutation:e})}remove(e){this.mutations=this.mutations.filter(n=>n!==e),this.notify({type:"removed",mutation:e})}clear(){T.batch(()=>{this.mutations.forEach(e=>{this.remove(e)})})}getAll(){return this.mutations}find(e){return typeof e.exact>"u"&&(e.exact=!0),this.mutations.find(n=>ze(e,n))}findAll(e){return this.mutations.filter(n=>ze(e,n))}notify(e){T.batch(()=>{this.listeners.forEach(n=>{n(e)})})}resumePausedMutations(){var e;return this.resuming=((e=this.resuming)!=null?e:Promise.resolve()).then(()=>{const n=this.mutations.filter(s=>s.state.isPaused);return T.batch(()=>n.reduce((s,r)=>s.then(()=>r.continue().catch(k)),Promise.resolve()))}).then(()=>{this.resuming=void 0}),this.resuming}}function ns(){return{onFetch:t=>{t.fetchFn=()=>{var e,n,s,r,i,u;const o=(e=t.fetchOptions)==null||(n=e.meta)==null?void 0:n.refetchPage,l=(s=t.fetchOptions)==null||(r=s.meta)==null?void 0:r.fetchMore,c=l?.pageParam,a=l?.direction==="forward",h=l?.direction==="backward",f=((i=t.state.data)==null?void 0:i.pages)||[],d=((u=t.state.data)==null?void 0:u.pageParams)||[];let p=d,C=!1;const w=S=>{Object.defineProperty(S,"signal",{enumerable:!0,get:()=>{var F;if((F=t.signal)!=null&&F.aborted)C=!0;else{var q;(q=t.signal)==null||q.addEventListener("abort",()=>{C=!0})}return t.signal}})},O=t.options.queryFn||(()=>Promise.reject("Missing queryFn")),P=(S,F,q,y)=>(p=y?[F,...p]:[...p,F],y?[q,...S]:[...S,q]),g=(S,F,q,y)=>{if(C)return Promise.reject("Cancelled");if(typeof q>"u"&&!F&&S.length)return Promise.resolve(S);const m={queryKey:t.queryKey,pageParam:q,meta:t.options.meta};w(m);const v=O(m);return Promise.resolve(v).then(W=>P(S,q,W,y))};let b;if(!f.length)b=g([]);else if(a){const S=typeof c<"u",F=S?c:et(t.options,f);b=g(f,S,F)}else if(h){const S=typeof c<"u",F=S?c:ss(t.options,f);b=g(f,S,F,!0)}else{p=[];const S=typeof t.options.getNextPageParam>"u";b=(o&&f[0]?o(f[0],0,f):!0)?g([],S,d[0]):Promise.resolve(P([],d[0],f[0]));for(let q=1;q<f.length;q++)b=b.then(y=>{if(o&&f[q]?o(f[q],q,f):!0){const v=S?d[q]:et(t.options,y);return g(y,S,v)}return Promise.resolve(P(y,d[q],f[q]))})}return b.then(S=>({pages:S,pageParams:p}))}}}}function et(t,e){return t.getNextPageParam==null?void 0:t.getNextPageParam(e[e.length-1],e)}function ss(t,e){return t.getPreviousPageParam==null?void 0:t.getPreviousPageParam(e[0],e)}class rs{constructor(e={}){this.queryCache=e.queryCache||new Yn,this.mutationCache=e.mutationCache||new ts,this.logger=e.logger||Ue,this.defaultOptions=e.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[],this.mountCount=0}mount(){this.mountCount++,this.mountCount===1&&(this.unsubscribeFocus=De.subscribe(()=>{De.isFocused()&&(this.resumePausedMutations(),this.queryCache.onFocus())}),this.unsubscribeOnline=pe.subscribe(()=>{pe.isOnline()&&(this.resumePausedMutations(),this.queryCache.onOnline())}))}unmount(){var e,n;this.mountCount--,this.mountCount===0&&((e=this.unsubscribeFocus)==null||e.call(this),this.unsubscribeFocus=void 0,(n=this.unsubscribeOnline)==null||n.call(this),this.unsubscribeOnline=void 0)}isFetching(e,n){const[s]=B(e,n);return s.fetchStatus="fetching",this.queryCache.findAll(s).length}isMutating(e){return this.mutationCache.findAll({...e,fetching:!0}).length}getQueryData(e,n){var s;return(s=this.queryCache.find(e,n))==null?void 0:s.state.data}ensureQueryData(e,n,s){const r=ae(e,n,s),i=this.getQueryData(r.queryKey);return i?Promise.resolve(i):this.fetchQuery(r)}getQueriesData(e){return this.getQueryCache().findAll(e).map(({queryKey:n,state:s})=>{const r=s.data;return[n,r]})}setQueryData(e,n,s){const r=this.queryCache.find(e),i=r?.state.data,u=In(n,i);if(typeof u>"u")return;const o=ae(e),l=this.defaultQueryOptions(o);return this.queryCache.build(this,l).setData(u,{...s,manual:!0})}setQueriesData(e,n,s){return T.batch(()=>this.getQueryCache().findAll(e).map(({queryKey:r})=>[r,this.setQueryData(r,n,s)]))}getQueryState(e,n){var s;return(s=this.queryCache.find(e,n))==null?void 0:s.state}removeQueries(e,n){const[s]=B(e,n),r=this.queryCache;T.batch(()=>{r.findAll(s).forEach(i=>{r.remove(i)})})}resetQueries(e,n,s){const[r,i]=B(e,n,s),u=this.queryCache,o={type:"active",...r};return T.batch(()=>(u.findAll(r).forEach(l=>{l.reset()}),this.refetchQueries(o,i)))}cancelQueries(e,n,s){const[r,i={}]=B(e,n,s);typeof i.revert>"u"&&(i.revert=!0);const u=T.batch(()=>this.queryCache.findAll(r).map(o=>o.cancel(i)));return Promise.all(u).then(k).catch(k)}invalidateQueries(e,n,s){const[r,i]=B(e,n,s);return T.batch(()=>{var u,o;if(this.queryCache.findAll(r).forEach(c=>{c.invalidate()}),r.refetchType==="none")return Promise.resolve();const l={...r,type:(u=(o=r.refetchType)!=null?o:r.type)!=null?u:"active"};return this.refetchQueries(l,i)})}refetchQueries(e,n,s){const[r,i]=B(e,n,s),u=T.batch(()=>this.queryCache.findAll(r).filter(l=>!l.isDisabled()).map(l=>{var c;return l.fetch(void 0,{...i,cancelRefetch:(c=i?.cancelRefetch)!=null?c:!0,meta:{refetchPage:r.refetchPage}})}));let o=Promise.all(u).then(k);return i!=null&&i.throwOnError||(o=o.catch(k)),o}fetchQuery(e,n,s){const r=ae(e,n,s),i=this.defaultQueryOptions(r);typeof i.retry>"u"&&(i.retry=!1);const u=this.queryCache.build(this,i);return u.isStaleByTime(i.staleTime)?u.fetch(i):Promise.resolve(u.state.data)}prefetchQuery(e,n,s){return this.fetchQuery(e,n,s).then(k).catch(k)}fetchInfiniteQuery(e,n,s){const r=ae(e,n,s);return r.behavior=ns(),this.fetchQuery(r)}prefetchInfiniteQuery(e,n,s){return this.fetchInfiniteQuery(e,n,s).then(k).catch(k)}resumePausedMutations(){return this.mutationCache.resumePausedMutations()}getQueryCache(){return this.queryCache}getMutationCache(){return this.mutationCache}getLogger(){return this.logger}getDefaultOptions(){return this.defaultOptions}setDefaultOptions(e){this.defaultOptions=e}setQueryDefaults(e,n){const s=this.queryDefaults.find(r=>G(e)===G(r.queryKey));s?s.defaultOptions=n:this.queryDefaults.push({queryKey:e,defaultOptions:n})}getQueryDefaults(e){if(!e)return;const n=this.queryDefaults.find(s=>ye(e,s.queryKey));return n?.defaultOptions}setMutationDefaults(e,n){const s=this.mutationDefaults.find(r=>G(e)===G(r.mutationKey));s?s.defaultOptions=n:this.mutationDefaults.push({mutationKey:e,defaultOptions:n})}getMutationDefaults(e){if(!e)return;const n=this.mutationDefaults.find(s=>ye(e,s.mutationKey));return n?.defaultOptions}defaultQueryOptions(e){if(e!=null&&e._defaulted)return e;const n={...this.defaultOptions.queries,...this.getQueryDefaults(e?.queryKey),...e,_defaulted:!0};return!n.queryHash&&n.queryKey&&(n.queryHash=Ke(n.queryKey,n)),typeof n.refetchOnReconnect>"u"&&(n.refetchOnReconnect=n.networkMode!=="always"),typeof n.useErrorBoundary>"u"&&(n.useErrorBoundary=!!n.suspense),n}defaultMutationOptions(e){return e!=null&&e._defaulted?e:{...this.defaultOptions.mutations,...this.getMutationDefaults(e?.mutationKey),...e,_defaulted:!0}}clear(){this.queryCache.clear(),this.mutationCache.clear()}}function is(t){return{mutationKey:t.options.mutationKey,state:t.state}}function os(t){return{state:t.state,queryKey:t.queryKey,queryHash:t.queryHash}}function us(t){return t.state.isPaused}function as(t){return t.state.status==="success"}function ls(t,e={}){const n=[],s=[];if(e.dehydrateMutations!==!1){const r=e.shouldDehydrateMutation||us;t.getMutationCache().getAll().forEach(i=>{r(i)&&n.push(is(i))})}if(e.dehydrateQueries!==!1){const r=e.shouldDehydrateQuery||as;t.getQueryCache().getAll().forEach(i=>{r(i)&&s.push(os(i))})}return{mutations:n,queries:s}}function cs(t,e,n){if(typeof e!="object"||e===null)return;const s=t.getMutationCache(),r=t.getQueryCache(),i=e.mutations||[],u=e.queries||[];i.forEach(o=>{var l;s.build(t,{...n==null||(l=n.defaultOptions)==null?void 0:l.mutations,mutationKey:o.mutationKey},o.state)}),u.forEach(o=>{var l;const c=r.get(o.queryHash),a={...o.state,fetchStatus:"idle"};if(c){c.state.dataUpdatedAt<a.dataUpdatedAt&&c.setState(a);return}r.build(t,{...n==null||(l=n.defaultOptions)==null?void 0:l.queries,queryKey:o.queryKey,queryHash:o.queryHash},a)})}const tt=me(void 0),Mt=me(!1);function Qt(t,e){return t||(e&&typeof window<"u"?(window.SolidQueryClientContext||(window.SolidQueryClientContext=tt),window.SolidQueryClientContext):tt)}const Ts=({context:t}={})=>{const e=re(Qt(t,re(Mt)));if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e},fs=t=>{const e=mt({contextSharing:!1},t);jt(()=>{e.client.mount()}),Y(()=>e.client.unmount());const n=Qt(e.context,e.contextSharing);return R(Mt.Provider,{get value(){return!e.context&&e.contextSharing},get children(){return R(n.Provider,{get value(){return e.client},get children(){return e.children}})}})};function hs({storage:t,key:e="REACT_QUERY_OFFLINE_CACHE",throttleTime:n=1e3,serialize:s=JSON.stringify,deserialize:r=JSON.parse,retry:i}){if(typeof t<"u"){const u=o=>{try{t.setItem(e,s(o));return}catch(l){return l}};return{persistClient:ds(o=>{let l=o,c=u(l),a=0;for(;c&&l;)a++,l=i?.({persistedClient:l,error:c,errorCount:a}),l&&(c=u(l))},n),restoreClient:()=>{const o=t.getItem(e);if(o)return r(o)},removeClient:()=>{t.removeItem(e)}}}return{persistClient:nt,restoreClient:()=>{},removeClient:nt}}function ds(t,e=100){let n=null,s;return function(...r){s=r,n===null&&(n=setTimeout(()=>{t(...s),n=null},e))}}function nt(){}const ys=["added","removed","updated"];function st(t){return ys.includes(t)}async function ps({queryClient:t,persister:e,maxAge:n=1e3*60*60*24,buster:s="",hydrateOptions:r}){try{const i=await e.restoreClient();if(i)if(i.timestamp){const u=Date.now()-i.timestamp>n,o=i.buster!==s;u||o?e.removeClient():cs(t,i.clientState,r)}else e.removeClient()}catch{e.removeClient()}}async function rt({queryClient:t,persister:e,buster:n="",dehydrateOptions:s}){const r={buster:n,timestamp:Date.now(),clientState:ls(t,s)};await e.persistClient(r)}function ms(t){const e=t.queryClient.getQueryCache().subscribe(s=>{st(s.type)&&rt(t)}),n=t.queryClient.getMutationCache().subscribe(s=>{st(s.type)&&rt(t)});return()=>{e(),n()}}function gs(t){let e=!1,n;const s=()=>{e=!0,n?.()},r=ps(t).then(()=>{e||(n=ms(t))});return[s,r]}const bs=Qe(()=>Ne(()=>import("./Home-63973676.js"),["assets/Home-63973676.js","assets/usePersistStatus-f4396d81.js"])),vs=Qe(()=>Ne(()=>import("./Hello-3400c108.js"),["assets/Hello-3400c108.js","assets/usePersistStatus-f4396d81.js"])),ws=Qe(()=>Ne(()=>import("./NotFound-346660fd.js"),[])),it=new rs({}),Cs=hs({storage:window.localStorage}),Ps=()=>(Le(()=>{const[t]=gs({queryClient:it,persister:Cs});Y(()=>t())}),R(fs,{client:it,get children(){return R(kn,{get children(){return[R(Se,{path:"/hello",element:()=>R(vs,{})}),R(Se,{path:"/",element:()=>R(bs,{})}),R(Se,{path:"/*",element:()=>R(ws,{})})]}})}}));sn(()=>R(Nn,{get base(){return"/rabbit/"},get children(){return R(Ps,{})}}),document.getElementById("root"));export{Ee as $,Ds as A,z as B,As as C,R as D,xs as E,bt as F,Es as G,gt as H,vt as I,mt as J,on as K,Le as L,qs as M,Ls as N,kt as O,Ss as P,Ce as S,_n as a,Ae as b,je as c,T as d,Kt as e,De as f,es as g,Os as h,ke as i,jt as j,Ie as k,at as l,K as m,k as n,Y as o,Ms as p,D as q,Hn as r,Qs as s,$n as t,Ts as u,cn as v,H as w,an as x,Fs as y,Rs as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
