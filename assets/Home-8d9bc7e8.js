import{S as Po,s as wr,n as Ra,i as ws,a as xs,t as Oa,f as Ua,c as Pa,r as $s,b as Ma,d as Mo,g as Na,u as et,e as Da,h as _s,o as wt,j as tt,k as Gt,l as No,p as Es,m as X,q as Z,v as _,w as ee,x as Fa,y as S,z as _n,A as de,B as ja,C as Mn,D as v,M as pe,E as xt,F as $e,G as nt,H as z,I as ge,J as za,K as En,L as Ka,N as Ga}from"./index-58b729c2.js";import{c as kn,u as ct,a as Wa,b as qa,d as Qa}from"./usePersistStatus-3f2ee7d3.js";class Va extends Po{constructor(t,n){super(),this.client=t,this.options=n,this.trackedProps=new Set,this.selectError=null,this.bindMethods(),this.setOptions(n)}bindMethods(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.length===1&&(this.currentQuery.addObserver(this),ks(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())}onUnsubscribe(){this.listeners.length||this.destroy()}shouldFetchOnReconnect(){return xr(this.currentQuery,this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return xr(this.currentQuery,this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=[],this.clearStaleTimeout(),this.clearRefetchInterval(),this.currentQuery.removeObserver(this)}setOptions(t,n){const r=this.options,s=this.currentQuery;if(this.options=this.client.defaultQueryOptions(t),wr(r,this.options)||this.client.getQueryCache().notify({type:"observerOptionsUpdated",query:this.currentQuery,observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=r.queryKey),this.updateQuery();const o=this.hasListeners();o&&Ss(this.currentQuery,s,this.options,r)&&this.executeFetch(),this.updateResult(n),o&&(this.currentQuery!==s||this.options.enabled!==r.enabled||this.options.staleTime!==r.staleTime)&&this.updateStaleTimeout();const i=this.computeRefetchInterval();o&&(this.currentQuery!==s||this.options.enabled!==r.enabled||i!==this.currentRefetchInterval)&&this.updateRefetchInterval(i)}getOptimisticResult(t){const n=this.client.getQueryCache().build(this.client,t);return this.createResult(n,t)}getCurrentResult(){return this.currentResult}trackResult(t){const n={};return Object.keys(t).forEach(r=>{Object.defineProperty(n,r,{configurable:!1,enumerable:!0,get:()=>(this.trackedProps.add(r),t[r])})}),n}getCurrentQuery(){return this.currentQuery}remove(){this.client.getQueryCache().remove(this.currentQuery)}refetch({refetchPage:t,...n}={}){return this.fetch({...n,meta:{refetchPage:t}})}fetchOptimistic(t){const n=this.client.defaultQueryOptions(t),r=this.client.getQueryCache().build(this.client,n);return r.isFetchingOptimistic=!0,r.fetch().then(()=>this.createResult(r,n))}fetch(t){var n;return this.executeFetch({...t,cancelRefetch:(n=t.cancelRefetch)!=null?n:!0}).then(()=>(this.updateResult(),this.currentResult))}executeFetch(t){this.updateQuery();let n=this.currentQuery.fetch(this.options,t);return t!=null&&t.throwOnError||(n=n.catch(Ra)),n}updateStaleTimeout(){if(this.clearStaleTimeout(),ws||this.currentResult.isStale||!xs(this.options.staleTime))return;const n=Oa(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout(()=>{this.currentResult.isStale||this.updateResult()},n)}computeRefetchInterval(){var t;return typeof this.options.refetchInterval=="function"?this.options.refetchInterval(this.currentResult.data,this.currentQuery):(t=this.options.refetchInterval)!=null?t:!1}updateRefetchInterval(t){this.clearRefetchInterval(),this.currentRefetchInterval=t,!(ws||this.options.enabled===!1||!xs(this.currentRefetchInterval)||this.currentRefetchInterval===0)&&(this.refetchIntervalId=setInterval(()=>{(this.options.refetchIntervalInBackground||Ua.isFocused())&&this.executeFetch()},this.currentRefetchInterval))}updateTimers(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())}clearStaleTimeout(){this.staleTimeoutId&&(clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0)}clearRefetchInterval(){this.refetchIntervalId&&(clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0)}createResult(t,n){const r=this.currentQuery,s=this.options,o=this.currentResult,i=this.currentResultState,a=this.currentResultOptions,c=t!==r,d=c?t.state:this.currentQueryInitialState,u=c?this.currentResult:this.previousQueryResult,{state:l}=t;let{dataUpdatedAt:h,error:f,errorUpdatedAt:p,fetchStatus:g,status:m}=l,$=!1,x=!1,y;if(n._optimisticResults){const A=this.hasListeners(),R=!A&&ks(t,n),C=A&&Ss(t,r,n,s);(R||C)&&(g=Pa(t.options.networkMode)?"fetching":"paused",h||(m="loading")),n._optimisticResults==="isRestoring"&&(g="idle")}if(n.keepPreviousData&&!l.dataUpdatedAt&&u!=null&&u.isSuccess&&m!=="error")y=u.data,h=u.dataUpdatedAt,m=u.status,$=!0;else if(n.select&&typeof l.data<"u")if(o&&l.data===i?.data&&n.select===this.selectFn)y=this.selectResult;else try{this.selectFn=n.select,y=n.select(l.data),y=$s(o?.data,y,n),this.selectResult=y,this.selectError=null}catch(A){this.selectError=A}else y=l.data;if(typeof n.placeholderData<"u"&&typeof y>"u"&&m==="loading"){let A;if(o!=null&&o.isPlaceholderData&&n.placeholderData===a?.placeholderData)A=o.data;else if(A=typeof n.placeholderData=="function"?n.placeholderData():n.placeholderData,n.select&&typeof A<"u")try{A=n.select(A),this.selectError=null}catch(R){this.selectError=R}typeof A<"u"&&(m="success",y=$s(o?.data,A,n),x=!0)}this.selectError&&(f=this.selectError,y=this.selectResult,p=Date.now(),m="error");const b=g==="fetching",w=m==="loading",E=m==="error";return{status:m,fetchStatus:g,isLoading:w,isSuccess:m==="success",isError:E,isInitialLoading:w&&b,data:y,dataUpdatedAt:h,error:f,errorUpdatedAt:p,failureCount:l.fetchFailureCount,failureReason:l.fetchFailureReason,errorUpdateCount:l.errorUpdateCount,isFetched:l.dataUpdateCount>0||l.errorUpdateCount>0,isFetchedAfterMount:l.dataUpdateCount>d.dataUpdateCount||l.errorUpdateCount>d.errorUpdateCount,isFetching:b,isRefetching:b&&!w,isLoadingError:E&&l.dataUpdatedAt===0,isPaused:g==="paused",isPlaceholderData:x,isPreviousData:$,isRefetchError:E&&l.dataUpdatedAt!==0,isStale:Or(t,n),refetch:this.refetch,remove:this.remove}}updateResult(t){const n=this.currentResult,r=this.createResult(this.currentQuery,this.options);if(this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,wr(r,n))return;this.currentResult=r;const s={cache:!0},o=()=>{if(!n)return!0;const{notifyOnChangeProps:i}=this.options;if(i==="all"||!i&&!this.trackedProps.size)return!0;const a=new Set(i??this.trackedProps);return this.options.useErrorBoundary&&a.add("error"),Object.keys(this.currentResult).some(c=>{const d=c;return this.currentResult[d]!==n[d]&&a.has(d)})};t?.listeners!==!1&&o()&&(s.listeners=!0),this.notify({...s,...t})}updateQuery(){const t=this.client.getQueryCache().build(this.client,this.options);if(t===this.currentQuery)return;const n=this.currentQuery;this.currentQuery=t,this.currentQueryInitialState=t.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(n?.removeObserver(this),t.addObserver(this))}onQueryUpdate(t){const n={};t.type==="success"?n.onSuccess=!t.manual:t.type==="error"&&!Ma(t.error)&&(n.onError=!0),this.updateResult(n),this.hasListeners()&&this.updateTimers()}notify(t){Mo.batch(()=>{if(t.onSuccess){var n,r,s,o;(n=(r=this.options).onSuccess)==null||n.call(r,this.currentResult.data),(s=(o=this.options).onSettled)==null||s.call(o,this.currentResult.data,null)}else if(t.onError){var i,a,c,d;(i=(a=this.options).onError)==null||i.call(a,this.currentResult.error),(c=(d=this.options).onSettled)==null||c.call(d,void 0,this.currentResult.error)}t.listeners&&this.listeners.forEach(u=>{u(this.currentResult)}),t.cache&&this.client.getQueryCache().notify({query:this.currentQuery,type:"observerResultsUpdated"})})}}function Za(e,t){return t.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&t.retryOnMount===!1)}function ks(e,t){return Za(e,t)||e.state.dataUpdatedAt>0&&xr(e,t,t.refetchOnMount)}function xr(e,t,n){if(t.enabled!==!1){const r=typeof n=="function"?n(e):n;return r==="always"||r!==!1&&Or(e,t)}return!1}function Ss(e,t,n,r){return n.enabled!==!1&&(e!==t||r.enabled===!1)&&(!n.suspense||e.state.status!=="error")&&Or(e,n)}function Or(e,t){return e.isStaleByTime(t.staleTime)}class Xa extends Po{constructor(t,n){super(),this.client=t,this.setOptions(n),this.bindMethods(),this.updateResult()}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(t){const n=this.options;this.options=this.client.defaultMutationOptions(t),wr(n,this.options)||this.client.getMutationCache().notify({type:"observerOptionsUpdated",mutation:this.currentMutation,observer:this})}onUnsubscribe(){if(!this.listeners.length){var t;(t=this.currentMutation)==null||t.removeObserver(this)}}onMutationUpdate(t){this.updateResult();const n={listeners:!0};t.type==="success"?n.onSuccess=!0:t.type==="error"&&(n.onError=!0),this.notify(n)}getCurrentResult(){return this.currentResult}reset(){this.currentMutation=void 0,this.updateResult(),this.notify({listeners:!0})}mutate(t,n){return this.mutateOptions=n,this.currentMutation&&this.currentMutation.removeObserver(this),this.currentMutation=this.client.getMutationCache().build(this.client,{...this.options,variables:typeof t<"u"?t:this.options.variables}),this.currentMutation.addObserver(this),this.currentMutation.execute()}updateResult(){const t=this.currentMutation?this.currentMutation.state:Na(),n={...t,isLoading:t.status==="loading",isSuccess:t.status==="success",isError:t.status==="error",isIdle:t.status==="idle",mutate:this.mutate,reset:this.reset};this.currentResult=n}notify(t){Mo.batch(()=>{if(this.mutateOptions&&this.hasListeners()){if(t.onSuccess){var n,r,s,o;(n=(r=this.mutateOptions).onSuccess)==null||n.call(r,this.currentResult.data,this.currentResult.variables,this.currentResult.context),(s=(o=this.mutateOptions).onSettled)==null||s.call(o,this.currentResult.data,null,this.currentResult.variables,this.currentResult.context)}else if(t.onError){var i,a,c,d;(i=(a=this.mutateOptions).onError)==null||i.call(a,this.currentResult.error,this.currentResult.variables,this.currentResult.context),(c=(d=this.mutateOptions).onSettled)==null||c.call(d,void 0,this.currentResult.error,this.currentResult.variables,this.currentResult.context)}}t.listeners&&this.listeners.forEach(u=>{u(this.currentResult)})})}}function Ya(e){return typeof e=="function"}function As(e,t,n){if(!Ya(e)){const{queryKey:r,...s}=e;return r?{...s,queryKey:r()}:e}return typeof t=="function"?{...n,queryKey:e(),queryFn:t}:{...t,queryKey:e()}}function Do(e,t){return typeof e=="function"?e(...t):!!e}function Ja(e,t){const n=et({context:e.context}),r=Symbol("empty"),s=n.defaultQueryOptions(e);s._optimisticResults="optimistic";const o=new t(n,s),[i,a]=kn(o.getOptimisticResult(s)),[c,{refetch:d,mutate:u}]=Da(()=>new Promise(p=>{i.isFetching&&i.isLoading||(ct(i.data)===r&&p(void 0),p(ct(i.data)))}));_s(()=>{u(()=>ct(i.data)),d()});let l=[];const h=o.subscribe(p=>{l.push(()=>{_s(()=>{const g={...ct(p)};g.data===void 0&&(g.data=r),a(ct(g)),u(()=>ct(p.data)),d()})}),queueMicrotask(()=>{const g=l.pop();g&&g(),l=[]})});wt(()=>h()),tt(()=>{o.setOptions(s,{listeners:!1})}),Gt(()=>{const p=n.defaultQueryOptions(e);o.setOptions(p)}),Gt(No(()=>i.status,()=>{if(i.isError&&!i.isFetching&&Do(o.options.useErrorBoundary,[i.error,o.getCurrentQuery()]))throw i.error}));const f={get(p,g){return g==="data"?c():Reflect.get(p,g)}};return new Proxy(i,f)}function Vt(e,t,n){const[r,s]=kn(As(e,t,n));return Gt(()=>{const o=As(e,t,n);s(o)}),Ja(r,Va)}function Sn(e,t,n){const[r,s]=kn(Es(e,t,n)),o=et({context:r.context}),i=new Xa(o,r),a=(l,h)=>{i.mutate(l,h).catch(ec)},[c,d]=kn({...i.getCurrentResult(),mutate:a,mutateAsync:i.getCurrentResult().mutate});Gt(()=>{const l=Es(e,t,n);s(l),i.setOptions(l)}),Gt(No(()=>c.status,()=>{if(c.isError&&Do(i.options.useErrorBoundary,[c.error]))throw c.error}));const u=i.subscribe(l=>{d({...l,mutate:a,mutateAsync:l.mutate})});return wt(u),c}function ec(){}var an=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function tc(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){if(this instanceof r){var s=[null];s.push.apply(s,arguments);var o=Function.bind.apply(t,s);return new o}return t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var s=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,s.get?s:{enumerable:!0,get:function(){return e[r]}})}),n}var nc=typeof an=="object"&&an&&an.Object===Object&&an,Fo=nc,rc=Fo,sc=typeof self=="object"&&self&&self.Object===Object&&self,oc=rc||sc||Function("return this")(),_e=oc,ic=_e,ac=ic.Symbol,Nn=ac,Ts=Nn,jo=Object.prototype,cc=jo.hasOwnProperty,lc=jo.toString,Pt=Ts?Ts.toStringTag:void 0;function uc(e){var t=cc.call(e,Pt),n=e[Pt];try{e[Pt]=void 0;var r=!0}catch{}var s=lc.call(e);return r&&(t?e[Pt]=n:delete e[Pt]),s}var dc=uc,hc=Object.prototype,fc=hc.toString;function pc(e){return fc.call(e)}var gc=pc,Cs=Nn,bc=dc,yc=gc,mc="[object Null]",vc="[object Undefined]",Is=Cs?Cs.toStringTag:void 0;function wc(e){return e==null?e===void 0?vc:mc:Is&&Is in Object(e)?bc(e):yc(e)}var Zt=wc;function xc(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}var $t=xc,$c=Zt,_c=$t,Ec="[object AsyncFunction]",kc="[object Function]",Sc="[object GeneratorFunction]",Ac="[object Proxy]";function Tc(e){if(!_c(e))return!1;var t=$c(e);return t==kc||t==Sc||t==Ec||t==Ac}var zo=Tc,Cc=_e,Ic=Cc["__core-js_shared__"],Hc=Ic,rr=Hc,Hs=function(){var e=/[^.]+$/.exec(rr&&rr.keys&&rr.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function Lc(e){return!!Hs&&Hs in e}var Bc=Lc,Rc=Function.prototype,Oc=Rc.toString;function Uc(e){if(e!=null){try{return Oc.call(e)}catch{}try{return e+""}catch{}}return""}var Ko=Uc,Pc=zo,Mc=Bc,Nc=$t,Dc=Ko,Fc=/[\\^$.*+?()[\]{}|]/g,jc=/^\[object .+?Constructor\]$/,zc=Function.prototype,Kc=Object.prototype,Gc=zc.toString,Wc=Kc.hasOwnProperty,qc=RegExp("^"+Gc.call(Wc).replace(Fc,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function Qc(e){if(!Nc(e)||Mc(e))return!1;var t=Pc(e)?qc:jc;return t.test(Dc(e))}var Vc=Qc;function Zc(e,t){return e?.[t]}var Xc=Zc,Yc=Vc,Jc=Xc;function el(e,t){var n=Jc(e,t);return Yc(n)?n:void 0}var _t=el,tl=_t,nl=tl(Object,"create"),Dn=nl,Ls=Dn;function rl(){this.__data__=Ls?Ls(null):{},this.size=0}var sl=rl;function ol(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var il=ol,al=Dn,cl="__lodash_hash_undefined__",ll=Object.prototype,ul=ll.hasOwnProperty;function dl(e){var t=this.__data__;if(al){var n=t[e];return n===cl?void 0:n}return ul.call(t,e)?t[e]:void 0}var hl=dl,fl=Dn,pl=Object.prototype,gl=pl.hasOwnProperty;function bl(e){var t=this.__data__;return fl?t[e]!==void 0:gl.call(t,e)}var yl=bl,ml=Dn,vl="__lodash_hash_undefined__";function wl(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ml&&t===void 0?vl:t,this}var xl=wl,$l=sl,_l=il,El=hl,kl=yl,Sl=xl;function Et(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Et.prototype.clear=$l;Et.prototype.delete=_l;Et.prototype.get=El;Et.prototype.has=kl;Et.prototype.set=Sl;var Al=Et;function Tl(){this.__data__=[],this.size=0}var Cl=Tl;function Il(e,t){return e===t||e!==e&&t!==t}var Go=Il,Hl=Go;function Ll(e,t){for(var n=e.length;n--;)if(Hl(e[n][0],t))return n;return-1}var Fn=Ll,Bl=Fn,Rl=Array.prototype,Ol=Rl.splice;function Ul(e){var t=this.__data__,n=Bl(t,e);if(n<0)return!1;var r=t.length-1;return n==r?t.pop():Ol.call(t,n,1),--this.size,!0}var Pl=Ul,Ml=Fn;function Nl(e){var t=this.__data__,n=Ml(t,e);return n<0?void 0:t[n][1]}var Dl=Nl,Fl=Fn;function jl(e){return Fl(this.__data__,e)>-1}var zl=jl,Kl=Fn;function Gl(e,t){var n=this.__data__,r=Kl(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}var Wl=Gl,ql=Cl,Ql=Pl,Vl=Dl,Zl=zl,Xl=Wl;function kt(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}kt.prototype.clear=ql;kt.prototype.delete=Ql;kt.prototype.get=Vl;kt.prototype.has=Zl;kt.prototype.set=Xl;var jn=kt,Yl=_t,Jl=_e,eu=Yl(Jl,"Map"),Ur=eu,Bs=Al,tu=jn,nu=Ur;function ru(){this.size=0,this.__data__={hash:new Bs,map:new(nu||tu),string:new Bs}}var su=ru;function ou(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}var iu=ou,au=iu;function cu(e,t){var n=e.__data__;return au(t)?n[typeof t=="string"?"string":"hash"]:n.map}var zn=cu,lu=zn;function uu(e){var t=lu(this,e).delete(e);return this.size-=t?1:0,t}var du=uu,hu=zn;function fu(e){return hu(this,e).get(e)}var pu=fu,gu=zn;function bu(e){return gu(this,e).has(e)}var yu=bu,mu=zn;function vu(e,t){var n=mu(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}var wu=vu,xu=su,$u=du,_u=pu,Eu=yu,ku=wu;function St(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}St.prototype.clear=xu;St.prototype.delete=$u;St.prototype.get=_u;St.prototype.has=Eu;St.prototype.set=ku;var Pr=St,Su="__lodash_hash_undefined__";function Au(e){return this.__data__.set(e,Su),this}var Tu=Au;function Cu(e){return this.__data__.has(e)}var Iu=Cu,Hu=Pr,Lu=Tu,Bu=Iu;function An(e){var t=-1,n=e==null?0:e.length;for(this.__data__=new Hu;++t<n;)this.add(e[t])}An.prototype.add=An.prototype.push=Lu;An.prototype.has=Bu;var Wo=An;function Ru(e,t,n,r){for(var s=e.length,o=n+(r?1:-1);r?o--:++o<s;)if(t(e[o],o,e))return o;return-1}var Ou=Ru;function Uu(e){return e!==e}var Pu=Uu;function Mu(e,t,n){for(var r=n-1,s=e.length;++r<s;)if(e[r]===t)return r;return-1}var Nu=Mu,Du=Ou,Fu=Pu,ju=Nu;function zu(e,t,n){return t===t?ju(e,t,n):Du(e,Fu,n)}var Ku=zu,Gu=Ku;function Wu(e,t){var n=e==null?0:e.length;return!!n&&Gu(e,t,0)>-1}var qu=Wu;function Qu(e,t,n){for(var r=-1,s=e==null?0:e.length;++r<s;)if(n(t,e[r]))return!0;return!1}var Vu=Qu;function Zu(e,t){return e.has(t)}var qo=Zu,Xu=_t,Yu=_e,Ju=Xu(Yu,"Set"),Qo=Ju;function ed(){}var td=ed;function nd(e){var t=-1,n=Array(e.size);return e.forEach(function(r){n[++t]=r}),n}var Mr=nd,sr=Qo,rd=td,sd=Mr,od=1/0,id=sr&&1/sd(new sr([,-0]))[1]==od?function(e){return new sr(e)}:rd,ad=id,cd=Wo,ld=qu,ud=Vu,dd=qo,hd=ad,fd=Mr,pd=200;function gd(e,t,n){var r=-1,s=ld,o=e.length,i=!0,a=[],c=a;if(n)i=!1,s=ud;else if(o>=pd){var d=t?null:hd(e);if(d)return fd(d);i=!1,s=dd,c=new cd}else c=t?[]:a;e:for(;++r<o;){var u=e[r],l=t?t(u):u;if(u=n||u!==0?u:0,i&&l===l){for(var h=c.length;h--;)if(c[h]===l)continue e;t&&c.push(l),a.push(u)}else s(c,l,n)||(c!==a&&c.push(l),a.push(u))}return a}var Vo=gd,bd=Vo;function yd(e){return e&&e.length?bd(e):[]}var Nr=yd;const[Dr,md]=X({}),Zo=e=>{Dr()[e]==null&&md(t=>({...t,[e]:new MessageChannel}))},vd=e=>{const t=()=>Dr()[e().id],n=(s,o)=>{const i={requestId:s,request:o};t().port1.postMessage(i)},r=(s,o=1e3)=>new Promise((i,a)=>{let c;const d=u=>{const l=u.data;l.requestId===s&&(t().port1.removeEventListener("message",d),l.ok?i(l.response):a(l.error),c!=null&&clearTimeout(c))};c=setTimeout(()=>{t().port1.removeEventListener("message",d),a(new Error(`TimeoutError: ${s}`))},o),t().port1.addEventListener("message",d,!1),t().port1.start()});return tt(()=>{const{id:s}=e();Zo(s)}),async s=>{const o=Math.random().toString(),i=r(o);return n(o,s),i}},wd=e=>{const t=Z(e),n=()=>Dr()[t().id];tt(()=>{const{id:r}=t();Zo(r);const s=n().port2,o=i=>{const{requestId:a,request:c}=i.data,d=t().handler(c);(d instanceof Promise?d:Promise.resolve(d)).then(l=>{const h={requestId:a,ok:!0,response:l};s.postMessage(h)}).catch(l=>{const h={requestId:a,ok:!1,error:l};s.postMessage(h)})};s.addEventListener("message",o),s.start(),wt(()=>{s.removeEventListener("message",o)})})},xd=()=>vd(()=>({id:"CommandChannel"})),$r=e=>{wd(()=>({id:"CommandChannel",handler:t=>{const{commandType:n,handler:r}=e();t.command===n&&r(t)}}))},$d=S('<div class="flex w-[80vw] shrink-0 snap-center snap-always flex-col border-r sm:snap-align-none"><div class="flex h-8 shrink-0 items-center border-b bg-white px-2"><span class="column-name"></span></div><ul class="flex flex-col overflow-y-scroll scroll-smooth"></ul></div>'),Mt=e=>{let t;const n=()=>e.width??"medium";return $r(()=>({commandType:"moveToColumn",handler:r=>{r.command==="moveToColumn"&&r.columnIndex===e.columnIndex&&t?.scrollIntoView({behavior:"smooth",inline:"center"})}})),$r(()=>({commandType:"moveToLastColumn",handler:()=>{e.lastColumn&&t?.scrollIntoView({behavior:"smooth"})}})),(()=>{const r=$d.cloneNode(!0),s=r.firstChild,o=s.firstChild,i=s.nextSibling,a=t;return typeof a=="function"?_n(a,r):t=r,_(o,()=>e.name),_(i,()=>e.children),ee(c=>Fa(r,{"sm:w-[500px]":n()==="widest","sm:w-[350px]":n()==="wide","sm:w-[310px]":n()==="medium","sm:w-[270px]":n()==="narrow"},c)),r})()},_d=S('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M21.731 2.269a2.625 2.625 0 0 0-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 0 0 0-3.712zm-2.218 5.93-3.712-3.712-8.4 8.4a5.25 5.25 0 0 0-1.32 2.214l-.8 2.685a.75.75 0 0 0 .933.933l2.685-.8a5.25 5.25 0 0 0 2.214-1.32l8.4-8.4z"></path><path d="M5.25 5.25a3 3 0 0 0-3 3v10.5a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3V13.5a.75.75 0 0 0-1.5 0v5.25a1.5 1.5 0 0 1-1.5 1.5H5.25a1.5 1.5 0 0 1-1.5-1.5V8.25a1.5 1.5 0 0 1 1.5-1.5h5.25a.75.75 0 0 0 0-1.5H5.25z"></path></svg>'),Ed=(e={})=>(()=>{const t=_d.cloneNode(!0);return de(t,e,!0,!0),t})(),kd=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 0 1 0 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 0 1 0-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"></path></svg>'),Sd=(e={})=>(()=>{const t=kd.cloneNode(!0);return de(t,e,!0,!0),t})(),Ad=S('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M3.478 2.405a.75.75 0 0 0-.926.94l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.405z"></path></svg>'),Td=(e={})=>(()=>{const t=Ad.cloneNode(!0);return de(t,e,!0,!0),t})(),Cd=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0z"></path></svg>'),Id=(e={})=>(()=>{const t=Cd.cloneNode(!0);return de(t,e,!0,!0),t})(),Hd=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path></svg>'),Kn=(e={})=>(()=>{const t=Hd.cloneNode(!0);return de(t,e,!0,!0),t})(),Ld={},Bd=Object.freeze(Object.defineProperty({__proto__:null,default:Ld},Symbol.toStringTag,{value:"Module"}));/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */const N=BigInt(0),q=BigInt(1),je=BigInt(2),zt=BigInt(3),Rs=BigInt(8),K=Object.freeze({a:N,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:q,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),Os=(e,t)=>(e+t/je)/t,cn={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=K,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-q*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),o=n,i=BigInt("0x100000000000000000000000000000000"),a=Os(o*e,t),c=Os(-r*e,t);let d=k(e-a*n-c*s,t),u=k(-a*r-c*o,t);const l=d>i,h=u>i;if(l&&(d=t-d),h&&(u=t-u),d>i||u>i)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:l,k1:d,k2neg:h,k2:u}}},fe=32,ht=32,Rd=32,Tn=fe+1,Cn=2*fe+1;function Us(e){const{a:t,b:n}=K,r=k(e*e),s=k(r*e);return k(s+t*e+n)}const ln=K.a===N;class Fr extends Error{constructor(t){super(t)}}function Ps(e){if(!(e instanceof j))throw new TypeError("JacobianPoint expected")}class j{constructor(t,n,r){this.x=t,this.y=n,this.z=r}static fromAffine(t){if(!(t instanceof D))throw new TypeError("JacobianPoint#fromAffine: expected Point");return t.equals(D.ZERO)?j.ZERO:new j(t.x,t.y,q)}static toAffineBatch(t){const n=Nd(t.map(r=>r.z));return t.map((r,s)=>r.toAffine(n[s]))}static normalizeZ(t){return j.toAffineBatch(t).map(j.fromAffine)}equals(t){Ps(t);const{x:n,y:r,z:s}=this,{x:o,y:i,z:a}=t,c=k(s*s),d=k(a*a),u=k(n*d),l=k(o*c),h=k(k(r*a)*d),f=k(k(i*s)*c);return u===l&&h===f}negate(){return new j(this.x,k(-this.y),this.z)}double(){const{x:t,y:n,z:r}=this,s=k(t*t),o=k(n*n),i=k(o*o),a=t+o,c=k(je*(k(a*a)-s-i)),d=k(zt*s),u=k(d*d),l=k(u-je*c),h=k(d*(c-l)-Rs*i),f=k(je*n*r);return new j(l,h,f)}add(t){Ps(t);const{x:n,y:r,z:s}=this,{x:o,y:i,z:a}=t;if(o===N||i===N)return this;if(n===N||r===N)return t;const c=k(s*s),d=k(a*a),u=k(n*d),l=k(o*c),h=k(k(r*a)*d),f=k(k(i*s)*c),p=k(l-u),g=k(f-h);if(p===N)return g===N?this.double():j.ZERO;const m=k(p*p),$=k(p*m),x=k(u*m),y=k(g*g-$-je*x),b=k(g*(x-y)-h*$),w=k(s*a*p);return new j(y,b,w)}subtract(t){return this.add(t.negate())}multiplyUnsafe(t){const n=j.ZERO;if(typeof t=="bigint"&&t===N)return n;let r=Ds(t);if(r===q)return this;if(!ln){let l=n,h=this;for(;r>N;)r&q&&(l=l.add(h)),h=h.double(),r>>=q;return l}let{k1neg:s,k1:o,k2neg:i,k2:a}=cn.splitScalar(r),c=n,d=n,u=this;for(;o>N||a>N;)o&q&&(c=c.add(u)),a&q&&(d=d.add(u)),u=u.double(),o>>=q,a>>=q;return s&&(c=c.negate()),i&&(d=d.negate()),d=new j(k(d.x*cn.beta),d.y,d.z),c.add(d)}precomputeWindow(t){const n=ln?128/t+1:256/t+1,r=[];let s=this,o=s;for(let i=0;i<n;i++){o=s,r.push(o);for(let a=1;a<2**(t-1);a++)o=o.add(s),r.push(o);s=o.double()}return r}wNAF(t,n){!n&&this.equals(j.BASE)&&(n=D.BASE);const r=n&&n._WINDOW_SIZE||1;if(256%r)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let s=n&&_r.get(n);s||(s=this.precomputeWindow(r),n&&r!==1&&(s=j.normalizeZ(s),_r.set(n,s)));let o=j.ZERO,i=j.BASE;const a=1+(ln?128/r:256/r),c=2**(r-1),d=BigInt(2**r-1),u=2**r,l=BigInt(r);for(let h=0;h<a;h++){const f=h*c;let p=Number(t&d);t>>=l,p>c&&(p-=u,t+=q);const g=f,m=f+Math.abs(p)-1,$=h%2!==0,x=p<0;p===0?i=i.add(un($,s[g])):o=o.add(un(x,s[m]))}return{p:o,f:i}}multiply(t,n){let r=Ds(t),s,o;if(ln){const{k1neg:i,k1:a,k2neg:c,k2:d}=cn.splitScalar(r);let{p:u,f:l}=this.wNAF(a,n),{p:h,f}=this.wNAF(d,n);u=un(i,u),h=un(c,h),h=new j(k(h.x*cn.beta),h.y,h.z),s=u.add(h),o=l.add(f)}else{const{p:i,f:a}=this.wNAF(r,n);s=i,o=a}return j.normalizeZ([s,o])[0]}toAffine(t){const{x:n,y:r,z:s}=this,o=this.equals(j.ZERO);t==null&&(t=o?Rs:At(s));const i=t,a=k(i*i),c=k(a*i),d=k(n*a),u=k(r*c),l=k(s*i);if(o)return D.ZERO;if(l!==q)throw new Error("invZ was invalid");return new D(d,u)}}j.BASE=new j(K.Gx,K.Gy,q);j.ZERO=new j(N,q,N);function un(e,t){const n=t.negate();return e?n:t}const _r=new WeakMap;class D{constructor(t,n){this.x=t,this.y=n}_setWindowSize(t){this._WINDOW_SIZE=t,_r.delete(this)}hasEvenY(){return this.y%je===N}static fromCompressedHex(t){const n=t.length===32,r=oe(n?t:t.subarray(1));if(!wn(r))throw new Error("Point is not on curve");const s=Us(r);let o=Md(s);const i=(o&q)===q;n?i&&(o=k(-o)):(t[0]&1)===1!==i&&(o=k(-o));const a=new D(r,o);return a.assertValidity(),a}static fromUncompressedHex(t){const n=oe(t.subarray(1,fe+1)),r=oe(t.subarray(fe+1,fe*2+1)),s=new D(n,r);return s.assertValidity(),s}static fromHex(t){const n=xe(t),r=n.length,s=n[0];if(r===fe)return this.fromCompressedHex(n);if(r===Tn&&(s===2||s===3))return this.fromCompressedHex(n);if(r===Cn&&s===4)return this.fromUncompressedHex(n);throw new Error(`Point.fromHex: received invalid point. Expected 32-${Tn} compressed bytes or ${Cn} uncompressed bytes, not ${r}`)}static fromPrivateKey(t){return D.BASE.multiply(Ye(t))}static fromSignature(t,n,r){const{r:s,s:o}=Xo(n);if(![0,1,2,3].includes(r))throw new Error("Cannot recover: invalid recovery bit");const i=jr(xe(t)),{n:a}=K,c=r===2||r===3?s+a:s,d=At(c,a),u=k(-i*d,a),l=k(o*d,a),h=r&1?"03":"02",f=D.fromHex(h+ze(c)),p=D.BASE.multiplyAndAddUnsafe(f,u,l);if(!p)throw new Error("Cannot recover signature: point at infinify");return p.assertValidity(),p}toRawBytes(t=!1){return Ke(this.toHex(t))}toHex(t=!1){const n=ze(this.x);return t?`${this.hasEvenY()?"02":"03"}${n}`:`04${n}${ze(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const t="Point is not on elliptic curve",{x:n,y:r}=this;if(!wn(n)||!wn(r))throw new Error(t);const s=k(r*r),o=Us(n);if(k(s-o)!==N)throw new Error(t)}equals(t){return this.x===t.x&&this.y===t.y}negate(){return new D(this.x,k(-this.y))}double(){return j.fromAffine(this).double().toAffine()}add(t){return j.fromAffine(this).add(j.fromAffine(t)).toAffine()}subtract(t){return this.add(t.negate())}multiply(t){return j.fromAffine(this).multiply(t,this).toAffine()}multiplyAndAddUnsafe(t,n,r){const s=j.fromAffine(this),o=n===N||n===q||this!==D.BASE?s.multiplyUnsafe(n):s.multiply(n),i=j.fromAffine(t).multiplyUnsafe(r),a=o.add(i);return a.equals(j.ZERO)?void 0:a.toAffine()}}D.BASE=new D(K.Gx,K.Gy);D.ZERO=new D(N,N);function Ms(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function Ns(e){if(e.length<2||e[0]!==2)throw new Error(`Invalid signature integer tag: ${ft(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(n[0]===0&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:oe(n),left:e.subarray(t+2)}}function Od(e){if(e.length<2||e[0]!=48)throw new Error(`Invalid signature tag: ${ft(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=Ns(e.subarray(2)),{data:r,left:s}=Ns(n);if(s.length)throw new Error(`Invalid signature: left bytes after parsing: ${ft(s)}`);return{r:t,s:r}}class Te{constructor(t,n){this.r=t,this.s=n,this.assertValidity()}static fromCompact(t){const n=t instanceof Uint8Array,r="Signature.fromCompact";if(typeof t!="string"&&!n)throw new TypeError(`${r}: Expected string or Uint8Array`);const s=n?ft(t):t;if(s.length!==128)throw new Error(`${r}: Expected 64-byte hex`);return new Te(In(s.slice(0,64)),In(s.slice(64,128)))}static fromDER(t){const n=t instanceof Uint8Array;if(typeof t!="string"&&!n)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r,s}=Od(n?t:Ke(t));return new Te(r,s)}static fromHex(t){return this.fromDER(t)}assertValidity(){const{r:t,s:n}=this;if(!gt(t))throw new Error("Invalid Signature: r must be 0 < r < n");if(!gt(n))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const t=K.n>>q;return this.s>t}normalizeS(){return this.hasHighS()?new Te(this.r,k(-this.s,K.n)):this}toDERRawBytes(){return Ke(this.toDERHex())}toDERHex(){const t=Ms(Nt(this.s)),n=Ms(Nt(this.r)),r=t.length/2,s=n.length/2,o=Nt(r),i=Nt(s);return`30${Nt(s+r+4)}02${i}${n}02${o}${t}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return Ke(this.toCompactHex())}toCompactHex(){return ze(this.r)+ze(this.s)}}function Fe(...e){if(!e.every(r=>r instanceof Uint8Array))throw new Error("Uint8Array list expected");if(e.length===1)return e[0];const t=e.reduce((r,s)=>r+s.length,0),n=new Uint8Array(t);for(let r=0,s=0;r<e.length;r++){const o=e[r];n.set(o,s),s+=o.length}return n}const Ud=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));function ft(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=Ud[e[n]];return t}const Pd=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function ze(e){if(typeof e!="bigint")throw new Error("Expected bigint");if(!(N<=e&&e<Pd))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function pt(e){const t=Ke(ze(e));if(t.length!==32)throw new Error("Error: expected 32 bytes");return t}function Nt(e){const t=e.toString(16);return t.length&1?`0${t}`:t}function In(e){if(typeof e!="string")throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function Ke(e){if(typeof e!="string")throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=n*2,s=e.slice(r,r+2),o=Number.parseInt(s,16);if(Number.isNaN(o)||o<0)throw new Error("Invalid byte sequence");t[n]=o}return t}function oe(e){return In(ft(e))}function xe(e){return e instanceof Uint8Array?Uint8Array.from(e):Ke(e)}function Ds(e){if(typeof e=="number"&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if(typeof e=="bigint"&&gt(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function k(e,t=K.P){const n=e%t;return n>=N?n:t+n}function ae(e,t){const{P:n}=K;let r=e;for(;t-- >N;)r*=r,r%=n;return r}function Md(e){const{P:t}=K,n=BigInt(6),r=BigInt(11),s=BigInt(22),o=BigInt(23),i=BigInt(44),a=BigInt(88),c=e*e*e%t,d=c*c*e%t,u=ae(d,zt)*d%t,l=ae(u,zt)*d%t,h=ae(l,je)*c%t,f=ae(h,r)*h%t,p=ae(f,s)*f%t,g=ae(p,i)*p%t,m=ae(g,a)*g%t,$=ae(m,i)*p%t,x=ae($,zt)*d%t,y=ae(x,o)*f%t,b=ae(y,n)*c%t,w=ae(b,je);if(w*w%t!==e)throw new Error("Cannot find square root");return w}function At(e,t=K.P){if(e===N||t<=N)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=k(e,t),r=t,s=N,o=q;for(;n!==N;){const a=r/n,c=r%n,d=s-o*a;r=n,n=c,s=o,o=d}if(r!==q)throw new Error("invert: does not exist");return k(s,t)}function Nd(e,t=K.P){const n=new Array(e.length),r=e.reduce((o,i,a)=>i===N?o:(n[a]=o,k(o*i,t)),q),s=At(r,t);return e.reduceRight((o,i,a)=>i===N?o:(n[a]=k(o*n[a],t),k(o*i,t)),s),n}function Dd(e){const t=e.length*8-ht*8,n=oe(e);return t>0?n>>BigInt(t):n}function jr(e,t=!1){const n=Dd(e);if(t)return n;const{n:r}=K;return n>=r?n-r:n}let lt,Kt;class Fd{constructor(t,n){if(this.hashLen=t,this.qByteLen=n,typeof t!="number"||t<2)throw new Error("hashLen must be a number");if(typeof n!="number"||n<2)throw new Error("qByteLen must be a number");this.v=new Uint8Array(t).fill(1),this.k=new Uint8Array(t).fill(0),this.counter=0}hmac(...t){return M.hmacSha256(this.k,...t)}hmacSync(...t){return Kt(this.k,...t)}checkSync(){if(typeof Kt!="function")throw new Fr("hmacSha256Sync needs to be set")}incr(){if(this.counter>=1e3)throw new Error("Tried 1,000 k values for sign(), all were invalid");this.counter+=1}async reseed(t=new Uint8Array){this.k=await this.hmac(this.v,Uint8Array.from([0]),t),this.v=await this.hmac(this.v),t.length!==0&&(this.k=await this.hmac(this.v,Uint8Array.from([1]),t),this.v=await this.hmac(this.v))}reseedSync(t=new Uint8Array){this.checkSync(),this.k=this.hmacSync(this.v,Uint8Array.from([0]),t),this.v=this.hmacSync(this.v),t.length!==0&&(this.k=this.hmacSync(this.v,Uint8Array.from([1]),t),this.v=this.hmacSync(this.v))}async generate(){this.incr();let t=0;const n=[];for(;t<this.qByteLen;){this.v=await this.hmac(this.v);const r=this.v.slice();n.push(r),t+=this.v.length}return Fe(...n)}generateSync(){this.checkSync(),this.incr();let t=0;const n=[];for(;t<this.qByteLen;){this.v=this.hmacSync(this.v);const r=this.v.slice();n.push(r),t+=this.v.length}return Fe(...n)}}function gt(e){return N<e&&e<K.n}function wn(e){return N<e&&e<K.P}function jd(e,t,n,r=!0){const{n:s}=K,o=jr(e,!0);if(!gt(o))return;const i=At(o,s),a=D.BASE.multiply(o),c=k(a.x,s);if(c===N)return;const d=k(i*k(t+n*c,s),s);if(d===N)return;let u=new Te(c,d),l=(a.x===u.r?0:2)|Number(a.y&q);return r&&u.hasHighS()&&(u=u.normalizeS(),l^=1),{sig:u,recovery:l}}function Ye(e){let t;if(typeof e=="bigint")t=e;else if(typeof e=="number"&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if(typeof e=="string"){if(e.length!==2*ht)throw new Error("Expected 32 bytes of private key");t=In(e)}else if(e instanceof Uint8Array){if(e.length!==ht)throw new Error("Expected 32 bytes of private key");t=oe(e)}else throw new TypeError("Expected valid private key");if(!gt(t))throw new Error("Expected private key: 0 < key < n");return t}function zr(e){return e instanceof D?(e.assertValidity(),e):D.fromHex(e)}function Xo(e){if(e instanceof Te)return e.assertValidity(),e;try{return Te.fromDER(e)}catch{return Te.fromCompact(e)}}function zd(e,t=!1){return D.fromPrivateKey(e).toRawBytes(t)}function Fs(e){const t=e instanceof Uint8Array,n=typeof e=="string",r=(t||n)&&e.length;return t?r===Tn||r===Cn:n?r===Tn*2||r===Cn*2:e instanceof D}function Yo(e,t,n=!1){if(Fs(e))throw new TypeError("getSharedSecret: first arg must be private key");if(!Fs(t))throw new TypeError("getSharedSecret: second arg must be public key");const r=zr(t);return r.assertValidity(),r.multiply(Ye(e)).toRawBytes(n)}function Jo(e){const t=e.length>fe?e.slice(0,fe):e;return oe(t)}function Kd(e){const t=Jo(e),n=k(t,K.n);return ei(n<N?t:n)}function ei(e){return pt(e)}function Gd(e,t,n){if(e==null)throw new Error(`sign: expected valid message hash, not "${e}"`);const r=xe(e),s=Ye(t),o=[ei(s),Kd(r)];if(n!=null){n===!0&&(n=M.randomBytes(fe));const c=xe(n);if(c.length!==fe)throw new Error(`sign: Expected ${fe} bytes of extra data`);o.push(c)}const i=Fe(...o),a=Jo(r);return{seed:i,m:a,d:s}}function Wd(e,t){const{sig:n,recovery:r}=e,{der:s,recovered:o}=Object.assign({canonical:!0,der:!0},t),i=s?n.toDERRawBytes():n.toCompactRawBytes();return o?[i,r]:i}function qd(e,t,n={}){const{seed:r,m:s,d:o}=Gd(e,t,n.extraEntropy),i=new Fd(Rd,ht);i.reseedSync(r);let a;for(;!(a=jd(i.generateSync(),s,o,n.canonical));)i.reseedSync();return Wd(a,n)}const Qd={strict:!0};function Vd(e,t,n,r=Qd){let s;try{s=Xo(e),t=xe(t)}catch{return!1}const{r:o,s:i}=s;if(r.strict&&s.hasHighS())return!1;const a=jr(t);let c;try{c=zr(n)}catch{return!1}const{n:d}=K,u=At(i,d),l=k(a*u,d),h=k(o*u,d),f=D.BASE.multiplyAndAddUnsafe(c,l,h);return f?k(f.x,d)===o:!1}function Hn(e){return k(oe(e),K.n)}class bt{constructor(t,n){this.r=t,this.s=n,this.assertValidity()}static fromHex(t){const n=xe(t);if(n.length!==64)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${n.length}`);const r=oe(n.subarray(0,32)),s=oe(n.subarray(32,64));return new bt(r,s)}assertValidity(){const{r:t,s:n}=this;if(!wn(t)||!gt(n))throw new Error("Invalid signature")}toHex(){return ze(this.r)+ze(this.s)}toRawBytes(){return Ke(this.toHex())}}function Zd(e){return D.fromPrivateKey(e).toRawX()}class ti{constructor(t,n,r=M.randomBytes()){if(t==null)throw new TypeError(`sign: Expected valid message, not "${t}"`);this.m=xe(t);const{x:s,scalar:o}=this.getScalar(Ye(n));if(this.px=s,this.d=o,this.rand=xe(r),this.rand.length!==32)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(t){const n=D.fromPrivateKey(t),r=n.hasEvenY()?t:K.n-t;return{point:n,scalar:r,x:n.toRawX()}}initNonce(t,n){return pt(t^oe(n))}finalizeNonce(t){const n=k(oe(t),K.n);if(n===N)throw new Error("sign: Creation of signature failed. k is zero");const{point:r,x:s,scalar:o}=this.getScalar(n);return{R:r,rx:s,k:o}}finalizeSig(t,n,r,s){return new bt(t.x,k(n+r*s,K.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:t,d:n,px:r,rand:s}=this,o=M.taggedHash,i=this.initNonce(n,await o(De.aux,s)),{R:a,rx:c,k:d}=this.finalizeNonce(await o(De.nonce,i,r,t)),u=Hn(await o(De.challenge,c,r,t)),l=this.finalizeSig(a,d,u,n);return await si(l,t,r)||this.error(),l}calcSync(){const{m:t,d:n,px:r,rand:s}=this,o=M.taggedHashSync,i=this.initNonce(n,o(De.aux,s)),{R:a,rx:c,k:d}=this.finalizeNonce(o(De.nonce,i,r,t)),u=Hn(o(De.challenge,c,r,t)),l=this.finalizeSig(a,d,u,n);return oi(l,t,r)||this.error(),l}}async function Xd(e,t,n){return new ti(e,t,n).calc()}function Yd(e,t,n){return new ti(e,t,n).calcSync()}function ni(e,t,n){const r=e instanceof bt,s=r?e:bt.fromHex(e);return r&&s.assertValidity(),{...s,m:xe(t),P:zr(n)}}function ri(e,t,n,r){const s=D.BASE.multiplyAndAddUnsafe(t,Ye(n),k(-r,K.n));return!(!s||!s.hasEvenY()||s.x!==e)}async function si(e,t,n){try{const{r,s,m:o,P:i}=ni(e,t,n),a=Hn(await M.taggedHash(De.challenge,pt(r),i.toRawX(),o));return ri(r,i,s,a)}catch{return!1}}function oi(e,t,n){try{const{r,s,m:o,P:i}=ni(e,t,n),a=Hn(M.taggedHashSync(De.challenge,pt(r),i.toRawX(),o));return ri(r,i,s,a)}catch(r){if(r instanceof Fr)throw r;return!1}}const Gn={Signature:bt,getPublicKey:Zd,sign:Xd,verify:si,signSync:Yd,verifySync:oi};D.BASE._setWindowSize(8);const re={node:Bd,web:typeof self=="object"&&"crypto"in self?self.crypto:void 0},De={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},dn={},M={bytesToHex:ft,hexToBytes:Ke,concatBytes:Fe,mod:k,invert:At,isValidPrivateKey(e){try{return Ye(e),!0}catch{return!1}},_bigintTo32Bytes:pt,_normalizePrivateKey:Ye,hashToPrivateKey:e=>{e=xe(e);const t=ht+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");const n=k(oe(e),K.n-q)+q;return pt(n)},randomBytes:(e=32)=>{if(re.web)return re.web.getRandomValues(new Uint8Array(e));if(re.node){const{randomBytes:t}=re.node;return Uint8Array.from(t(e))}else throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>M.hashToPrivateKey(M.randomBytes(ht+8)),precompute(e=8,t=D.BASE){const n=t===D.BASE?t:new D(t.x,t.y);return n._setWindowSize(e),n.multiply(zt),n},sha256:async(...e)=>{if(re.web){const t=await re.web.subtle.digest("SHA-256",Fe(...e));return new Uint8Array(t)}else if(re.node){const{createHash:t}=re.node,n=t("sha256");return e.forEach(r=>n.update(r)),Uint8Array.from(n.digest())}else throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(re.web){const n=await re.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=Fe(...t),s=await re.web.subtle.sign("HMAC",n,r);return new Uint8Array(s)}else if(re.node){const{createHmac:n}=re.node,r=n("sha256",e);return t.forEach(s=>r.update(s)),Uint8Array.from(r.digest())}else throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=dn[e];if(n===void 0){const r=await M.sha256(Uint8Array.from(e,s=>s.charCodeAt(0)));n=Fe(r,r),dn[e]=n}return M.sha256(n,...t)},taggedHashSync:(e,...t)=>{if(typeof lt!="function")throw new Fr("sha256Sync is undefined, you need to set it");let n=dn[e];if(n===void 0){const r=lt(Uint8Array.from(e,s=>s.charCodeAt(0)));n=Fe(r,r),dn[e]=n}return lt(n,...t)},_JacobianPoint:j};Object.defineProperties(M,{sha256Sync:{configurable:!1,get(){return lt},set(e){lt||(lt=e)}},hmacSha256Sync:{configurable:!1,get(){return Kt},set(e){Kt||(Kt=e)}}});const js={node:void 0,web:typeof self=="object"&&"crypto"in self?self.crypto:void 0};/*! noble-hashes - MIT License (c) 2021 Paul Miller (paulmillr.com) */const or=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),ve=(e,t)=>e<<32-t|e>>>t,Jd=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;if(!Jd)throw new Error("Non little-endian hardware is not supported");Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));(()=>{const e=typeof module<"u"&&typeof module.require=="function"&&module.require.bind(module);try{if(e){const{setImmediate:t}=e("timers");return()=>new Promise(n=>t(n))}}catch{}return()=>new Promise(t=>setTimeout(t,0))})();function eh(e){if(typeof e!="string")throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);return new TextEncoder().encode(e)}function Kr(e){if(typeof e=="string"&&(e=eh(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}function zs(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function th(e){if(typeof e!="function"||typeof e.init!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");zs(e.outputLen),zs(e.blockLen)}let Er=class{clone(){return this._cloneInto()}};function nh(e){const t=r=>e().update(Kr(r)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t.init=t.create,t}function rh(e=32){if(js.web)return js.web.getRandomValues(new Uint8Array(e));throw new Error("The environment doesn't have randomBytes function")}function sh(e,t,n,r){if(typeof e.setBigUint64=="function")return e.setBigUint64(t,n,r);const s=BigInt(32),o=BigInt(4294967295),i=Number(n>>s&o),a=Number(n&o),c=r?4:0,d=r?0:4;e.setUint32(t+c,i,r),e.setUint32(t+d,a,r)}let oh=class extends Er{constructor(t,n,r,s){super(),this.blockLen=t,this.outputLen=n,this.padOffset=r,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=or(this.buffer)}update(t){if(this.destroyed)throw new Error("instance is destroyed");const{view:n,buffer:r,blockLen:s,finished:o}=this;if(o)throw new Error("digest() was already called");t=Kr(t);const i=t.length;for(let a=0;a<i;){const c=Math.min(s-this.pos,i-a);if(c===s){const d=or(t);for(;s<=i-a;a+=s)this.process(d,a);continue}r.set(t.subarray(a,a+c),this.pos),this.pos+=c,a+=c,this.pos===s&&(this.process(n,0),this.pos=0)}return this.length+=t.length,this.roundClean(),this}digestInto(t){if(this.destroyed)throw new Error("instance is destroyed");if(!(t instanceof Uint8Array)||t.length<this.outputLen)throw new Error("_Sha2: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0;const{buffer:n,view:r,blockLen:s,isLE:o}=this;let{pos:i}=this;n[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>s-i&&(this.process(r,0),i=0);for(let c=i;c<s;c++)n[c]=0;sh(r,s-8,BigInt(this.length*8),o),this.process(r,0);const a=or(t);this.get().forEach((c,d)=>a.setUint32(4*d,c,o))}digest(){const{buffer:t,outputLen:n}=this;this.digestInto(t);const r=t.slice(0,n);return this.destroy(),r}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:n,buffer:r,length:s,finished:o,destroyed:i,pos:a}=this;return t.length=s,t.pos=a,t.finished=o,t.destroyed=i,s%n&&t.buffer.set(r),t}};const ih=(e,t,n)=>e&t^~e&n,ah=(e,t,n)=>e&t^e&n^t&n,ch=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Ie=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),He=new Uint32Array(64);let lh=class extends oh{constructor(){super(64,32,8,!1),this.A=Ie[0]|0,this.B=Ie[1]|0,this.C=Ie[2]|0,this.D=Ie[3]|0,this.E=Ie[4]|0,this.F=Ie[5]|0,this.G=Ie[6]|0,this.H=Ie[7]|0}get(){const{A:t,B:n,C:r,D:s,E:o,F:i,G:a,H:c}=this;return[t,n,r,s,o,i,a,c]}set(t,n,r,s,o,i,a,c){this.A=t|0,this.B=n|0,this.C=r|0,this.D=s|0,this.E=o|0,this.F=i|0,this.G=a|0,this.H=c|0}process(t,n){for(let l=0;l<16;l++,n+=4)He[l]=t.getUint32(n,!1);for(let l=16;l<64;l++){const h=He[l-15],f=He[l-2],p=ve(h,7)^ve(h,18)^h>>>3,g=ve(f,17)^ve(f,19)^f>>>10;He[l]=g+He[l-7]+p+He[l-16]|0}let{A:r,B:s,C:o,D:i,E:a,F:c,G:d,H:u}=this;for(let l=0;l<64;l++){const h=ve(a,6)^ve(a,11)^ve(a,25),f=u+h+ih(a,c,d)+ch[l]+He[l]|0,g=(ve(r,2)^ve(r,13)^ve(r,22))+ah(r,s,o)|0;u=d,d=c,c=a,a=i+f|0,i=o,o=s,s=r,r=f+g|0}r=r+this.A|0,s=s+this.B|0,o=o+this.C|0,i=i+this.D|0,a=a+this.E|0,c=c+this.F|0,d=d+this.G|0,u=u+this.H|0,this.set(r,s,o,i,a,c,d,u)}roundClean(){He.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}};const Xt=nh(()=>new lh);/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function Ge(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function be(...e){const t=(s,o)=>i=>s(o(i)),n=Array.from(e).reverse().reduce((s,o)=>s?t(s,o.encode):o.encode,void 0),r=e.reduce((s,o)=>s?t(s,o.decode):o.decode,void 0);return{encode:n,decode:r}}function Ee(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(n=>{if(Ge(n),n<0||n>=e.length)throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${e.length})`);return e[n]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(n=>{if(typeof n!="string")throw new Error(`alphabet.decode: not string element=${n}`);const r=e.indexOf(n);if(r===-1)throw new Error(`Unknown letter: "${n}". Allowed: ${e}`);return r})}}}function ke(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let n of t)if(typeof n!="string")throw new Error(`join.encode: non-string input=${n}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function Yt(e,t="="){if(Ge(e),typeof t!="string")throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&typeof n[0]!="string")throw new Error("padding.encode input should be array of strings");for(let r of n)if(typeof r!="string")throw new Error(`padding.encode: non-string input=${r}`);for(;n.length*e%8;)n.push(t);return n},decode(n){if(!Array.isArray(n)||n.length&&typeof n[0]!="string")throw new Error("padding.encode input should be array of strings");for(let s of n)if(typeof s!="string")throw new Error(`padding.decode: non-string input=${s}`);let r=n.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&n[r-1]===t;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,r)}}}function ii(e){if(typeof e!="function")throw new Error("normalize fn should be function");return{encode:t=>t,decode:t=>e(t)}}function Ks(e,t,n){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(n<2)throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let r=0;const s=[],o=Array.from(e);for(o.forEach(i=>{if(Ge(i),i<0||i>=t)throw new Error(`Wrong integer: ${i}`)});;){let i=0,a=!0;for(let c=r;c<o.length;c++){const d=o[c],u=t*i+d;if(!Number.isSafeInteger(u)||t*i/t!==i||u-d!==t*i)throw new Error("convertRadix: carry overflow");if(i=u%n,o[c]=Math.floor(u/n),!Number.isSafeInteger(o[c])||o[c]*n+i!==u)throw new Error("convertRadix: carry overflow");if(a)o[c]?a=!1:r=c;else continue}if(s.push(i),a)break}for(let i=0;i<e.length-1&&e[i]===0;i++)s.push(0);return s.reverse()}const ai=(e,t)=>t?ai(t,e%t):e,Ln=(e,t)=>e+(t-ai(e,t));function kr(e,t,n,r){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(n<=0||n>32)throw new Error(`convertRadix2: wrong to=${n}`);if(Ln(t,n)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${n} carryBits=${Ln(t,n)}`);let s=0,o=0;const i=2**n-1,a=[];for(const c of e){if(Ge(c),c>=2**t)throw new Error(`convertRadix2: invalid data word=${c} from=${t}`);if(s=s<<t|c,o+t>32)throw new Error(`convertRadix2: carry overflow pos=${o} from=${t}`);for(o+=t;o>=n;o-=n)a.push((s>>o-n&i)>>>0);s&=2**o-1}if(s=s<<n-o&i,!r&&o>=t)throw new Error("Excess padding");if(!r&&s)throw new Error(`Non-zero padding: ${s}`);return r&&o>0&&a.push(s>>>0),a}function ci(e){return Ge(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return Ks(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of strings");return Uint8Array.from(Ks(t,e,2**8))}}}function Ce(e,t=!1){if(Ge(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(Ln(8,e)>32||Ln(e,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return kr(Array.from(n),8,e,!t)},decode:n=>{if(!Array.isArray(n)||n.length&&typeof n[0]!="number")throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(kr(n,e,8,t))}}}function Gs(e){if(typeof e!="function")throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch{}}}function li(e,t){if(Ge(e),typeof t!="function")throw new Error("checksum fn should be function");return{encode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=t(n).slice(0,e),s=new Uint8Array(n.length+e);return s.set(n),s.set(r,n.length),s},decode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=n.slice(0,-e),s=t(r).slice(0,e),o=n.slice(-e);for(let i=0;i<e;i++)if(s[i]!==o[i])throw new Error("Invalid checksum");return r}}}const uh={alphabet:Ee,chain:be,checksum:li,radix:ci,radix2:Ce,join:ke,padding:Yt},ui=be(Ce(4),Ee("0123456789ABCDEF"),ke("")),di=be(Ce(5),Ee("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),Yt(5),ke("")),dh=be(Ce(5),Ee("0123456789ABCDEFGHIJKLMNOPQRSTUV"),Yt(5),ke("")),hh=be(Ce(5),Ee("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),ke(""),ii(e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1"))),yt=be(Ce(6),Ee("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),Yt(6),ke("")),hi=be(Ce(6),Ee("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),Yt(6),ke("")),Gr=e=>be(ci(58),Ee(e),ke("")),Wt=Gr("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),fh=Gr("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),ph=Gr("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"),Ws=[0,2,3,5,6,7,9,10,11],fi={encode(e){let t="";for(let n=0;n<e.length;n+=8){const r=e.subarray(n,n+8);t+=Wt.encode(r).padStart(Ws[r.length],"1")}return t},decode(e){let t=[];for(let n=0;n<e.length;n+=11){const r=e.slice(n,n+11),s=Ws.indexOf(r.length),o=Wt.decode(r);for(let i=0;i<o.length-s;i++)if(o[i]!==0)throw new Error("base58xmr: wrong padding");t=t.concat(Array.from(o.slice(o.length-s)))}return Uint8Array.from(t)}},pi=e=>be(li(4,t=>e(e(t))),Wt),Sr=be(Ee("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),ke("")),qs=[996825010,642813549,513874426,1027748829,705979059];function Dt(e){const t=e>>25;let n=(e&33554431)<<5;for(let r=0;r<qs.length;r++)(t>>r&1)===1&&(n^=qs[r]);return n}function Qs(e,t,n=1){const r=e.length;let s=1;for(let o=0;o<r;o++){const i=e.charCodeAt(o);if(i<33||i>126)throw new Error(`Invalid prefix (${e})`);s=Dt(s)^i>>5}s=Dt(s);for(let o=0;o<r;o++)s=Dt(s)^e.charCodeAt(o)&31;for(let o of t)s=Dt(s)^o;for(let o=0;o<6;o++)s=Dt(s);return s^=n,Sr.encode(kr([s%2**30],30,5,!1))}function gi(e){const t=e==="bech32"?1:734539939,n=Ce(5),r=n.decode,s=n.encode,o=Gs(r);function i(u,l,h=90){if(typeof u!="string")throw new Error(`bech32.encode prefix should be string, not ${typeof u}`);if(!Array.isArray(l)||l.length&&typeof l[0]!="number")throw new Error(`bech32.encode words should be array of numbers, not ${typeof l}`);const f=u.length+7+l.length;if(h!==!1&&f>h)throw new TypeError(`Length ${f} exceeds limit ${h}`);return u=u.toLowerCase(),`${u}1${Sr.encode(l)}${Qs(u,l,t)}`}function a(u,l=90){if(typeof u!="string")throw new Error(`bech32.decode input should be string, not ${typeof u}`);if(u.length<8||l!==!1&&u.length>l)throw new TypeError(`Wrong string length: ${u.length} (${u}). Expected (8..${l})`);const h=u.toLowerCase();if(u!==h&&u!==u.toUpperCase())throw new Error("String must be lowercase or uppercase");u=h;const f=u.lastIndexOf("1");if(f===0||f===-1)throw new Error('Letter "1" must be present between prefix and data only');const p=u.slice(0,f),g=u.slice(f+1);if(g.length<6)throw new Error("Data must be at least 6 characters long");const m=Sr.decode(g).slice(0,-6),$=Qs(p,m,t);if(!g.endsWith($))throw new Error(`Invalid checksum in ${u}: expected "${$}"`);return{prefix:p,words:m}}const c=Gs(a);function d(u){const{prefix:l,words:h}=a(u,!1);return{prefix:l,words:h,bytes:r(h)}}return{encode:i,decode:a,decodeToBytes:d,decodeUnsafe:c,fromWords:r,fromWordsUnsafe:o,toWords:s}}const ie=gi("bech32"),gh=gi("bech32m"),bi={encode:e=>new TextDecoder().decode(e),decode:e=>new TextEncoder().encode(e)},yi=be(Ce(4),Ee("0123456789abcdef"),ke(""),ii(e=>{if(typeof e!="string"||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})),qt={utf8:bi,hex:yi,base16:ui,base32:di,base64:yt,base64url:hi,base58:Wt,base58xmr:fi},mi=`Invalid encoding type. Available types: ${Object.keys(qt).join(", ")}`,vi=(e,t)=>{if(typeof e!="string"||!qt.hasOwnProperty(e))throw new TypeError(mi);if(!(t instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return qt[e].encode(t)},bh=vi,wi=(e,t)=>{if(!qt.hasOwnProperty(e))throw new TypeError(mi);if(typeof t!="string")throw new TypeError("stringToBytes() expects string");return qt[e].decode(t)},yh=wi,mh=Object.freeze(Object.defineProperty({__proto__:null,assertNumber:Ge,base16:ui,base32:di,base32crockford:hh,base32hex:dh,base58:Wt,base58check:pi,base58flickr:fh,base58xmr:fi,base58xrp:ph,base64:yt,base64url:hi,bech32:ie,bech32m:gh,bytes:yh,bytesToString:vi,hex:yi,str:bh,stringToBytes:wi,utf8:bi,utils:uh},Symbol.toStringTag,{value:"Module"}));var Wr={};Object.defineProperty(Wr,"__esModule",{value:!0});var qr=Wr.wordlist=void 0;qr=Wr.wordlist=`abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split(`
`);var se={},Y={};Object.defineProperty(Y,"__esModule",{value:!0});Y.output=Y.exists=Y.hash=Y.bytes=Y.bool=Y.number=void 0;function Bn(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}Y.number=Bn;function xi(e){if(typeof e!="boolean")throw new Error(`Expected boolean, not ${e}`)}Y.bool=xi;function Qr(e,...t){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}Y.bytes=Qr;function $i(e){if(typeof e!="function"||typeof e.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");Bn(e.outputLen),Bn(e.blockLen)}Y.hash=$i;function _i(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}Y.exists=_i;function Ei(e,t){Qr(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}Y.output=Ei;const vh={number:Bn,bool:xi,bytes:Qr,hash:$i,exists:_i,output:Ei};Y.default=vh;var mt={},ki={},rt={},Wn={};Object.defineProperty(Wn,"__esModule",{value:!0});Wn.crypto=void 0;Wn.crypto={node:void 0,web:typeof self=="object"&&"crypto"in self?self.crypto:void 0};(function(e){/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(e,"__esModule",{value:!0}),e.randomBytes=e.wrapConstructorWithOpts=e.wrapConstructor=e.checkOpts=e.Hash=e.concatBytes=e.toBytes=e.utf8ToBytes=e.asyncLoop=e.nextTick=e.hexToBytes=e.bytesToHex=e.isLE=e.rotr=e.createView=e.u32=e.u8=void 0;const t=Wn,n=b=>new Uint8Array(b.buffer,b.byteOffset,b.byteLength);e.u8=n;const r=b=>new Uint32Array(b.buffer,b.byteOffset,Math.floor(b.byteLength/4));e.u32=r;const s=b=>new DataView(b.buffer,b.byteOffset,b.byteLength);e.createView=s;const o=(b,w)=>b<<32-w|b>>>w;if(e.rotr=o,e.isLE=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,!e.isLE)throw new Error("Non little-endian hardware is not supported");const i=Array.from({length:256},(b,w)=>w.toString(16).padStart(2,"0"));function a(b){if(!(b instanceof Uint8Array))throw new Error("Uint8Array expected");let w="";for(let E=0;E<b.length;E++)w+=i[b[E]];return w}e.bytesToHex=a;function c(b){if(typeof b!="string")throw new TypeError("hexToBytes: expected string, got "+typeof b);if(b.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const w=new Uint8Array(b.length/2);for(let E=0;E<w.length;E++){const B=E*2,A=b.slice(B,B+2),R=Number.parseInt(A,16);if(Number.isNaN(R)||R<0)throw new Error("Invalid byte sequence");w[E]=R}return w}e.hexToBytes=c;const d=async()=>{};e.nextTick=d;async function u(b,w,E){let B=Date.now();for(let A=0;A<b;A++){E(A);const R=Date.now()-B;R>=0&&R<w||(await(0,e.nextTick)(),B+=R)}}e.asyncLoop=u;function l(b){if(typeof b!="string")throw new TypeError(`utf8ToBytes expected string, got ${typeof b}`);return new TextEncoder().encode(b)}e.utf8ToBytes=l;function h(b){if(typeof b=="string"&&(b=l(b)),!(b instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof b})`);return b}e.toBytes=h;function f(...b){if(!b.every(B=>B instanceof Uint8Array))throw new Error("Uint8Array list expected");if(b.length===1)return b[0];const w=b.reduce((B,A)=>B+A.length,0),E=new Uint8Array(w);for(let B=0,A=0;B<b.length;B++){const R=b[B];E.set(R,A),A+=R.length}return E}e.concatBytes=f;class p{clone(){return this._cloneInto()}}e.Hash=p;const g=b=>Object.prototype.toString.call(b)==="[object Object]"&&b.constructor===Object;function m(b,w){if(w!==void 0&&(typeof w!="object"||!g(w)))throw new TypeError("Options should be object or undefined");return Object.assign(b,w)}e.checkOpts=m;function $(b){const w=B=>b().update(h(B)).digest(),E=b();return w.outputLen=E.outputLen,w.blockLen=E.blockLen,w.create=()=>b(),w}e.wrapConstructor=$;function x(b){const w=(B,A)=>b(A).update(h(B)).digest(),E=b({});return w.outputLen=E.outputLen,w.blockLen=E.blockLen,w.create=B=>b(B),w}e.wrapConstructorWithOpts=x;function y(b=32){if(t.crypto.web)return t.crypto.web.getRandomValues(new Uint8Array(b));if(t.crypto.node)return new Uint8Array(t.crypto.node.randomBytes(b).buffer);throw new Error("The environment doesn't have randomBytes function")}e.randomBytes=y})(rt);(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.hmac=void 0;const t=Y,n=rt;class r extends n.Hash{constructor(i,a){super(),this.finished=!1,this.destroyed=!1,t.default.hash(i);const c=(0,n.toBytes)(a);if(this.iHash=i.create(),typeof this.iHash.update!="function")throw new TypeError("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const d=this.blockLen,u=new Uint8Array(d);u.set(c.length>d?i.create().update(c).digest():c);for(let l=0;l<u.length;l++)u[l]^=54;this.iHash.update(u),this.oHash=i.create();for(let l=0;l<u.length;l++)u[l]^=106;this.oHash.update(u),u.fill(0)}update(i){return t.default.exists(this),this.iHash.update(i),this}digestInto(i){t.default.exists(this),t.default.bytes(i,this.outputLen),this.finished=!0,this.iHash.digestInto(i),this.oHash.update(i),this.oHash.digestInto(i),this.destroy()}digest(){const i=new Uint8Array(this.oHash.outputLen);return this.digestInto(i),i}_cloneInto(i){i||(i=Object.create(Object.getPrototypeOf(this),{}));const{oHash:a,iHash:c,finished:d,destroyed:u,blockLen:l,outputLen:h}=this;return i=i,i.finished=d,i.destroyed=u,i.blockLen=l,i.outputLen=h,i.oHash=a._cloneInto(i.oHash),i.iHash=c._cloneInto(i.iHash),i}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const s=(o,i,a)=>new r(o,i).update(a).digest();e.hmac=s,e.hmac.create=(o,i)=>new r(o,i)})(ki);Object.defineProperty(mt,"__esModule",{value:!0});mt.pbkdf2Async=mt.pbkdf2=void 0;const hn=Y,wh=ki,ut=rt;function Si(e,t,n,r){hn.default.hash(e);const s=(0,ut.checkOpts)({dkLen:32,asyncTick:10},r),{c:o,dkLen:i,asyncTick:a}=s;if(hn.default.number(o),hn.default.number(i),hn.default.number(a),o<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const c=(0,ut.toBytes)(t),d=(0,ut.toBytes)(n),u=new Uint8Array(i),l=wh.hmac.create(e,c),h=l._cloneInto().update(d);return{c:o,dkLen:i,asyncTick:a,DK:u,PRF:l,PRFSalt:h}}function Ai(e,t,n,r,s){return e.destroy(),t.destroy(),r&&r.destroy(),s.fill(0),n}function xh(e,t,n,r){const{c:s,dkLen:o,DK:i,PRF:a,PRFSalt:c}=Si(e,t,n,r);let d;const u=new Uint8Array(4),l=(0,ut.createView)(u),h=new Uint8Array(a.outputLen);for(let f=1,p=0;p<o;f++,p+=a.outputLen){const g=i.subarray(p,p+a.outputLen);l.setInt32(0,f,!1),(d=c._cloneInto(d)).update(u).digestInto(h),g.set(h.subarray(0,g.length));for(let m=1;m<s;m++){a._cloneInto(d).update(h).digestInto(h);for(let $=0;$<g.length;$++)g[$]^=h[$]}}return Ai(a,c,i,d,h)}mt.pbkdf2=xh;async function $h(e,t,n,r){const{c:s,dkLen:o,asyncTick:i,DK:a,PRF:c,PRFSalt:d}=Si(e,t,n,r);let u;const l=new Uint8Array(4),h=(0,ut.createView)(l),f=new Uint8Array(c.outputLen);for(let p=1,g=0;g<o;p++,g+=c.outputLen){const m=a.subarray(g,g+c.outputLen);h.setInt32(0,p,!1),(u=d._cloneInto(u)).update(l).digestInto(f),m.set(f.subarray(0,m.length)),await(0,ut.asyncLoop)(s-1,i,$=>{c._cloneInto(u).update(f).digestInto(f);for(let x=0;x<m.length;x++)m[x]^=f[x]})}return Ai(c,d,a,u,f)}mt.pbkdf2Async=$h;var vt={},Jt={};Object.defineProperty(Jt,"__esModule",{value:!0});Jt.SHA2=void 0;const ir=Y,Ft=rt;function _h(e,t,n,r){if(typeof e.setBigUint64=="function")return e.setBigUint64(t,n,r);const s=BigInt(32),o=BigInt(4294967295),i=Number(n>>s&o),a=Number(n&o),c=r?4:0,d=r?0:4;e.setUint32(t+c,i,r),e.setUint32(t+d,a,r)}let Eh=class extends Ft.Hash{constructor(t,n,r,s){super(),this.blockLen=t,this.outputLen=n,this.padOffset=r,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=(0,Ft.createView)(this.buffer)}update(t){ir.default.exists(this);const{view:n,buffer:r,blockLen:s}=this;t=(0,Ft.toBytes)(t);const o=t.length;for(let i=0;i<o;){const a=Math.min(s-this.pos,o-i);if(a===s){const c=(0,Ft.createView)(t);for(;s<=o-i;i+=s)this.process(c,i);continue}r.set(t.subarray(i,i+a),this.pos),this.pos+=a,i+=a,this.pos===s&&(this.process(n,0),this.pos=0)}return this.length+=t.length,this.roundClean(),this}digestInto(t){ir.default.exists(this),ir.default.output(t,this),this.finished=!0;const{buffer:n,view:r,blockLen:s,isLE:o}=this;let{pos:i}=this;n[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>s-i&&(this.process(r,0),i=0);for(let l=i;l<s;l++)n[l]=0;_h(r,s-8,BigInt(this.length*8),o),this.process(r,0);const a=(0,Ft.createView)(t),c=this.outputLen;if(c%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=c/4,u=this.get();if(d>u.length)throw new Error("_sha2: outputLen bigger than state");for(let l=0;l<d;l++)a.setUint32(4*l,u[l],o)}digest(){const{buffer:t,outputLen:n}=this;this.digestInto(t);const r=t.slice(0,n);return this.destroy(),r}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:n,buffer:r,length:s,finished:o,destroyed:i,pos:a}=this;return t.length=s,t.pos=a,t.finished=o,t.destroyed=i,s%n&&t.buffer.set(r),t}};Jt.SHA2=Eh;Object.defineProperty(vt,"__esModule",{value:!0});vt.sha224=vt.sha256=void 0;const kh=Jt,ce=rt,Sh=(e,t,n)=>e&t^~e&n,Ah=(e,t,n)=>e&t^e&n^t&n,Th=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Le=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Be=new Uint32Array(64);let Ti=class extends kh.SHA2{constructor(){super(64,32,8,!1),this.A=Le[0]|0,this.B=Le[1]|0,this.C=Le[2]|0,this.D=Le[3]|0,this.E=Le[4]|0,this.F=Le[5]|0,this.G=Le[6]|0,this.H=Le[7]|0}get(){const{A:t,B:n,C:r,D:s,E:o,F:i,G:a,H:c}=this;return[t,n,r,s,o,i,a,c]}set(t,n,r,s,o,i,a,c){this.A=t|0,this.B=n|0,this.C=r|0,this.D=s|0,this.E=o|0,this.F=i|0,this.G=a|0,this.H=c|0}process(t,n){for(let l=0;l<16;l++,n+=4)Be[l]=t.getUint32(n,!1);for(let l=16;l<64;l++){const h=Be[l-15],f=Be[l-2],p=(0,ce.rotr)(h,7)^(0,ce.rotr)(h,18)^h>>>3,g=(0,ce.rotr)(f,17)^(0,ce.rotr)(f,19)^f>>>10;Be[l]=g+Be[l-7]+p+Be[l-16]|0}let{A:r,B:s,C:o,D:i,E:a,F:c,G:d,H:u}=this;for(let l=0;l<64;l++){const h=(0,ce.rotr)(a,6)^(0,ce.rotr)(a,11)^(0,ce.rotr)(a,25),f=u+h+Sh(a,c,d)+Th[l]+Be[l]|0,g=((0,ce.rotr)(r,2)^(0,ce.rotr)(r,13)^(0,ce.rotr)(r,22))+Ah(r,s,o)|0;u=d,d=c,c=a,a=i+f|0,i=o,o=s,s=r,r=f+g|0}r=r+this.A|0,s=s+this.B|0,o=o+this.C|0,i=i+this.D|0,a=a+this.E|0,c=c+this.F|0,d=d+this.G|0,u=u+this.H|0,this.set(r,s,o,i,a,c,d,u)}roundClean(){Be.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}},Ch=class extends Ti{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}};vt.sha256=(0,ce.wrapConstructor)(()=>new Ti);vt.sha224=(0,ce.wrapConstructor)(()=>new Ch);var ue={},Ci={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.add=e.toBig=e.split=e.fromBig=void 0;const t=BigInt(2**32-1),n=BigInt(32);function r(C,H=!1){return H?{h:Number(C&t),l:Number(C>>n&t)}:{h:Number(C>>n&t)|0,l:Number(C&t)|0}}e.fromBig=r;function s(C,H=!1){let I=new Uint32Array(C.length),O=new Uint32Array(C.length);for(let L=0;L<C.length;L++){const{h:F,l:Q}=r(C[L],H);[I[L],O[L]]=[F,Q]}return[I,O]}e.split=s;const o=(C,H)=>BigInt(C>>>0)<<n|BigInt(H>>>0);e.toBig=o;const i=(C,H,I)=>C>>>I,a=(C,H,I)=>C<<32-I|H>>>I,c=(C,H,I)=>C>>>I|H<<32-I,d=(C,H,I)=>C<<32-I|H>>>I,u=(C,H,I)=>C<<64-I|H>>>I-32,l=(C,H,I)=>C>>>I-32|H<<64-I,h=(C,H)=>H,f=(C,H)=>C,p=(C,H,I)=>C<<I|H>>>32-I,g=(C,H,I)=>H<<I|C>>>32-I,m=(C,H,I)=>H<<I-32|C>>>64-I,$=(C,H,I)=>C<<I-32|H>>>64-I;function x(C,H,I,O){const L=(H>>>0)+(O>>>0);return{h:C+I+(L/2**32|0)|0,l:L|0}}e.add=x;const y=(C,H,I)=>(C>>>0)+(H>>>0)+(I>>>0),b=(C,H,I,O)=>H+I+O+(C/2**32|0)|0,w=(C,H,I,O)=>(C>>>0)+(H>>>0)+(I>>>0)+(O>>>0),E=(C,H,I,O,L)=>H+I+O+L+(C/2**32|0)|0,B=(C,H,I,O,L)=>(C>>>0)+(H>>>0)+(I>>>0)+(O>>>0)+(L>>>0),A=(C,H,I,O,L,F)=>H+I+O+L+F+(C/2**32|0)|0,R={fromBig:r,split:s,toBig:e.toBig,shrSH:i,shrSL:a,rotrSH:c,rotrSL:d,rotrBH:u,rotrBL:l,rotr32H:h,rotr32L:f,rotlSH:p,rotlSL:g,rotlBH:m,rotlBL:$,add:x,add3L:y,add3H:b,add4L:w,add4H:E,add5H:A,add5L:B};e.default=R})(Ci);Object.defineProperty(ue,"__esModule",{value:!0});ue.sha384=ue.sha512_256=ue.sha512_224=ue.sha512=ue.SHA512=void 0;const Ih=Jt,U=Ci,qn=rt,[Hh,Lh]=U.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),Re=new Uint32Array(80),Oe=new Uint32Array(80);let en=class extends Ih.SHA2{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:n,Bh:r,Bl:s,Ch:o,Cl:i,Dh:a,Dl:c,Eh:d,El:u,Fh:l,Fl:h,Gh:f,Gl:p,Hh:g,Hl:m}=this;return[t,n,r,s,o,i,a,c,d,u,l,h,f,p,g,m]}set(t,n,r,s,o,i,a,c,d,u,l,h,f,p,g,m){this.Ah=t|0,this.Al=n|0,this.Bh=r|0,this.Bl=s|0,this.Ch=o|0,this.Cl=i|0,this.Dh=a|0,this.Dl=c|0,this.Eh=d|0,this.El=u|0,this.Fh=l|0,this.Fl=h|0,this.Gh=f|0,this.Gl=p|0,this.Hh=g|0,this.Hl=m|0}process(t,n){for(let y=0;y<16;y++,n+=4)Re[y]=t.getUint32(n),Oe[y]=t.getUint32(n+=4);for(let y=16;y<80;y++){const b=Re[y-15]|0,w=Oe[y-15]|0,E=U.default.rotrSH(b,w,1)^U.default.rotrSH(b,w,8)^U.default.shrSH(b,w,7),B=U.default.rotrSL(b,w,1)^U.default.rotrSL(b,w,8)^U.default.shrSL(b,w,7),A=Re[y-2]|0,R=Oe[y-2]|0,C=U.default.rotrSH(A,R,19)^U.default.rotrBH(A,R,61)^U.default.shrSH(A,R,6),H=U.default.rotrSL(A,R,19)^U.default.rotrBL(A,R,61)^U.default.shrSL(A,R,6),I=U.default.add4L(B,H,Oe[y-7],Oe[y-16]),O=U.default.add4H(I,E,C,Re[y-7],Re[y-16]);Re[y]=O|0,Oe[y]=I|0}let{Ah:r,Al:s,Bh:o,Bl:i,Ch:a,Cl:c,Dh:d,Dl:u,Eh:l,El:h,Fh:f,Fl:p,Gh:g,Gl:m,Hh:$,Hl:x}=this;for(let y=0;y<80;y++){const b=U.default.rotrSH(l,h,14)^U.default.rotrSH(l,h,18)^U.default.rotrBH(l,h,41),w=U.default.rotrSL(l,h,14)^U.default.rotrSL(l,h,18)^U.default.rotrBL(l,h,41),E=l&f^~l&g,B=h&p^~h&m,A=U.default.add5L(x,w,B,Lh[y],Oe[y]),R=U.default.add5H(A,$,b,E,Hh[y],Re[y]),C=A|0,H=U.default.rotrSH(r,s,28)^U.default.rotrBH(r,s,34)^U.default.rotrBH(r,s,39),I=U.default.rotrSL(r,s,28)^U.default.rotrBL(r,s,34)^U.default.rotrBL(r,s,39),O=r&o^r&a^o&a,L=s&i^s&c^i&c;$=g|0,x=m|0,g=f|0,m=p|0,f=l|0,p=h|0,{h:l,l:h}=U.default.add(d|0,u|0,R|0,C|0),d=a|0,u=c|0,a=o|0,c=i|0,o=r|0,i=s|0;const F=U.default.add3L(C,I,L);r=U.default.add3H(F,R,H,O),s=F|0}({h:r,l:s}=U.default.add(this.Ah|0,this.Al|0,r|0,s|0)),{h:o,l:i}=U.default.add(this.Bh|0,this.Bl|0,o|0,i|0),{h:a,l:c}=U.default.add(this.Ch|0,this.Cl|0,a|0,c|0),{h:d,l:u}=U.default.add(this.Dh|0,this.Dl|0,d|0,u|0),{h:l,l:h}=U.default.add(this.Eh|0,this.El|0,l|0,h|0),{h:f,l:p}=U.default.add(this.Fh|0,this.Fl|0,f|0,p|0),{h:g,l:m}=U.default.add(this.Gh|0,this.Gl|0,g|0,m|0),{h:$,l:x}=U.default.add(this.Hh|0,this.Hl|0,$|0,x|0),this.set(r,s,o,i,a,c,d,u,l,h,f,p,g,m,$,x)}roundClean(){Re.fill(0),Oe.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}};ue.SHA512=en;let Bh=class extends en{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}},Rh=class extends en{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}},Oh=class extends en{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}};ue.sha512=(0,qn.wrapConstructor)(()=>new en);ue.sha512_224=(0,qn.wrapConstructor)(()=>new Bh);ue.sha512_256=(0,qn.wrapConstructor)(()=>new Rh);ue.sha384=(0,qn.wrapConstructor)(()=>new Oh);const Uh=tc(mh);Object.defineProperty(se,"__esModule",{value:!0});var Ii=se.mnemonicToSeedSync=se.mnemonicToSeed=Di=se.validateMnemonic=se.entropyToMnemonic=se.mnemonicToEntropy=Ui=se.generateMnemonic=void 0;/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */const Hi=Y,Li=mt,Ph=vt,Bi=ue,Mh=rt,fn=Uh,Nh=e=>e[0]==="あいこくしん";function Ri(e){if(typeof e!="string")throw new TypeError(`Invalid mnemonic type: ${typeof e}`);return e.normalize("NFKD")}function Vr(e){const t=Ri(e),n=t.split(" ");if(![12,15,18,21,24].includes(n.length))throw new Error("Invalid mnemonic");return{nfkd:t,words:n}}function Oi(e){Hi.default.bytes(e,16,20,24,28,32)}function Dh(e,t=128){if(Hi.default.number(t),t%32!==0||t>256)throw new TypeError("Invalid entropy");return Ni((0,Mh.randomBytes)(t/8),e)}var Ui=se.generateMnemonic=Dh;const Fh=e=>{const t=8-e.length/4;return new Uint8Array([(0,Ph.sha256)(e)[0]>>t<<t])};function Pi(e){if(!Array.isArray(e)||e.length!==2048||typeof e[0]!="string")throw new Error("Worlist: expected array of 2048 strings");return e.forEach(t=>{if(typeof t!="string")throw new Error(`Wordlist: non-string element: ${t}`)}),fn.utils.chain(fn.utils.checksum(1,Fh),fn.utils.radix2(11,!0),fn.utils.alphabet(e))}function Mi(e,t){const{words:n}=Vr(e),r=Pi(t).decode(n);return Oi(r),r}se.mnemonicToEntropy=Mi;function Ni(e,t){return Oi(e),Pi(t).encode(e).join(Nh(t)?"　":" ")}se.entropyToMnemonic=Ni;function jh(e,t){try{Mi(e,t)}catch{return!1}return!0}var Di=se.validateMnemonic=jh;const Fi=e=>Ri(`mnemonic${e}`);function zh(e,t=""){return(0,Li.pbkdf2Async)(Bi.sha512,Vr(e).nfkd,Fi(t),{c:2048,dkLen:64})}se.mnemonicToSeed=zh;function Kh(e,t=""){return(0,Li.pbkdf2)(Bi.sha512,Vr(e).nfkd,Fi(t),{c:2048,dkLen:64})}Ii=se.mnemonicToSeedSync=Kh;function Ar(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function Gh(e){if(typeof e!="boolean")throw new Error(`Expected boolean, not ${e}`)}function Ve(e,...t){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function Wh(e){if(typeof e!="function"||typeof e.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");Ar(e.outputLen),Ar(e.blockLen)}function qh(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function Qh(e,t){Ve(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}const Xe={number:Ar,bool:Gh,bytes:Ve,hash:Wh,exists:qh,output:Qh};/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const dt=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),we=(e,t)=>e<<32-t|e>>>t,Vh=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;if(!Vh)throw new Error("Non little-endian hardware is not supported");const Zh=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));function Xh(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=Zh[e[n]];return t}function Yh(e){if(typeof e!="string")throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=n*2,s=e.slice(r,r+2),o=Number.parseInt(s,16);if(Number.isNaN(o)||o<0)throw new Error("Invalid byte sequence");t[n]=o}return t}function ji(e){if(typeof e!="string")throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);return new TextEncoder().encode(e)}function Zr(e){if(typeof e=="string"&&(e=ji(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}function pn(...e){if(!e.every(r=>r instanceof Uint8Array))throw new Error("Uint8Array list expected");if(e.length===1)return e[0];const t=e.reduce((r,s)=>r+s.length,0),n=new Uint8Array(t);for(let r=0,s=0;r<e.length;r++){const o=e[r];n.set(o,s),s+=o.length}return n}class zi{clone(){return this._cloneInto()}}function st(e){const t=r=>e().update(Zr(r)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}let Ki=class extends zi{constructor(t,n){super(),this.finished=!1,this.destroyed=!1,Xe.hash(t);const r=Zr(n);if(this.iHash=t.create(),typeof this.iHash.update!="function")throw new TypeError("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const s=this.blockLen,o=new Uint8Array(s);o.set(r.length>s?t.create().update(r).digest():r);for(let i=0;i<o.length;i++)o[i]^=54;this.iHash.update(o),this.oHash=t.create();for(let i=0;i<o.length;i++)o[i]^=106;this.oHash.update(o),o.fill(0)}update(t){return Xe.exists(this),this.iHash.update(t),this}digestInto(t){Xe.exists(this),Xe.bytes(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:n,iHash:r,finished:s,destroyed:o,blockLen:i,outputLen:a}=this;return t=t,t.finished=s,t.destroyed=o,t.blockLen=i,t.outputLen=a,t.oHash=n._cloneInto(t.oHash),t.iHash=r._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}};const Rn=(e,t,n)=>new Ki(e,t).update(n).digest();Rn.create=(e,t)=>new Ki(e,t);function Jh(e,t,n,r){if(typeof e.setBigUint64=="function")return e.setBigUint64(t,n,r);const s=BigInt(32),o=BigInt(4294967295),i=Number(n>>s&o),a=Number(n&o),c=r?4:0,d=r?0:4;e.setUint32(t+c,i,r),e.setUint32(t+d,a,r)}class Xr extends zi{constructor(t,n,r,s){super(),this.blockLen=t,this.outputLen=n,this.padOffset=r,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=dt(this.buffer)}update(t){Xe.exists(this);const{view:n,buffer:r,blockLen:s}=this;t=Zr(t);const o=t.length;for(let i=0;i<o;){const a=Math.min(s-this.pos,o-i);if(a===s){const c=dt(t);for(;s<=o-i;i+=s)this.process(c,i);continue}r.set(t.subarray(i,i+a),this.pos),this.pos+=a,i+=a,this.pos===s&&(this.process(n,0),this.pos=0)}return this.length+=t.length,this.roundClean(),this}digestInto(t){Xe.exists(this),Xe.output(t,this),this.finished=!0;const{buffer:n,view:r,blockLen:s,isLE:o}=this;let{pos:i}=this;n[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>s-i&&(this.process(r,0),i=0);for(let l=i;l<s;l++)n[l]=0;Jh(r,s-8,BigInt(this.length*8),o),this.process(r,0);const a=dt(t),c=this.outputLen;if(c%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=c/4,u=this.get();if(d>u.length)throw new Error("_sha2: outputLen bigger than state");for(let l=0;l<d;l++)a.setUint32(4*l,u[l],o)}digest(){const{buffer:t,outputLen:n}=this;this.digestInto(t);const r=t.slice(0,n);return this.destroy(),r}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:n,buffer:r,length:s,finished:o,destroyed:i,pos:a}=this;return t.length=s,t.pos=a,t.finished=o,t.destroyed=i,s%n&&t.buffer.set(r),t}}const ef=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),Gi=Uint8Array.from({length:16},(e,t)=>t),tf=Gi.map(e=>(9*e+5)%16);let Yr=[Gi],Jr=[tf];for(let e=0;e<4;e++)for(let t of[Yr,Jr])t.push(t[e].map(n=>ef[n]));const Wi=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map(e=>new Uint8Array(e)),nf=Yr.map((e,t)=>e.map(n=>Wi[t][n])),rf=Jr.map((e,t)=>e.map(n=>Wi[t][n])),sf=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),of=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),gn=(e,t)=>e<<t|e>>>32-t;function Vs(e,t,n,r){return e===0?t^n^r:e===1?t&n|~t&r:e===2?(t|~n)^r:e===3?t&r|n&~r:t^(n|~r)}const bn=new Uint32Array(16);class af extends Xr{constructor(){super(64,20,8,!0),this.h0=1732584193,this.h1=-271733879,this.h2=-1732584194,this.h3=271733878,this.h4=-1009589776}get(){const{h0:t,h1:n,h2:r,h3:s,h4:o}=this;return[t,n,r,s,o]}set(t,n,r,s,o){this.h0=t|0,this.h1=n|0,this.h2=r|0,this.h3=s|0,this.h4=o|0}process(t,n){for(let f=0;f<16;f++,n+=4)bn[f]=t.getUint32(n,!0);let r=this.h0|0,s=r,o=this.h1|0,i=o,a=this.h2|0,c=a,d=this.h3|0,u=d,l=this.h4|0,h=l;for(let f=0;f<5;f++){const p=4-f,g=sf[f],m=of[f],$=Yr[f],x=Jr[f],y=nf[f],b=rf[f];for(let w=0;w<16;w++){const E=gn(r+Vs(f,o,a,d)+bn[$[w]]+g,y[w])+l|0;r=l,l=d,d=gn(a,10)|0,a=o,o=E}for(let w=0;w<16;w++){const E=gn(s+Vs(p,i,c,u)+bn[x[w]]+m,b[w])+h|0;s=h,h=u,u=gn(c,10)|0,c=i,i=E}}this.set(this.h1+a+u|0,this.h2+d+h|0,this.h3+l+s|0,this.h4+r+i|0,this.h0+o+c|0)}roundClean(){bn.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}const cf=st(()=>new af),lf=(e,t,n)=>e&t^~e&n,uf=(e,t,n)=>e&t^e&n^t&n,df=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Ue=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Pe=new Uint32Array(64);class qi extends Xr{constructor(){super(64,32,8,!1),this.A=Ue[0]|0,this.B=Ue[1]|0,this.C=Ue[2]|0,this.D=Ue[3]|0,this.E=Ue[4]|0,this.F=Ue[5]|0,this.G=Ue[6]|0,this.H=Ue[7]|0}get(){const{A:t,B:n,C:r,D:s,E:o,F:i,G:a,H:c}=this;return[t,n,r,s,o,i,a,c]}set(t,n,r,s,o,i,a,c){this.A=t|0,this.B=n|0,this.C=r|0,this.D=s|0,this.E=o|0,this.F=i|0,this.G=a|0,this.H=c|0}process(t,n){for(let l=0;l<16;l++,n+=4)Pe[l]=t.getUint32(n,!1);for(let l=16;l<64;l++){const h=Pe[l-15],f=Pe[l-2],p=we(h,7)^we(h,18)^h>>>3,g=we(f,17)^we(f,19)^f>>>10;Pe[l]=g+Pe[l-7]+p+Pe[l-16]|0}let{A:r,B:s,C:o,D:i,E:a,F:c,G:d,H:u}=this;for(let l=0;l<64;l++){const h=we(a,6)^we(a,11)^we(a,25),f=u+h+lf(a,c,d)+df[l]+Pe[l]|0,g=(we(r,2)^we(r,13)^we(r,22))+uf(r,s,o)|0;u=d,d=c,c=a,a=i+f|0,i=o,o=s,s=r,r=f+g|0}r=r+this.A|0,s=s+this.B|0,o=o+this.C|0,i=i+this.D|0,a=a+this.E|0,c=c+this.F|0,d=d+this.G|0,u=u+this.H|0,this.set(r,s,o,i,a,c,d,u)}roundClean(){Pe.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}class hf extends qi{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}const es=st(()=>new qi);st(()=>new hf);const yn=BigInt(2**32-1),Tr=BigInt(32);function Qi(e,t=!1){return t?{h:Number(e&yn),l:Number(e>>Tr&yn)}:{h:Number(e>>Tr&yn)|0,l:Number(e&yn)|0}}function ff(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let s=0;s<e.length;s++){const{h:o,l:i}=Qi(e[s],t);[n[s],r[s]]=[o,i]}return[n,r]}const pf=(e,t)=>BigInt(e>>>0)<<Tr|BigInt(t>>>0),gf=(e,t,n)=>e>>>n,bf=(e,t,n)=>e<<32-n|t>>>n,yf=(e,t,n)=>e>>>n|t<<32-n,mf=(e,t,n)=>e<<32-n|t>>>n,vf=(e,t,n)=>e<<64-n|t>>>n-32,wf=(e,t,n)=>e>>>n-32|t<<64-n,xf=(e,t)=>t,$f=(e,t)=>e,_f=(e,t,n)=>e<<n|t>>>32-n,Ef=(e,t,n)=>t<<n|e>>>32-n,kf=(e,t,n)=>t<<n-32|e>>>64-n,Sf=(e,t,n)=>e<<n-32|t>>>64-n;function Af(e,t,n,r){const s=(t>>>0)+(r>>>0);return{h:e+n+(s/2**32|0)|0,l:s|0}}const Tf=(e,t,n)=>(e>>>0)+(t>>>0)+(n>>>0),Cf=(e,t,n,r)=>t+n+r+(e/2**32|0)|0,If=(e,t,n,r)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0),Hf=(e,t,n,r,s)=>t+n+r+s+(e/2**32|0)|0,Lf=(e,t,n,r,s)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0)+(s>>>0),Bf=(e,t,n,r,s,o)=>t+n+r+s+o+(e/2**32|0)|0,P={fromBig:Qi,split:ff,toBig:pf,shrSH:gf,shrSL:bf,rotrSH:yf,rotrSL:mf,rotrBH:vf,rotrBL:wf,rotr32H:xf,rotr32L:$f,rotlSH:_f,rotlSL:Ef,rotlBH:kf,rotlBL:Sf,add:Af,add3L:Tf,add3H:Cf,add4L:If,add4H:Hf,add5H:Bf,add5L:Lf},[Rf,Of]=P.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),Me=new Uint32Array(80),Ne=new Uint32Array(80);class Qn extends Xr{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:n,Bh:r,Bl:s,Ch:o,Cl:i,Dh:a,Dl:c,Eh:d,El:u,Fh:l,Fl:h,Gh:f,Gl:p,Hh:g,Hl:m}=this;return[t,n,r,s,o,i,a,c,d,u,l,h,f,p,g,m]}set(t,n,r,s,o,i,a,c,d,u,l,h,f,p,g,m){this.Ah=t|0,this.Al=n|0,this.Bh=r|0,this.Bl=s|0,this.Ch=o|0,this.Cl=i|0,this.Dh=a|0,this.Dl=c|0,this.Eh=d|0,this.El=u|0,this.Fh=l|0,this.Fl=h|0,this.Gh=f|0,this.Gl=p|0,this.Hh=g|0,this.Hl=m|0}process(t,n){for(let y=0;y<16;y++,n+=4)Me[y]=t.getUint32(n),Ne[y]=t.getUint32(n+=4);for(let y=16;y<80;y++){const b=Me[y-15]|0,w=Ne[y-15]|0,E=P.rotrSH(b,w,1)^P.rotrSH(b,w,8)^P.shrSH(b,w,7),B=P.rotrSL(b,w,1)^P.rotrSL(b,w,8)^P.shrSL(b,w,7),A=Me[y-2]|0,R=Ne[y-2]|0,C=P.rotrSH(A,R,19)^P.rotrBH(A,R,61)^P.shrSH(A,R,6),H=P.rotrSL(A,R,19)^P.rotrBL(A,R,61)^P.shrSL(A,R,6),I=P.add4L(B,H,Ne[y-7],Ne[y-16]),O=P.add4H(I,E,C,Me[y-7],Me[y-16]);Me[y]=O|0,Ne[y]=I|0}let{Ah:r,Al:s,Bh:o,Bl:i,Ch:a,Cl:c,Dh:d,Dl:u,Eh:l,El:h,Fh:f,Fl:p,Gh:g,Gl:m,Hh:$,Hl:x}=this;for(let y=0;y<80;y++){const b=P.rotrSH(l,h,14)^P.rotrSH(l,h,18)^P.rotrBH(l,h,41),w=P.rotrSL(l,h,14)^P.rotrSL(l,h,18)^P.rotrBL(l,h,41),E=l&f^~l&g,B=h&p^~h&m,A=P.add5L(x,w,B,Of[y],Ne[y]),R=P.add5H(A,$,b,E,Rf[y],Me[y]),C=A|0,H=P.rotrSH(r,s,28)^P.rotrBH(r,s,34)^P.rotrBH(r,s,39),I=P.rotrSL(r,s,28)^P.rotrBL(r,s,34)^P.rotrBL(r,s,39),O=r&o^r&a^o&a,L=s&i^s&c^i&c;$=g|0,x=m|0,g=f|0,m=p|0,f=l|0,p=h|0,{h:l,l:h}=P.add(d|0,u|0,R|0,C|0),d=a|0,u=c|0,a=o|0,c=i|0,o=r|0,i=s|0;const F=P.add3L(C,I,L);r=P.add3H(F,R,H,O),s=F|0}({h:r,l:s}=P.add(this.Ah|0,this.Al|0,r|0,s|0)),{h:o,l:i}=P.add(this.Bh|0,this.Bl|0,o|0,i|0),{h:a,l:c}=P.add(this.Ch|0,this.Cl|0,a|0,c|0),{h:d,l:u}=P.add(this.Dh|0,this.Dl|0,d|0,u|0),{h:l,l:h}=P.add(this.Eh|0,this.El|0,l|0,h|0),{h:f,l:p}=P.add(this.Fh|0,this.Fl|0,f|0,p|0),{h:g,l:m}=P.add(this.Gh|0,this.Gl|0,g|0,m|0),{h:$,l:x}=P.add(this.Hh|0,this.Hl|0,$|0,x|0),this.set(r,s,o,i,a,c,d,u,l,h,f,p,g,m,$,x)}roundClean(){Me.fill(0),Ne.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}class Uf extends Qn{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class Pf extends Qn{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class Mf extends Qn{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}const Zs=st(()=>new Qn);st(()=>new Uf);st(()=>new Pf);st(()=>new Mf);M.hmacSha256Sync=(e,...t)=>Rn(es,e,M.concatBytes(...t));const ar=pi(es);function Xs(e){return BigInt(`0x${Xh(e)}`)}function Nf(e){return Yh(e.toString(16).padStart(64,"0"))}const Df=ji("Bitcoin seed"),cr={private:76066276,public:76067358},lr=2147483648,Ff=e=>cf(es(e)),jf=e=>dt(e).getUint32(0,!1),mn=e=>{if(!Number.isSafeInteger(e)||e<0||e>2**32-1)throw new Error(`Invalid number=${e}. Should be from 0 to 2 ** 32 - 1`);const t=new Uint8Array(4);return dt(t).setUint32(0,e,!1),t};class Ze{constructor(t){if(this.depth=0,this.index=0,this.chainCode=null,this.parentFingerprint=0,!t||typeof t!="object")throw new Error("HDKey.constructor must not be called directly");if(this.versions=t.versions||cr,this.depth=t.depth||0,this.chainCode=t.chainCode,this.index=t.index||0,this.parentFingerprint=t.parentFingerprint||0,!this.depth&&(this.parentFingerprint||this.index))throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");if(t.publicKey&&t.privateKey)throw new Error("HDKey: publicKey and privateKey at same time.");if(t.privateKey){if(!M.isValidPrivateKey(t.privateKey))throw new Error("Invalid private key");this.privKey=typeof t.privateKey=="bigint"?t.privateKey:Xs(t.privateKey),this.privKeyBytes=Nf(this.privKey),this.pubKey=zd(t.privateKey,!0)}else if(t.publicKey)this.pubKey=D.fromHex(t.publicKey).toRawBytes(!0);else throw new Error("HDKey: no public or private key provided");this.pubHash=Ff(this.pubKey)}get fingerprint(){if(!this.pubHash)throw new Error("No publicKey set!");return jf(this.pubHash)}get identifier(){return this.pubHash}get pubKeyHash(){return this.pubHash}get privateKey(){return this.privKeyBytes||null}get publicKey(){return this.pubKey||null}get privateExtendedKey(){const t=this.privateKey;if(!t)throw new Error("No private key");return ar.encode(this.serialize(this.versions.private,pn(new Uint8Array([0]),t)))}get publicExtendedKey(){if(!this.pubKey)throw new Error("No public key");return ar.encode(this.serialize(this.versions.public,this.pubKey))}static fromMasterSeed(t,n=cr){if(Ve(t),8*t.length<128||8*t.length>512)throw new Error(`HDKey: wrong seed length=${t.length}. Should be between 128 and 512 bits; 256 bits is advised)`);const r=Rn(Zs,Df,t);return new Ze({versions:n,chainCode:r.slice(32),privateKey:r.slice(0,32)})}static fromExtendedKey(t,n=cr){const r=ar.decode(t),s=dt(r),o=s.getUint32(0,!1),i={versions:n,depth:r[4],parentFingerprint:s.getUint32(5,!1),index:s.getUint32(9,!1),chainCode:r.slice(13,45)},a=r.slice(45),c=a[0]===0;if(o!==n[c?"private":"public"])throw new Error("Version mismatch");return c?new Ze({...i,privateKey:a.slice(1)}):new Ze({...i,publicKey:a})}static fromJSON(t){return Ze.fromExtendedKey(t.xpriv)}derive(t){if(!/^[mM]'?/.test(t))throw new Error('Path must start with "m" or "M"');if(/^[mM]'?$/.test(t))return this;const n=t.replace(/^[mM]'?\//,"").split("/");let r=this;for(const s of n){const o=/^(\d+)('?)$/.exec(s);if(!o||o.length!==3)throw new Error(`Invalid child index: ${s}`);let i=+o[1];if(!Number.isSafeInteger(i)||i>=lr)throw new Error("Invalid index");o[2]==="'"&&(i+=lr),r=r.deriveChild(i)}return r}deriveChild(t){if(!this.pubKey||!this.chainCode)throw new Error("No publicKey or chainCode set");let n=mn(t);if(t>=lr){const a=this.privateKey;if(!a)throw new Error("Could not derive hardened child key");n=pn(new Uint8Array([0]),a,n)}else n=pn(this.pubKey,n);const r=Rn(Zs,this.chainCode,n),s=Xs(r.slice(0,32)),o=r.slice(32);if(!M.isValidPrivateKey(s))throw new Error("Tweak bigger than curve order");const i={versions:this.versions,chainCode:o,depth:this.depth+1,parentFingerprint:this.fingerprint,index:t};try{if(this.privateKey){const a=M.mod(this.privKey+s,K.n);if(!M.isValidPrivateKey(a))throw new Error("The tweak was out of range or the resulted private key is invalid");i.privateKey=a}else{const a=D.fromHex(this.pubKey).add(D.fromPrivateKey(s));if(a.equals(D.ZERO))throw new Error("The tweak was equal to negative P, which made the result key invalid");i.publicKey=a.toRawBytes(!0)}return new Ze(i)}catch{return this.deriveChild(t+1)}}sign(t){if(!this.privateKey)throw new Error("No privateKey set!");return Ve(t,32),qd(t,this.privKey,{canonical:!0,der:!1})}verify(t,n){if(Ve(t,32),Ve(n,64),!this.publicKey)throw new Error("No publicKey set!");let r;try{r=Te.fromCompact(n)}catch{return!1}return Vd(r,t,this.publicKey)}wipePrivateData(){return this.privKey=void 0,this.privKeyBytes&&(this.privKeyBytes.fill(0),this.privKeyBytes=void 0),this}toJSON(){return{xpriv:this.privateExtendedKey,xpub:this.publicExtendedKey}}serialize(t,n){if(!this.chainCode)throw new Error("No chainCode set");return Ve(n,33),pn(mn(t),new Uint8Array([this.depth]),mn(this.parentFingerprint),mn(this.index),this.chainCode,n)}}class Vi extends Er{constructor(t,n){super(),this.finished=!1,this.destroyed=!1,th(t);const r=Kr(n);if(this.iHash=t.create(),!(this.iHash instanceof Er))throw new TypeError("Expected instance of class which extends utils.Hash");const s=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const o=new Uint8Array(s);o.set(r.length>this.iHash.blockLen?t.create().update(r).digest():r);for(let i=0;i<o.length;i++)o[i]^=54;this.iHash.update(o),this.oHash=t.create();for(let i=0;i<o.length;i++)o[i]^=106;this.oHash.update(o),o.fill(0)}update(t){if(this.destroyed)throw new Error("instance is destroyed");return this.iHash.update(t),this}digestInto(t){if(this.destroyed)throw new Error("instance is destroyed");if(!(t instanceof Uint8Array)||t.length!==this.outputLen)throw new Error("HMAC: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:n,iHash:r,finished:s,destroyed:o,blockLen:i,outputLen:a}=this;return t=t,t.finished=s,t.destroyed=o,t.blockLen=i,t.outputLen=a,t.oHash=n._cloneInto(t.oHash),t.iHash=r._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const On=(e,t,n)=>new Vi(e,t).update(n).digest();On.create=(e,t)=>new Vi(e,t);On.init=On.create;var zf=Object.defineProperty,ot=(e,t)=>{for(var n in t)zf(e,n,{get:t[n],enumerable:!0})};function Kf(e){return M.bytesToHex(Gn.getPublicKey(e))}var Gf={};ot(Gf,{insertEventIntoAscendingList:()=>qf,insertEventIntoDescendingList:()=>Wf,normalizeURL:()=>xn,utf8Decoder:()=>Un,utf8Encoder:()=>it});var Un=new TextDecoder("utf-8"),it=new TextEncoder;function xn(e){let t=new URL(e);return t.pathname=t.pathname.replace(/\/+/g,"/"),t.pathname.endsWith("/")&&(t.pathname=t.pathname.slice(0,-1)),(t.port==="80"&&t.protocol==="ws:"||t.port==="443"&&t.protocol==="wss:")&&(t.port=""),t.searchParams.sort(),t.hash="",t.toString()}function Wf(e,t){let n=0,r=e.length-1,s,o=n;if(r<0)o=0;else if(t.created_at<e[r].created_at)o=r+1;else if(t.created_at>=e[n].created_at)o=n;else for(;;){if(r<=n+1){o=r;break}if(s=Math.floor(n+(r-n)/2),e[s].created_at>t.created_at)n=s;else if(e[s].created_at<t.created_at)r=s;else{o=s;break}}return e[o]?.id!==t.id?[...e.slice(0,o),t,...e.slice(o)]:e}function qf(e,t){let n=0,r=e.length-1,s,o=n;if(r<0)o=0;else if(t.created_at>e[r].created_at)o=r+1;else if(t.created_at<=e[n].created_at)o=n;else for(;;){if(r<=n+1){o=r;break}if(s=Math.floor(n+(r-n)/2),e[s].created_at<t.created_at)n=s;else if(e[s].created_at>t.created_at)r=s;else{o=s;break}}return e[o]?.id!==t.id?[...e.slice(0,o),t,...e.slice(o)]:e}var le=(e=>(e[e.Metadata=0]="Metadata",e[e.Text=1]="Text",e[e.RecommendRelay=2]="RecommendRelay",e[e.Contacts=3]="Contacts",e[e.EncryptedDirectMessage=4]="EncryptedDirectMessage",e[e.EventDeletion=5]="EventDeletion",e[e.Reaction=7]="Reaction",e[e.ChannelCreation=40]="ChannelCreation",e[e.ChannelMetadata=41]="ChannelMetadata",e[e.ChannelMessage=42]="ChannelMessage",e[e.ChannelHideMessage=43]="ChannelHideMessage",e[e.ChannelMuteUser=44]="ChannelMuteUser",e))(le||{});function Qf(e){if(!Xi(e))throw new Error("can't serialize event with wrong or missing properties");return JSON.stringify([0,e.pubkey,e.created_at,e.kind,e.tags,e.content])}function Zi(e){let t=Xt(it.encode(Qf(e)));return M.bytesToHex(t)}function Xi(e){if(typeof e.content!="string"||typeof e.created_at!="number"||typeof e.pubkey!="string"||!e.pubkey.match(/^[a-f0-9]{64}$/)||!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){let n=e.tags[t];if(!Array.isArray(n))return!1;for(let r=0;r<n.length;r++)if(typeof n[r]=="object")return!1}return!0}function Vf(e){return Gn.verifySync(e.sig,Zi(e),e.pubkey)}function Zf(e,t){if(e.ids&&e.ids.indexOf(t.id)===-1||e.kinds&&e.kinds.indexOf(t.kind)===-1||e.authors&&e.authors.indexOf(t.pubkey)===-1)return!1;for(let n in e)if(n[0]==="#"){let r=n.slice(1),s=e[`#${r}`];if(s&&!t.tags.find(([o,i])=>o===n.slice(1)&&s.indexOf(i)!==-1))return!1}return!(e.since&&t.created_at<e.since||e.until&&t.created_at>=e.until)}function Xf(e,t){for(let n=0;n<e.length;n++)if(Zf(e[n],t))return!0;return!1}var Yf={};ot(Yf,{getHex64:()=>Vn,getInt:()=>Yi,getSubscriptionId:()=>Ji,matchEventId:()=>Jf,matchEventKind:()=>t0,matchEventPubkey:()=>e0});function Vn(e,t){let n=t.length+3,r=e.indexOf(`"${t}":`)+n,s=e.slice(r).indexOf('"')+r+1;return e.slice(s,s+64)}function Yi(e,t){let n=t.length,r=e.indexOf(`"${t}":`)+n+3,s=e.slice(r),o=Math.min(s.indexOf(","),s.indexOf("}"));return parseInt(s.slice(0,o),10)}function Ji(e){let t=e.slice(0,22).indexOf('"EVENT"');if(t===-1)return null;let n=e.slice(t+7+1).indexOf('"');if(n===-1)return null;let r=t+7+1+n,s=e.slice(r+1,80).indexOf('"');if(s===-1)return null;let o=r+1+s;return e.slice(r+1,o)}function Jf(e,t){return t===Vn(e,"id")}function e0(e,t){return t===Vn(e,"pubkey")}function t0(e,t){return t===Yi(e,"kind")}function n0(e){var t,n,r,s=new Promise(f=>{r=f}),o={},i={connect:[],disconnect:[],error:[],notice:[]},a={},c={};async function d(){return new Promise((f,p)=>{t=new WebSocket(e),t.onopen=()=>{i.connect.forEach(x=>x()),r(),f()},t.onerror=()=>{i.error.forEach(x=>x()),p()},t.onclose=async()=>{i.disconnect.forEach(x=>x()),n&&n()};let g=[],m;t.onmessage=x=>{g.push(x.data),m||(m=setInterval($,0))};function $(){if(g.length===0){clearInterval(m),m=null;return}var x=g.shift();if(!x)return;let y=Ji(x);if(y){let b=o[y];if(b&&b.alreadyHaveEvent&&b.alreadyHaveEvent(Vn(x,"id"),e))return}try{let b=JSON.parse(x);switch(b[0]){case"EVENT":let w=b[1],E=b[2];Xi(E)&&o[w]&&(o[w].skipVerification||Vf(E))&&Xf(o[w].filters,E)&&(o[w],(a[w]?.event||[]).forEach(A=>A(E)));return;case"EOSE":{let A=b[1];(a[A]?.eose||[]).forEach(R=>R());return}case"OK":{let A=b[1],R=b[2],C=b[3]||"";R?c[A]?.ok.forEach(H=>H()):c[A]?.failed.forEach(H=>H(C));return}case"NOTICE":let B=b[1];i.notice.forEach(A=>A(B));return}}catch{return}}})}async function u(){t?.readyState,await d()}async function l(f){let p=JSON.stringify(f);await s;try{t.send(p)}catch(g){console.log(g)}}const h=(f,{skipVerification:p=!1,alreadyHaveEvent:g=null,id:m=Math.random().toString().slice(2)}={})=>{let $=m;return o[$]={id:$,filters:f,skipVerification:p,alreadyHaveEvent:g},l(["REQ",$,...f]),{sub:(x,y={})=>h(x||f,{skipVerification:y.skipVerification||p,alreadyHaveEvent:y.alreadyHaveEvent||g,id:$}),unsub:()=>{delete o[$],delete a[$],l(["CLOSE",$])},on:(x,y)=>{a[$]=a[$]||{event:[],eose:[]},a[$][x].push(y)},off:(x,y)=>{let b=a[$],w=b[x].indexOf(y);w>=0&&b[x].splice(w,1)}}};return{url:e,sub:h,on:(f,p)=>{i[f].push(p),f==="connect"&&t?.readyState===1&&p()},off:(f,p)=>{let g=i[f].indexOf(p);g!==-1&&i[f].splice(g,1)},list:(f,p)=>new Promise(g=>{let m=h(f,p),$=[],x=setTimeout(()=>{m.unsub(),g($)},1500);m.on("eose",()=>{m.unsub(),clearTimeout(x),g($)}),m.on("event",y=>{$.push(y)})}),get:(f,p)=>new Promise(g=>{let m=h([f],p),$=setTimeout(()=>{m.unsub(),g(null)},1500);m.on("event",x=>{m.unsub(),clearTimeout($),g(x)})}),publish(f){if(!f.id)throw new Error(`event ${f} has no id`);let p=f.id;var g=!1,m=!1;l(["EVENT",f]).then(()=>{g=!0,m&&($(),m=!1)}).catch(()=>{});const $=()=>{let x=h([{ids:[p]}],{id:`monitor-${p.slice(0,5)}`}),y=setTimeout(()=>{(c[p]?.failed||[]).forEach(b=>b("event not seen after 5 seconds")),x.unsub()},5e3);x.on("event",()=>{clearTimeout(y),(c[p]?.seen||[]).forEach(b=>b())})};return{on:(x,y)=>{c[p]=c[p]||{ok:[],seen:[],failed:[]},c[p][x].push(y),x==="seen"&&(g?$():m=!0)},off:(x,y)=>{let b=c[p];if(!b)return;let w=b[x].indexOf(y);w>=0&&b[x].splice(w,1)}}},connect:u,close(){return t.readyState>1?Promise.resolve():(t.close(),new Promise(f=>{n=f}))},get status(){return t?.readyState??3}}}var r0=class{_conn;_seenOn={};constructor(){this._conn={}}async close(e){await Promise.all(e.map(async t=>{let n=this._conn[xn(t)];n&&await n.close()}))}async ensureRelay(e){const t=xn(e),n=this._conn[t];if(n)return n;const r=n0(t);return this._conn[t]=r,await r.connect(),r}sub(e,t,n){let r=new Set,s=n||{};s.alreadyHaveEvent=(h,f)=>{let p=this._seenOn[h]||new Set;return p.add(f),this._seenOn[h]=p,r.has(h)};let o=[],i=new Set,a=new Set,c=e.length,d=!1,u=setTimeout(()=>{d=!0;for(let h of a.values())h()},2400);e.forEach(async h=>{let f=await this.ensureRelay(h);if(!f)return;let p=f.sub(t,s);p.on("event",g=>{r.add(g.id);for(let m of i.values())m(g)}),p.on("eose",()=>{if(!d&&(c--,c===0)){clearTimeout(u);for(let g of a.values())g()}}),o.push(p)});let l={sub(h,f){return o.forEach(p=>p.sub(h,f)),l},unsub(){o.forEach(h=>h.unsub())},on(h,f){switch(h){case"event":i.add(f);break;case"eose":a.add(f);break}},off(h,f){h==="event"?i.delete(f):h==="eose"&&a.delete(f)}};return l}get(e,t,n){return new Promise(r=>{let s=this.sub(e,[t],n),o=setTimeout(()=>{s.unsub(),r(null)},1500);s.on("event",i=>{r(i),clearTimeout(o),s.unsub()})})}list(e,t,n){return new Promise(r=>{let s=[],o=this.sub(e,t,n);o.on("event",i=>{s.push(i)}),o.on("eose",()=>{o.unsub(),r(s)})})}publish(e,t){return e.map(n=>{let r=this._conn[xn(n)];return r?r.publish(t):s0(n)})}seenOn(e){return Array.from(this._seenOn[e]?.values?.()||[])}};function s0(e){return{on(t,n){t==="failed"&&n(`relay ${e} not connected`)},off(){}}}var o0={};ot(o0,{decrypt:()=>a0,encrypt:()=>i0});async function i0(e,t,n){const r=Yo(e,"02"+t),s=ea(r);let o=Uint8Array.from(rh(16)),i=it.encode(n),a=await crypto.subtle.importKey("raw",s,{name:"AES-CBC"},!1,["encrypt"]),c=await crypto.subtle.encrypt({name:"AES-CBC",iv:o},a,i),d=yt.encode(new Uint8Array(c)),u=yt.encode(new Uint8Array(o.buffer));return`${d}?iv=${u}`}async function a0(e,t,n){let[r,s]=n.split("?iv="),o=Yo(e,"02"+t),i=ea(o),a=await crypto.subtle.importKey("raw",i,{name:"AES-CBC"},!1,["decrypt"]),c=yt.decode(r),d=yt.decode(s),u=await crypto.subtle.decrypt({name:"AES-CBC",iv:d},a,c);return Un.decode(u)}function ea(e){return e.slice(1,33)}var c0={};ot(c0,{queryProfile:()=>d0,searchDomain:()=>u0,useFetchImplementation:()=>l0});var Zn;try{Zn=fetch}catch{}function l0(e){Zn=e}async function u0(e,t=""){try{return(await(await Zn(`https://${e}/.well-known/nostr.json?name=${t}`)).json()).names}catch{return{}}}async function d0(e){let[t,n]=e.split("@");if(n||(n=t,t="_"),!t.match(/^[A-Za-z0-9-_]+$/))return null;let r=await(await Zn(`https://${n}/.well-known/nostr.json?name=${t}`)).json();if(!r?.names?.[t])return null;let s=r.names[t],o=r.relays?.[s]||[];return{pubkey:s,relays:o}}var h0={};ot(h0,{generateSeedWords:()=>p0,privateKeyFromSeedWords:()=>f0,validateWords:()=>g0});function f0(e,t){let r=Ze.fromMasterSeed(Ii(e,t)).derive("m/44'/1237'/0'/0/0").privateKey;if(!r)throw new Error("could not derive private key");return M.bytesToHex(r)}function p0(){return Ui(qr)}function g0(e){return Di(e,qr)}var b0={};ot(b0,{decode:()=>y0,neventEncode:()=>$0,noteEncode:()=>w0,nprofileEncode:()=>x0,npubEncode:()=>v0,nsecEncode:()=>m0});var Xn=5e3;function y0(e){let{prefix:t,words:n}=ie.decode(e,Xn),r=new Uint8Array(ie.fromWords(n));if(t==="nprofile"){let s=Ys(r);if(!s[0]?.[0])throw new Error("missing TLV 0 for nprofile");if(s[0][0].length!==32)throw new Error("TLV 0 should be 32 bytes");return{type:"nprofile",data:{pubkey:M.bytesToHex(s[0][0]),relays:s[1].map(o=>Un.decode(o))}}}if(t==="nevent"){let s=Ys(r);if(!s[0]?.[0])throw new Error("missing TLV 0 for nevent");if(s[0][0].length!==32)throw new Error("TLV 0 should be 32 bytes");return{type:"nevent",data:{id:M.bytesToHex(s[0][0]),relays:s[1].map(o=>Un.decode(o))}}}if(t==="nsec"||t==="npub"||t==="note")return{type:t,data:M.bytesToHex(r)};throw new Error(`unknown prefix ${t}`)}function Ys(e){let t={},n=e;for(;n.length>0;){let r=n[0],s=n[1],o=n.slice(2,2+s);n=n.slice(2+s),!(o.length<s)&&(t[r]=t[r]||[],t[r].push(o))}return t}function m0(e){return ts("nsec",e)}function v0(e){return ts("npub",e)}function w0(e){return ts("note",e)}function ts(e,t){let n=M.hexToBytes(t),r=ie.toWords(n);return ie.encode(e,r,Xn)}function x0(e){let t=ta({0:[M.hexToBytes(e.pubkey)],1:(e.relays||[]).map(r=>it.encode(r))}),n=ie.toWords(t);return ie.encode("nprofile",n,Xn)}function $0(e){let t=ta({0:[M.hexToBytes(e.id)],1:(e.relays||[]).map(r=>it.encode(r))}),n=ie.toWords(t);return ie.encode("nevent",n,Xn)}function ta(e){let t=[];return Object.entries(e).forEach(([n,r])=>{r.forEach(s=>{let o=new Uint8Array(s.length+2);o.set([parseInt(n)],0),o.set([s.length],1),o.set(s,2),t.push(o)})}),M.concatBytes(...t)}var _0={};ot(_0,{createDelegation:()=>E0,getDelegator:()=>k0});function E0(e,t){let n=[];(t.kind||-1)>=0&&n.push(`kind=${t.kind}`),t.until&&n.push(`created_at<${t.until}`),t.since&&n.push(`created_at>${t.since}`);let r=n.join("&");if(r==="")throw new Error("refusing to create a delegation without any conditions");let s=Xt(it.encode(`nostr:delegation:${t.pubkey}:${r}`)),o=M.bytesToHex(Gn.signSync(s,e));return{from:Kf(e),to:t.pubkey,cond:r,sig:o}}function k0(e){let t=e.tags.find(a=>a[0]==="delegation"&&a.length>=4);if(!t)return null;let n=t[1],r=t[2],s=t[3],o=r.split("&");for(let a=0;a<o.length;a++){let[c,d,u]=o[a].split(/\b/);if(!(c==="kind"&&d==="="&&e.kind===parseInt(u))){if(c==="created_at"&&d==="<"&&e.created_at<parseInt(u))continue;if(c==="created_at"&&d===">"&&e.created_at>parseInt(u))continue;return null}}let i=Xt(it.encode(`nostr:delegation:${e.pubkey}:${r}`));return Gn.verifySync(s,i,n)?n:null}M.hmacSha256Sync=(e,...t)=>On(Xt,e,M.concatBytes(...t));M.sha256Sync=(...e)=>Xt(M.concatBytes(...e));const tn=(e,t)=>n=>{const r=new Promise((s,o)=>{setTimeout(()=>{const i=t!=null?`TimeoutError: ${t}`:"TimeoutError";o(new Error(i))},e)});return Promise.race([n,r])},S0=()=>{let e,t;const n=new Promise((r,s)=>{e=r,t=s});if(e==null||t==null)throw new Error("PromiseWithCallbacks failed to extract callbacks");return{promise:n,resolve:e,reject:t}},A0=e=>{const t=Z(e),n=Z(()=>t().batchSize??100),r=Z(()=>t().interval??2e3),[s,o]=X(0),[i,a]=X([]);let c;const d=()=>{const{executor:g}=t(),m=i();m.length>0&&(a([]),g(m)),c!=null&&clearTimeout(c),c=void 0},u=()=>{const g=s();return o(m=>m+1),g},l=()=>{c==null&&(c=setTimeout(()=>{d()},r()))},h=g=>{i().length<n()?a(m=>[...m,g]):(d(),a([g]))},f=g=>{a(m=>m.filter($=>$.id!==g))};return{exec:async(g,m)=>{const{promise:$,resolve:x,reject:y}=S0(),b=u();return h({id:b,args:g,resolve:x,reject:y}),l(),m?.addEventListener("abort",()=>{f(b),y(new Error("AbortError"))}),$}}},Je=e=>({get rawEvent(){return e},get id(){return e.id},get pubkey(){return e.pubkey},get createdAt(){return e.created_at},get content(){return e.content},createdAtAsDate(){return new Date(e.created_at*1e3)},taggedUsers(){const t=new Set;return e.tags.forEach(([n,r])=>{n==="p"&&t.add(r)}),Array.from(t)},taggedEvents(){const t=e.tags.map((r,s)=>[r,s]).filter(([[r]])=>r==="e"),n=(r,s)=>{if(e.kind===1)return r==="root"||r==="reply"||r==="mention"?r:t.length===1?"reply":s===0?"root":t.length===2||s===t.length-1?"reply":"mention"};return t.map(([[,r,s,o],i],a)=>({id:r,relayUrl:s,marker:n(o,a),index:i}))},replyingToEvent(){return this.taggedEvents().find(({marker:t})=>t==="reply")},rootEvent(){return this.taggedEvents().find(({marker:t})=>t==="root")},mentionedEvents(){return this.taggedEvents().filter(({marker:t})=>t==="mention")},mentionedPubkeys(){return Nr(e.tags.filter(([t])=>t==="p").map(t=>t[1]))},mentionedPubkeysWithoutAuthor(){return this.mentionedPubkeys().filter(t=>t!==e.pubkey)},contentWarning(){const t=e.tags.find(([r])=>r==="content-warning");return t==null?{contentWarning:!1}:{contentWarning:!0,reason:(t[1]?.length??0)>0?t[1]:void 0}},containsEventMention(t){const n=e.tags.findIndex(([r,s])=>r==="e"&&s===t);return n<0?!1:this.containsEventMentionIndex(n)},containsEventMentionIndex(t){return t<0||t>=e.tags.length?!1:e.content.includes(`#[${t}]`)}}),na=()=>{const e=["wss://relay.damus.io","wss://nos.lol","wss://relay.snort.social","wss://relay.current.fyi"];return navigator.language==="ja"&&e.push("wss://nostr.h3z.jp","wss://relay.nostr.wirednet.jp","wss://relay-jp.nostr.wirednet.jp","wss://nostr.holybea.com","wss://nostr-relay.nokotaro.com"),{relayUrls:e,dateFormat:"relative",keepOpenPostForm:!1,showImage:!0}},T0=e=>JSON.stringify(e),C0=e=>({...na(),...JSON.parse(e)}),I0=Wa(()=>window.localStorage,T0,C0),[H0,ur]=qa("RabbitConfig",na(),I0),Se=()=>({config:()=>H0,setConfig:ur,addRelay:n=>{ur("relayUrls",r=>[...r,n])},removeRelay:n=>{ur("relayUrls",r=>r.filter(s=>s!==n))}}),[L0]=X(new r0),Yn=()=>L0;let Cr=0;setInterval(()=>console.log("batchSub",Cr),1e3);const{exec:nn}=A0(()=>({interval:2e3,batchSize:100,executor:e=>{const t=new Map,n=new Map,r=new Map,s=new Map,o=new Map;e.forEach(y=>{if(y.args.type==="Profile"){const b=t.get(y.args.pubkey)??[];t.set(y.args.pubkey,[...b,y])}else if(y.args.type==="TextNote"){const b=n.get(y.args.eventId)??[];n.set(y.args.eventId,[...b,y])}else if(y.args.type==="Reactions"){const b=r.get(y.args.mentionedEventId)??[];r.set(y.args.mentionedEventId,[...b,y])}else if(y.args.type==="DeprecatedReposts"){const b=s.get(y.args.mentionedEventId)??[];s.set(y.args.mentionedEventId,[...b,y])}else if(y.args.type==="Followings"){const b=o.get(y.args.pubkey)??[];o.set(y.args.pubkey,[...b,y])}});const i=[...t.keys()],a=[...n.keys()],c=[...r.keys()],d=[...s.keys()],u=[...o.keys()],l=[];if(i.length>0&&l.push({kinds:[le.Metadata],authors:i}),a.length>0&&l.push({kinds:[le.Text],ids:a}),c.length>0&&l.push({kinds:[le.Reaction],"#e":c}),d.length>0&&l.push({kinds:[6],"#e":d}),u.length>0&&l.push({kinds:[le.Contacts],authors:u}),l.length===0)return;const h=new Map,f=(y,b)=>{y.forEach(w=>{const E=h.get(w.id)??ja(()=>X({events:[],completed:!1}));h.set(w.id,E);const[B,A]=E;A(R=>({...R,events:[...R.events,b]})),w.resolve(B)})},p=()=>({events:[],completed:!0}),g=()=>{e.forEach(y=>{const b=h.get(y.id);if(b!=null){const w=b[1];w(E=>({...E,completed:!0}))}else y.resolve(p)})},{config:m}=Se(),x=Yn()().sub(m().relayUrls,l);Cr+=1,x.on("event",y=>{if(y.kind===le.Metadata){const b=t.get(y.pubkey)??[];f(b,y)}else if(y.kind===le.Text){const b=n.get(y.id)??[];f(b,y)}else if(y.kind===le.Reaction)Je(y).taggedEvents().forEach(w=>{const E=w.id,B=r.get(E)??[];f(B,y)});else if(y.kind===6)Je(y).taggedEvents().forEach(w=>{const E=w.id,B=s.get(E)??[];f(B,y)});else if(y.kind===le.Contacts){const b=o.get(y.pubkey)??[];f(b,y)}}),x.on("eose",()=>{g(),x.unsub(),Cr-=1})}})),ra=e=>e.length===0?null:e.reduce((t,n)=>t.created_at>n.created_at?t:n),rn=e=>{const t=Z(e),n=et(),r=Vt(()=>["useProfile",t()],({queryKey:o,signal:i})=>{const[,a]=o;if(a==null)return Promise.resolve(null);const{pubkey:c}=a;if(c.startsWith("npub1"))return Promise.resolve(null);const d=nn({type:"Profile",pubkey:c},i).then(u=>{const l=()=>{const h=ra(u().events);if(h==null)throw new Error(`profile not found: ${c}`);return h};return Mn(u).subscribe(()=>{try{n.setQueryData(o,l())}catch(h){console.error("updating profile error",h)}}),l()});return tn(15e3,`useProfile: ${c}`)(d)},{staleTime:5*60*1e3,cacheTime:24*60*60*1e3});return{profile:Z(()=>{if(r.data==null)return null;const{content:o}=r.data;if(o==null||o.length===0)return null;try{return JSON.parse(o)}catch(i){return console.error("failed to parse profile (kind 0): ",i,o),null}}),query:r}},sa=e=>{const t=Z(e);et();const n=Vt(()=>["useTextNote",t()],({queryKey:s,signal:o})=>{const[,i]=s;if(i==null)return null;const{eventId:a}=i,c=nn({type:"TextNote",eventId:a},o).then(d=>{const u=d().events[0];if(u==null)throw new Error(`event not found: ${a}`);return u});return tn(15e3,`useTextNote: ${a}`)(c)},{staleTime:4*60*60*1e3,cacheTime:4*60*60*1e3});return{event:()=>n.data,query:n}},B0=e=>{const t=et(),n=Z(e),r=Z(()=>["useReactions",n()]),s=Vt(r,({queryKey:d,signal:u})=>{const[,l]=d;if(l==null)return[];const{eventId:h}=l,f=nn({type:"Reactions",mentionedEventId:h},u).then(p=>{const g=()=>p().events;return Mn(p).subscribe(()=>{t.setQueryData(d,g())}),g()});return tn(15e3,`useReactions: ${h}`)(f)},{staleTime:1*60*1e3,cacheTime:4*60*60*1e3}),o=()=>s.data??[];return{reactions:o,reactionsGroupedByContent:()=>{const d=new Map;return o().forEach(u=>{const l=d.get(u.content)??[];l.push(u),d.set(u.content,l)}),d},isReactedBy:d=>o().findIndex(u=>u.pubkey===d)!==-1,invalidateReactions:()=>t.invalidateQueries(r()),query:s}},R0=e=>{const t=et(),n=Z(e),r=Z(()=>["useDeprecatedReposts",n()]),s=Vt(r,({queryKey:c,signal:d})=>{const[,u]=c;if(u==null)return[];const{eventId:l}=u,h=nn({type:"DeprecatedReposts",mentionedEventId:l},d).then(f=>{const p=()=>f().events;return Mn(f).subscribe(()=>{t.setQueryData(c,p())}),p()});return tn(15e3,`useDeprecatedReposts: ${l}`)(h)},{staleTime:1*60*1e3,cacheTime:4*60*60*1e3}),o=()=>s.data??[];return{reposts:o,isRepostedBy:c=>o().findIndex(d=>d.pubkey===c)!==-1,invalidateDeprecatedReposts:()=>t.invalidateQueries(r()),query:s}},O0=e=>{const t=et(),n=Z(e),s=Vt(()=>["useFollowings",n()],({queryKey:a,signal:c})=>{const[,d]=a;if(d==null)return Promise.resolve(null);const{pubkey:u}=d,l=nn({type:"Followings",pubkey:u},c).then(h=>{const f=()=>{const p=ra(h().events);if(p==null)throw new Error(`followings not found: ${u}`);return p};return Mn(h).subscribe(()=>{try{t.setQueryData(a,f())}catch(p){console.error("updating followings error",p)}}),f()});return tn(15e3,`useFollowings: ${u}`)(l)},{staleTime:5*60*1e3,cacheTime:4*60*60*1e3,refetchOnWindowFocus:!1}),o=()=>{if(s.data==null)return[];const a=s.data,c=[];return a.tags.forEach(d=>{const[u,l,h,f]=d;if(!d.every(g=>typeof g=="string")||u!=="p")return;const p={pubkey:l,petname:f};h!=null&&h.length>0&&(p.mainRelayUrl=h),c.push(p)}),c};return{followings:o,followingPubkeys:()=>o().map(a=>a.pubkey),query:s}},Js=new TextDecoder("utf-8");new TextEncoder;const oa=5e3;function U0(e){let{prefix:t,words:n}=ie.decode(e,oa),r=new Uint8Array(ie.fromWords(n));if(t==="nprofile"){let s=eo(r);if(!s[0]?.[0])throw new Error("missing TLV 0 for nprofile");if(s[0][0].length!==32)throw new Error("TLV 0 should be 32 bytes");return{type:"nprofile",data:{pubkey:M.bytesToHex(s[0][0]),relays:s[1].map(o=>Js.decode(o))}}}if(t==="nevent"){let s=eo(r);if(!s[0]?.[0])throw new Error("missing TLV 0 for nevent");if(s[0][0].length!==32)throw new Error("TLV 0 should be 32 bytes");return{type:"nevent",data:{id:M.bytesToHex(s[0][0]),relays:s[1].map(o=>Js.decode(o))}}}if(t==="nsec"||t==="npub"||t==="note")return{type:t,data:M.bytesToHex(r)};throw new Error(`unknown prefix ${t}`)}function eo(e){let t={},n=e;for(;n.length>0;){let r=n[0],s=n[1],o=n.slice(2,2+s);n=n.slice(2+s),!(o.length<s)&&(t[r]=t[r]||[],t[r].push(o))}return t}function P0(e){return ia("npub",e)}function M0(e){return ia("note",e)}function ia(e,t){let n=M.hexToBytes(t),r=ie.toWords(n);return ie.encode(e,r,oa)}const Jn=e=>{try{return P0(e)}catch{return console.error("failed to encode pubkey into npub",e),e}},ns=e=>{const{profile:t}=rn(()=>({pubkey:e.pubkey}));return v(xt,{get fallback(){return Jn(e.pubkey)},get children(){return[v(pe,{get when(){return(t()?.display_name?.length??0)>0},get children(){return t()?.display_name}}),v(pe,{get when(){return(t()?.name?.length??0)>0},get children(){return["@",Z(()=>t()?.name)]}})]}})},dr=()=>Math.floor(Date.now()/1e3),N0=(e,t)=>new Promise((n,r)=>{e.on("ok",()=>{console.log(`${t} has accepted our event`),n()}),e.on("failed",s=>{console.log(`failed to publish to ${t}: ${s}`),r(s)})}),aa=()=>{const e=Yn(),t=async(r,s)=>{const o={...s};if(o.id=Zi(o),window.nostr==null)throw new Error("NIP-07 implementation not found");const i=await window.nostr.signEvent(o);return r.map(async a=>{const d=(await e().ensureRelay(a)).publish(i);return N0(d,a)})};return{publishTextNote:({relayUrls:r,pubkey:s,content:o,tags:i,contentWarning:a,notifyPubkeys:c,rootEventId:d,mentionEventIds:u,replyEventId:l})=>{const h=c?.map($=>["p",$])??[],f=[];d!=null&&f.push(["e",d,"","root"]),u?.forEach($=>f.push(["e",$,"","mention"])),l!=null&&f.push(["e",l,"","reply"]);const p=i!=null?[...i]:[];a!=null&&o.length>0&&p.push(["content-warning",a]);const g=[...f,...h,...p],m={kind:1,pubkey:s,created_at:dr(),tags:g,content:o};return t(r,m)},publishReaction({relayUrls:r,pubkey:s,eventId:o,content:i,notifyPubkey:a}){const c={kind:7,pubkey:s,created_at:dr(),tags:[["e",o,""],["p",a]],content:i};return console.log(c),t(r,c)},publishDeprecatedRepost({relayUrls:r,pubkey:s,eventId:o,notifyPubkey:i}){const a={kind:6,pubkey:s,created_at:dr(),tags:[["e",o,""],["p",i]],content:""};return t(r,a)}}};let hr=!1;const[fr,D0]=X(void 0),rs=()=>(tt(()=>{let e=0;const t=setInterval(()=>{if(e>=5){if(clearInterval(t),fr()==null&&!hr)throw window.nostr==null?new Error("Failed to obtain public key: Timeout. window.nostr is not defined."):new Error("Failed to obtain public key: Timeout");return}window.nostr!=null&&fr()==null&&!hr&&(hr=!0,window.nostr.getPublicKey().then(n=>D0(n)).catch(n=>console.error("failed to obtain public key: ",n))),e+=1},1e3)}),fr),F0=async e=>{const t=new FormData;t.set("fileToUpload",e),t.set("img_url",""),t.set("submit","Upload");const n=await fetch("https://nostr.build/api/upload/uploadapi.php",{method:"POST",headers:{Accept:"application/json"},mode:"cors",body:t});if(!n.ok)throw new Error("failed to post image: status code was not 2xx");return{imageUrl:await n.json()}},j0=e=>t=>Promise.allSettled(t.map(n=>e(n))),z0=S("<div>に返信</div>"),K0=S('<input type="text" class="rounded" placeholder="警告の理由" maxlength="32">'),G0=S('<div class="flex-1"><button class="h-5 w-5 text-stone-500"></button></div>'),W0=S('<div class="p-1"><form class="flex flex-col gap-1"><textarea name="text" class="min-h-[40px] rounded border-none" rows="4"></textarea><div class="flex items-end justify-end gap-1"><button class="flex items-center justify-center rounded p-2 text-xs font-bold text-white" type="button" aria-label="コンテンツ警告を設定" title="コンテンツ警告を設定"><span>CW</span></button><button class="rounded bg-primary p-2 font-bold text-white" type="button" title="画像を投稿" aria-label="画像を投稿"></button><button class="rounded bg-primary p-2 font-bold text-white" type="submit" aria-label="投稿" title="投稿"></button></div><input class="rounded bg-primary" type="file" hidden name="image" accept="image/jpeg,image/png,image/gif,image/webp"></form></div>'),q0=e=>{switch(e){case"reply":return"返信を投稿";case"normal":default:return"いまどうしてる？"}},ca=e=>{let t,n;const[r,s]=X(""),[o,i]=X(!1),[a,c]=X(""),d=()=>{s(""),c(""),i(!1)},u=()=>{t?.blur(),d(),e.onClose()},{config:l}=Se(),h=rs(),f=aa(),p=()=>e.replyTo&&Je(e.replyTo),g=()=>e.mode??"normal",m=Sn({mutationKey:["publishTextNote"],mutationFn:f.publishTextNote.bind(f),onSuccess:()=>{console.log("succeeded to post"),d(),e.onPost?.()},onError:L=>{console.error("error",L)}}),$=()=>{t!=null&&(t.style.height="auto",t.style.height=`${t.scrollHeight}px`)},x=Sn({mutationKey:["uploadFiles"],mutationFn:L=>j0(F0)(L).then(F=>{F.forEach(Q=>{Q.status==="fulfilled"?(console.log("succeeded to upload",Q),s(qe=>`${qe} ${Q.value.imageUrl}`),$()):console.error("failed to upload",Q)})}).catch(F=>console.error(F))}),y=Z(()=>p()?.mentionedPubkeysWithoutAuthor()??[]),b=L=>{if(e.replyTo!==void 0)return Nr([e.replyTo.pubkey,...y(),L])},w=()=>{if(r().length===0||m.isLoading)return;const L=h();if(L==null){console.error("pubkey is not available");return}let F={relayUrls:l().relayUrls,pubkey:L,content:r()};p()!=null&&(F={...F,notifyPubkeys:b(L),rootEventId:p()?.rootEvent()?.id??p()?.id,replyEventId:p()?.id}),o()&&(F={...F,contentWarning:a()}),m.mutate(F)},E=L=>{s(L.currentTarget.value),$()},B=L=>{L.preventDefault(),w()},A=L=>{L.key==="Enter"&&(L.ctrlKey||L.metaKey)?w():L.key==="Escape"&&(t?.blur(),u())},R=L=>{L.preventDefault();const F=[...L.currentTarget.files??[]];x.mutate(F),L.currentTarget.value=""},C=L=>{if(L.preventDefault(),x.isLoading)return;const F=[...L?.dataTransfer?.files??[]];x.mutate(F)},H=L=>{L.preventDefault()},I=()=>r().trim().length===0||m.isLoading||x.isLoading,O=()=>x.isLoading;return tt(()=>{setTimeout(()=>{t?.click(),t?.focus()},50)}),(()=>{const L=W0.cloneNode(!0),F=L.firstChild,Q=F.firstChild,qe=Q.nextSibling,te=qe.firstChild,ne=te.nextSibling,ye=ne.nextSibling,V=qe.nextSibling;_(L,v(z,{get when(){return y().length>0},get children(){const T=z0.cloneNode(!0),J=T.firstChild;return _(T,v(nt,{get each(){return y()},children:me=>[v(ns,{pubkey:me})," "]}),J),T}}),F),F.addEventListener("submit",B),_(F,v(z,{get when(){return o()},get children(){const T=K0.cloneNode(!0);return T.$$input=J=>c(J.currentTarget.value),ee(()=>T.value=a()),T}}),Q),Q.addEventListener("drop",C),Q.addEventListener("dragover",H),Q.$$keydown=A,Q.$$input=E,_n(T=>{t=T,e.textAreaRef?.(T)},Q),_(qe,v(z,{get when(){return g()==="reply"},get children(){const T=G0.cloneNode(!0),J=T.firstChild;return J.$$click=()=>u(),_(J,v(Kn,{})),T}}),te),te.$$click=()=>i(T=>!T),ne.$$click=()=>n?.click(),_(ne,v(Id,{})),_(ye,v(Td,{})),V.addEventListener("change",R);const he=n;return typeof he=="function"?_n(he,V):n=V,ee(T=>{const J=q0(g()),me=!o(),at=!!o(),on=g()==="normal",It=g()==="normal",G=g()==="reply",Ht=g()==="reply",Lt=!!O(),Bt=!O(),Rt=g()==="normal",Ot=g()==="normal",Ut=g()==="reply",ds=g()==="reply",hs=O(),fs=!!I(),ps=!I(),gs=g()==="normal",bs=g()==="normal",ys=g()==="reply",ms=g()==="reply",vs=I();return J!==T._v$&&ge(Q,"placeholder",T._v$=J),me!==T._v$2&&te.classList.toggle("bg-rose-300",T._v$2=me),at!==T._v$3&&te.classList.toggle("bg-rose-400",T._v$3=at),on!==T._v$4&&te.classList.toggle("h-8",T._v$4=on),It!==T._v$5&&te.classList.toggle("w-8",T._v$5=It),G!==T._v$6&&te.classList.toggle("h-7",T._v$6=G),Ht!==T._v$7&&te.classList.toggle("w-7",T._v$7=Ht),Lt!==T._v$8&&ne.classList.toggle("bg-primary-disabled",T._v$8=Lt),Bt!==T._v$9&&ne.classList.toggle("bg-primary",T._v$9=Bt),Rt!==T._v$10&&ne.classList.toggle("h-8",T._v$10=Rt),Ot!==T._v$11&&ne.classList.toggle("w-8",T._v$11=Ot),Ut!==T._v$12&&ne.classList.toggle("h-7",T._v$12=Ut),ds!==T._v$13&&ne.classList.toggle("w-7",T._v$13=ds),hs!==T._v$14&&(ne.disabled=T._v$14=hs),fs!==T._v$15&&ye.classList.toggle("bg-primary-disabled",T._v$15=fs),ps!==T._v$16&&ye.classList.toggle("bg-primary",T._v$16=ps),gs!==T._v$17&&ye.classList.toggle("h-8",T._v$17=gs),bs!==T._v$18&&ye.classList.toggle("w-8",T._v$18=bs),ys!==T._v$19&&ye.classList.toggle("h-7",T._v$19=ys),ms!==T._v$20&&ye.classList.toggle("w-7",T._v$20=ms),vs!==T._v$21&&(ye.disabled=T._v$21=vs),T},{_v$:void 0,_v$2:void 0,_v$3:void 0,_v$4:void 0,_v$5:void 0,_v$6:void 0,_v$7:void 0,_v$8:void 0,_v$9:void 0,_v$10:void 0,_v$11:void 0,_v$12:void 0,_v$13:void 0,_v$14:void 0,_v$15:void 0,_v$16:void 0,_v$17:void 0,_v$18:void 0,_v$19:void 0,_v$20:void 0,_v$21:void 0}),ee(()=>Q.value=r()),L})()};$e(["input","keydown","click"]);const Q0=S('<div class="absolute top-0 left-0 flex h-screen w-screen cursor-default place-content-center place-items-center bg-black/25"></div>'),la=e=>{let t;const n=r=>{r.target===t&&e.onClose?.()};return(()=>{const r=Q0.cloneNode(!0);r.$$click=n;const s=t;return typeof s=="function"?_n(s,r):t=r,_(r,()=>e.children),r})()};$e(["click"]);const V0=S('<div><h3 class="font-bold">リレー</h3><ul></ul><form class="flex gap-2"><input class="flex-1" type="text" name="relayUrl"><button type="submit" class="rounded bg-rose-300 p-2 font-bold text-white">追加</button></form></div>'),Z0=S('<li class="flex items-center"><div class="flex-1 truncate"></div><button class="h-3 w-3 shrink-0"></button></li>'),X0=S('<div><h3 class="font-bold">時刻の表記</h3><div class="flex flex-col justify-evenly gap-2 sm:flex-row"></div></div>'),Y0=S('<div class="flex flex-1 flex-row items-center gap-1 sm:flex-col"><button type="button" class="w-48 rounded border border-rose-300 p-2 font-bold sm:w-full"></button><div class="text-xs"></div></div>'),J0=S('<button class="flex h-[24px] w-[48px] items-center rounded-full border border-primary px-1"><span class="m-[-2px] inline-block h-5 w-5 rounded-full border border-primary bg-white shadow"></span></button>'),ep=S('<div><h3 class="font-bold">その他</h3><div class="flex flex-col justify-evenly gap-2"><div class="flex w-full"><div class="flex-1">投稿欄を開いたままにする</div></div><div class="flex w-full"><div class="flex-1">画像をデフォルトで表示する</div></div></div></div>'),tp=S('<div class="max-h-[90vh] w-[640px] max-w-[100vw] overflow-y-scroll rounded bg-white p-4 shadow"><div class="relative"><div class="flex flex-col gap-1"><h2 class="flex-1 text-center font-bold">設定</h2><button class="absolute top-1 right-0 h-4 w-4"></button></div></div></div>'),np=()=>{const{config:e,addRelay:t,removeRelay:n}=Se(),[r,s]=X(""),o=i=>{i.preventDefault(),r().length!==0&&(t(r()),s(""))};return(()=>{const i=V0.cloneNode(!0),a=i.firstChild,c=a.nextSibling,d=c.nextSibling,u=d.firstChild;return _(c,v(nt,{get each(){return e().relayUrls},children:l=>(()=>{const h=Z0.cloneNode(!0),f=h.firstChild,p=f.nextSibling;return _(f,l),p.$$click=()=>n(l),_(p,v(Kn,{})),h})()})),d.addEventListener("submit",o),u.addEventListener("change",l=>s(l.currentTarget.value)),ee(()=>u.value=r()),i})()},rp=[{id:"relative",name:"相対表記",example:"7秒前"},{id:"absolute-short",name:"絶対表記 (短形式)",example:"昨日 23:55"},{id:"absolute-long",name:"絶対表記 (長形式)",example:"2020/11/8 21:02:53"}],sp=()=>{const{config:e,setConfig:t}=Se(),n=r=>{t(s=>({...s,dateFormat:r}))};return(()=>{const r=X0.cloneNode(!0),s=r.firstChild,o=s.nextSibling;return _(o,v(nt,{each:rp,children:({id:i,name:a,example:c})=>(()=>{const d=Y0.cloneNode(!0),u=d.firstChild,l=u.nextSibling;return u.$$click=()=>n(i),_(u,a),_(l,c),ee(h=>{const f=e().dateFormat===i,p=e().dateFormat===i,g=e().dateFormat!==i,m=e().dateFormat!==i;return f!==h._v$&&u.classList.toggle("bg-rose-300",h._v$=f),p!==h._v$2&&u.classList.toggle("text-white",h._v$2=p),g!==h._v$3&&u.classList.toggle("bg-white",h._v$3=g),m!==h._v$4&&u.classList.toggle("text-rose-300",h._v$4=m),h},{_v$:void 0,_v$2:void 0,_v$3:void 0,_v$4:void 0}),d})()})),r})()},to=e=>(()=>{const t=J0.cloneNode(!0);return t.$$click=n=>e.onClick(n),ee(n=>{const r=!e.value,s=!e.value,o=!!e.value,i=!!e.value,a=e.value;return r!==n._v$5&&t.classList.toggle("bg-white",n._v$5=r),s!==n._v$6&&t.classList.toggle("justify-start",n._v$6=s),o!==n._v$7&&t.classList.toggle("bg-rose-300",n._v$7=o),i!==n._v$8&&t.classList.toggle("justify-end",n._v$8=i),a!==n._v$9&&ge(t,"area-label",n._v$9=a),n},{_v$5:void 0,_v$6:void 0,_v$7:void 0,_v$8:void 0,_v$9:void 0}),t})(),op=()=>{const{config:e,setConfig:t}=Se(),n=()=>{t(s=>({...s,keepOpenPostForm:!(s.keepOpenPostForm??!1)}))},r=()=>{t(s=>({...s,showImage:!(s.showImage??!0)}))};return(()=>{const s=ep.cloneNode(!0),o=s.firstChild,i=o.nextSibling,a=i.firstChild;a.firstChild;const c=a.nextSibling;return c.firstChild,_(a,v(to,{get value(){return e().keepOpenPostForm},onClick:()=>n()}),null),_(c,v(to,{get value(){return e().showImage},onClick:()=>r()}),null),s})()},ip=e=>v(la,{get onClose(){return e.onClose},get children(){const t=tp.cloneNode(!0),n=t.firstChild,r=n.firstChild,s=r.firstChild,o=s.nextSibling;return o.$$click=()=>e.onClose?.(),_(o,v(Kn,{})),_(t,v(np,{}),null),_(t,v(sp,{}),null),_(t,v(op,{}),null),t}});$e(["click"]);const ap=S('<div class="flex shrink-0 flex-row border-r bg-sidebar-bg"><div class="flex w-14 flex-auto flex-col items-center gap-3 border-r border-rose-200 pt-5"><div class="flex flex-col items-center gap-3"><button class="h-9 w-9 rounded-full border border-primary bg-primary p-2 text-2xl font-bold text-white"></button></div><div class="grow"></div><div><button class="h-12 w-12 p-3 text-primary"></button></div></div><div></div></div>'),cp=()=>{let e;const{config:t}=Se(),[n,r]=X(!1),[s,o]=X(!1),i=()=>{e?.focus(),e?.click()},a=()=>r(!0),c=()=>r(!1),d=()=>r(u=>!u);return $r(()=>({commandType:"openPostForm",handler:()=>{a(),e!=null&&setTimeout(()=>i(),100)}})),(()=>{const u=ap.cloneNode(!0),l=u.firstChild,h=l.firstChild,f=h.firstChild,p=h.nextSibling,g=p.nextSibling,m=g.firstChild,$=l.nextSibling;return f.$$click=()=>d(),_(f,v(Ed,{})),m.$$click=()=>o(x=>!x),_(m,v(Sd,{})),_($,v(ca,{textAreaRef:x=>{e=x},onClose:c})),_(u,v(z,{get when(){return s()},get children(){return v(ip,{onClose:()=>o(!1)})}}),null),ee(x=>{const y=!!(n()||t().keepOpenPostForm),b=!(n()||t().keepOpenPostForm);return y!==x._v$&&$.classList.toggle("static",x._v$=y),b!==x._v$2&&$.classList.toggle("hidden",x._v$2=b),x},{_v$:void 0,_v$2:void 0}),u})()};$e(["click"]);const lp=S('<li class="block shrink-0 overflow-hidden border-b p-1"></li>'),ss=e=>(()=>{const t=lp.cloneNode(!0);return _(t,()=>e.children),t})(),up=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"></path></svg>'),dp=(e={})=>(()=>{const t=up.cloneNode(!0);return de(t,e,!0,!0),t})(),hp=S('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001z"></path></svg>'),ua=(e={})=>(()=>{const t=hp.cloneNode(!0);return de(t,e,!0,!0),t})(),fp=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 12c0-1.232-.046-2.453-.138-3.662a4.006 4.006 0 0 0-3.7-3.7 48.678 48.678 0 0 0-7.324 0 4.006 4.006 0 0 0-3.7 3.7c-.017.22-.032.441-.046.662M19.5 12l3-3m-3 3-3-3m-12 3c0 1.232.046 2.453.138 3.662a4.006 4.006 0 0 0 3.7 3.7 48.656 48.656 0 0 0 7.324 0 4.006 4.006 0 0 0 3.7-3.7c.017-.22.032-.441.046-.662M4.5 12l3 3m-3-3-3 3"></path></svg>'),da=(e={})=>(()=>{const t=fp.cloneNode(!0);return de(t,e,!0,!0),t})(),pp=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 0 1 1.037-.443 48.282 48.282 0 0 0 5.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"></path></svg>'),gp=(e={})=>(()=>{const t=pp.cloneNode(!0);return de(t,e,!0,!0),t})(),bp=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm6 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm6 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0z"></path></svg>'),yp=(e={})=>(()=>{const t=bp.cloneNode(!0);return de(t,e,!0,!0),t})(),ha=e=>{const{profile:t}=rn(()=>({pubkey:e.pubkey}));return v(z,{get when(){return(t()?.name?.length??0)>0},get fallback(){return`@${Jn(e.pubkey)}`},get children(){return["@",Z(()=>t()?.name??e.pubkey)]}})},mp=S("<div></div>"),vp=S('<button class="text-xs text-stone-600 hover:text-stone-800">隠す</button>'),wp=S("<br>"),xp=S("<span>理由: </span>"),$p=S('<button class="mt-2 w-full rounded border p-2 text-center text-xs text-stone-600 shadow-sm hover:shadow">表示するにはクリック</button>'),_p=e=>{const[t,n]=X(!1);return v(z,{get when(){return!e.contentWarning.contentWarning||t()},get fallback(){return(()=>{const r=$p.cloneNode(!0);return r.firstChild,r.$$click=()=>n(!0),_(r,v(z,{get when(){return e.contentWarning.reason!=null},get children(){return[wp.cloneNode(!0),(()=>{const s=xp.cloneNode(!0);return s.firstChild,_(s,()=>e.contentWarning.reason,null),s})()]}}),null),r})()},get children(){return[(()=>{const r=mp.cloneNode(!0);return _(r,()=>e.children),r})(),v(z,{get when(){return e.contentWarning.contentWarning},get children(){const r=vp.cloneNode(!0);return r.$$click=()=>n(!1),r}})]}})};$e(["click"]);const Ep=e=>{const t=[...e.content.matchAll(/(?:#\[(?<idx>\d+)\])/g),...e.content.matchAll(/#(?<hashtag>[^[-^`:-@!-/{-~\d\s][^[-^`:-@!-/{-~\s]+)/g),...e.content.matchAll(/(?<nip19>(npub|note|nprofile|nevent)1[ac-hj-np-z02-9]+)/gi),...e.content.matchAll(/(?<url>(https?|wss?):\/\/[-a-zA-Z0-9.]+(?:\/[-\w.@%:]+|\/)*(?:\?[-\w=.@%:&]*)?(?:#[-\w=.%:&]*)?)/g)].sort((o,i)=>o.index-i.index);let n=0;const r=[],s=o=>{if(o!=null&&n!==o){const a={type:"PlainText",content:e.content.slice(n,o)};r.push(a)}};if(t.forEach(o=>{const{index:i}=o;if(o.groups?.url&&i>=n){s(i);const a={type:"URL",content:o.groups?.url};r.push(a)}else if(o.groups?.idx&&i>=n){const a=parseInt(o.groups.idx,10),c=e.tags[a];if(c==null)return;s(i);const d=c[0];if(d==="p"){const u={type:"MentionedUser",tagIndex:a,content:o[0],pubkey:c[1]};r.push(u)}else if(d==="e"){const u=Je(e).taggedEvents().find(h=>h.index===a),l={type:"MentionedEvent",tagIndex:a,content:o[0],eventId:c[1],marker:u?.marker};r.push(l)}}else if(o.groups?.nip19&&i>=n){s(i);try{const a=U0(o[0]),c={type:"Bech32Entity",content:o[0],data:a};r.push(c)}catch{console.error(`failed to parse Bech32 entity (NIP-19) but ignore this: ${o[0]}`)}}else if(o.groups?.hashtag&&i>=n){s(i);const a=o.groups?.hashtag,c={type:"HashTag",content:o[0],tagName:a};r.push(c)}n=i+o[0].length}),n!==e.content.length){const i={type:"PlainText",content:e.content.slice(n)};r.push(i)}return r},kp=S("<span></span>"),Sp=e=>(()=>{const t=kp.cloneNode(!0);return _(t,()=>e.plainText.content),t})(),[Ap,pr]=X({type:"Closed"}),os=()=>({modalState:Ap,setModalState:pr,showProfile:n=>{pr({type:"Profile",pubkey:n})},closeModal:()=>{pr({type:"Closed"})}}),Tp=S('<button class="inline text-blue-500 underline"></button>'),Cp=e=>{const{showProfile:t}=os(),n=()=>{t(e.mentionedUser.pubkey)};return(()=>{const r=Tp.cloneNode(!0);return r.$$click=n,_(r,v(ha,{get pubkey(){return e.mentionedUser.pubkey}})),r})()};$e(["click"]);const Ae=e=>t=>e.some(n=>n==null)?null:t(e),Ip=S('<span class="text-blue-500 underline"></span>'),is=e=>(()=>{const t=Ip.cloneNode(!0);return _(t,()=>M0(e.eventId)),t})(),Hp=S('<div class="truncate">読み込み中 </div>'),er=e=>{const{event:t,query:n}=sa(()=>Ae([e.eventId])(([r])=>({eventId:r})));return v(xt,{fallback:"投稿が見つかりません",get children(){return[v(pe,{get when(){return t()},keyed:!0,children:r=>v(as,za({event:r},e))}),v(pe,{get when(){return n.isLoading&&e.eventId},keyed:!0,children:r=>(()=>{const s=Hp.cloneNode(!0);return s.firstChild,_(s,v(is,{eventId:r}),null),s})()})]}})},Lp=S('<div class="my-1 rounded border p-1"></div>'),Bp=e=>v(z,{get when(){return e.mentionedEvent.marker!=null&&e.mentionedEvent.marker.length>0},fallback:()=>v(is,{get eventId(){return e.mentionedEvent.eventId}}),get children(){const t=Lp.cloneNode(!0);return _(t,v(er,{get eventId(){return e.mentionedEvent.eventId},embedding:!1,actions:!1})),t}}),Rp=e=>/\.(jpeg|jpg|png|gif|webp)$/i.test(e.pathname),Op=e=>{if(e.host==="i.imgur.com"||e.host==="imgur.com"){const t=e.pathname.match(/^\/([a-zA-Z0-9]+)\.(jpg|jpeg|png|gif)/);if(t!=null){const n=new URL(e),r=t[1];return n.host="i.imgur.com",n.pathname=`${r}l.webp`,n}return e}if(e.host==="i.gyazo.com"){const t=new URL(e);return t.host="thumb.gyazo.com",t.pathname=`/thumb/640_w${e.pathname}`,t}return e},Up=S('<a class="my-2 block" target="_blank" rel="noopener noreferrer"><img class="inline-block max-h-64 max-w-full rounded object-contain shadow hover:shadow-md"></a>'),Pp=S('<button class="rounded bg-stone-300 p-3 text-xs text-stone-600 hover:shadow">画像を展開する</button>'),Mp=e=>{const[t,n]=X(e.initialHidden);return v(z,{get when(){return!t()},get fallback(){return(()=>{const r=Pp.cloneNode(!0);return r.$$click=()=>n(!1),r})()},get children(){const r=Up.cloneNode(!0),s=r.firstChild;return ee(o=>{const i=e.url,a=Op(new URL(e.url)).toString(),c=e.url;return i!==o._v$&&ge(r,"href",o._v$=i),a!==o._v$2&&ge(s,"src",o._v$2=a),c!==o._v$3&&ge(s,"alt",o._v$3=c),o},{_v$:void 0,_v$2:void 0,_v$3:void 0}),r}})};$e(["click"]);const Np=S('<div class="my-1 rounded border p-1"></div>'),no=S('<span class="text-blue-500 underline"></span>'),Dp=S('<a class="text-blue-500 underline" target="_blank" rel="noopener noreferrer"></a>'),Fp=e=>{const{config:t}=Se(),n=()=>Je(e.event);return v(nt,{get each(){return Ep(e.event)},children:r=>r.type==="PlainText"?v(Sp,{plainText:r}):r.type==="MentionedUser"?v(Cp,{mentionedUser:r}):r.type==="MentionedEvent"?e.embedding?v(Bp,{mentionedEvent:r}):v(is,{get eventId(){return r.eventId}}):r.type==="Bech32Entity"?r.data.type==="note"&&e.embedding?(()=>{const s=Np.cloneNode(!0);return _(s,v(er,{get eventId(){return r.data.data},actions:!1})),s})():(()=>{const s=no.cloneNode(!0);return _(s,()=>r.content),s})():r.type==="HashTag"?(()=>{const s=no.cloneNode(!0);return _(s,()=>r.content),s})():r.type==="URL"?Rp(new URL(r.content))?v(Mp,{get url(){return r.content},get initialHidden(){return!t().showImage||n().contentWarning().contentWarning||!e.embedding}}):(()=>{const s=Dp.cloneNode(!0);return _(s,()=>r.content),ee(()=>ge(s,"href",r.content)),s})():null})},fa=e=>{const[t,n]=X(new Date);return En(()=>{const r=setInterval(()=>{n(new Date)},e().interval);wt(()=>clearInterval(r))}),t},jp=e=>{switch(e.kind){case"now":return"now";case"seconds":return`${e.value}s`;case"minutes":return`${e.value}m`;case"hours":return`${e.value}h`;case"days":return`${e.value}d`;case"abs":default:return e.value.toLocaleDateString()}},ro=e=>`${e.getHours()}:${e.getMinutes().toString().padStart(2,"0")}`,zp=e=>{switch(e.kind){case"today":return e.value.toLocaleTimeString();case"yesterday":case"abs":default:return e.value.toLocaleDateString()}},Kp=e=>{switch(e.kind){case"today":return ro(e.value);case"yesterday":return`昨日 ${ro(e.value)}`;case"abs":default:return e.value.toLocaleString()}},Gp=(e,t)=>Math.round(Number(t)-Number(e))/1e3,Wp=(e,t)=>{const n=Gp(e,t);return n<10?{kind:"now"}:n<60?{kind:"seconds",value:Math.round(n)}:n<3600?{kind:"minutes",value:Math.round(n/60)}:n<86400?{kind:"hours",value:Math.round(n/3600)}:n<604800?{kind:"days",value:Math.round(n/86400)}:{kind:"abs",value:e}},so=(e,t)=>e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()&&e.getDate()===t.getDate(),qp=e=>new Date(+e-24*60*60*1e3),pa=(e,t,n)=>so(e,t)?n({kind:"today",value:e}):so(e,qp(t))?n({kind:"yesterday",value:e}):n({kind:"abs",value:e}),Qp=(e,t=new Date)=>pa(e,t,zp),Vp=(e,t=new Date)=>pa(e,t,Kp),oo=(e,t=new Date,n=jp)=>n(Wp(e,t)),io=fa(()=>({interval:7e3})),ao=fa(()=>({interval:60*1e3})),ga=()=>{const{config:e}=Se();return t=>{switch(e().dateFormat){case"absolute-long":return Qp(t,ao());case"absolute-short":return Vp(t,ao());case"relative":return oo(t,io());default:return oo(t,io())}}},Zp=S('<img alt="icon" class="h-10 w-10 rounded">'),Xp=S('<div class="author-name truncate pr-1 font-bold"></div>'),Yp=S('<div class="text-xs">への返信</div>'),Jp=S('<div class="content whitespace-pre-wrap break-all"></div>'),co=S('<div class="text-sm text-zinc-400"></div>'),eg=S('<div class="actions flex w-48 items-center justify-between gap-8 pt-1"><button class="h-4 w-4 shrink-0 text-zinc-400"></button><div class="flex shrink-0 items-center gap-1"><button class="h-4 w-4"></button></div><div class="flex shrink-0 items-center gap-1"><button class="h-4 w-4"></button></div><div><button class="h-4 w-4 text-zinc-400"></button></div></div>'),tg=S('<div class="nostr-textnote flex flex-col"><div class="flex w-full gap-1"><button class="author-icon h-10 w-10 shrink-0 overflow-hidden object-cover"></button><div class="min-w-0 flex-auto"><div class="flex justify-between gap-1 text-xs"><button class="author flex min-w-0 truncate"><div class="author-username truncate text-zinc-600"></div></button><div class="created-at shrink-0"></div></div></div></div></div>'),ng=S('<div class="mt-1 rounded border p-1"></div>'),rg=S('<button class="pr-1 text-blue-500 underline"></button>'),as=e=>{const{config:t}=Se(),n=ga(),r=rs(),{showProfile:s}=os(),[o,i]=X(!1),a=()=>i(!1),[c,d]=X(!1),u=Z(()=>Je(e.event)),l=()=>e.embedding??!0,h=()=>e.actions??!0,{profile:f}=rn(()=>({pubkey:e.event.pubkey})),{reactions:p,isReactedBy:g,invalidateReactions:m}=B0(()=>({eventId:e.event.id})),{reposts:$,isRepostedBy:x,invalidateDeprecatedReposts:y}=R0(()=>({eventId:e.event.id})),b=aa(),w=Sn({mutationKey:["publishReaction",u().id],mutationFn:b.publishReaction.bind(b),onSuccess:()=>{console.log("succeeded to publish reaction"),m().catch(O=>console.error("failed to refetch reactions",O))},onError:O=>{console.error("failed to publish reaction: ",O)}}),E=Sn({mutationKey:["publishDeprecatedRepost",u().id],mutationFn:b.publishDeprecatedRepost.bind(b),onSuccess:()=>{console.log("succeeded to publish deprecated reposts"),y().catch(O=>console.error("failed to refetch deprecated reposts",O))},onError:O=>{console.error("failed to publish deprecated repost: ",O)}}),B=Z(()=>g(r())),A=Z(()=>x(r())),R=()=>{const O=u().replyingToEvent();if(l()&&O!=null&&!u().containsEventMentionIndex(O.index))return O.id},C=()=>n(u().createdAtAsDate()),H=()=>{A()||Ae([r(),e.event.id])(([O,L])=>{E.mutate({relayUrls:t().relayUrls,pubkey:O,eventId:L,notifyPubkey:e.event.pubkey})})},I=()=>{B()||Ae([r(),e.event.id])(([O,L])=>{w.mutate({relayUrls:t().relayUrls,pubkey:O,content:"+",eventId:L,notifyPubkey:e.event.pubkey})})};return(()=>{const O=tg.cloneNode(!0),L=O.firstChild,F=L.firstChild,Q=F.nextSibling,qe=Q.firstChild,te=qe.firstChild,ne=te.firstChild,ye=te.nextSibling;return F.$$click=()=>s(u().pubkey),_(F,v(z,{get when(){return f()?.picture},get children(){const V=Zp.cloneNode(!0);return ee(()=>ge(V,"src",f()?.picture)),V}})),te.$$click=()=>s(u().pubkey),_(te,v(z,{get when(){return(f()?.display_name?.length??0)>0},get children(){const V=Xp.cloneNode(!0);return _(V,()=>f()?.display_name),V}}),ne),_(ne,v(z,{get when(){return f()?.name!=null},get fallback(){return`@${Jn(u().pubkey)}`},get children(){return["@",Z(()=>f()?.name)]}})),_(ye,C),_(Q,v(z,{get when(){return R()},keyed:!0,children:V=>(()=>{const he=ng.cloneNode(!0);return _(he,v(er,{eventId:V,actions:!1,embedding:!1})),he})()}),null),_(Q,v(z,{get when(){return u().mentionedPubkeys().length>0},get children(){const V=Yp.cloneNode(!0),he=V.firstChild;return _(V,v(nt,{get each(){return u().mentionedPubkeys()},children:T=>(()=>{const J=rg.cloneNode(!0);return J.$$click=()=>s(T),_(J,v(ha,{pubkey:T})),J})()}),he),V}}),null),_(Q,v(_p,{get contentWarning(){return u().contentWarning()},get children(){const V=Jp.cloneNode(!0);return _(V,v(Fp,{get event(){return e.event},get embedding(){return l()}})),V}}),null),_(Q,v(z,{get when(){return h()},get children(){const V=eg.cloneNode(!0),he=V.firstChild,T=he.nextSibling,J=T.firstChild,me=T.nextSibling,at=me.firstChild,on=me.nextSibling,It=on.firstChild;return he.$$click=()=>i(G=>!G),_(he,v(gp,{})),J.$$click=H,_(J,v(da,{})),_(T,v(z,{get when(){return $().length>0},get children(){const G=co.cloneNode(!0);return _(G,()=>$().length),G}}),null),at.$$click=I,_(at,v(z,{get when(){return B()},get fallback(){return v(dp,{})},get children(){return v(ua,{})}})),_(me,v(z,{get when(){return p().length>0},get children(){const G=co.cloneNode(!0);return _(G,()=>p().length),G}}),null),It.$$click=()=>d(G=>!G),_(It,v(yp,{})),ee(G=>{const Ht=!A(),Lt=!!(A()||E.isLoading),Bt=E.isLoading,Rt=!B(),Ot=!!(B()||w.isLoading),Ut=w.isLoading;return Ht!==G._v$&&T.classList.toggle("text-zinc-400",G._v$=Ht),Lt!==G._v$2&&T.classList.toggle("text-green-400",G._v$2=Lt),Bt!==G._v$3&&(J.disabled=G._v$3=Bt),Rt!==G._v$4&&me.classList.toggle("text-zinc-400",G._v$4=Rt),Ot!==G._v$5&&me.classList.toggle("text-rose-400",G._v$5=Ot),Ut!==G._v$6&&(at.disabled=G._v$6=Ut),G},{_v$:void 0,_v$2:void 0,_v$3:void 0,_v$4:void 0,_v$5:void 0,_v$6:void 0}),V}}),null),_(O,v(z,{get when(){return o()},get children(){return v(ca,{mode:"reply",get replyTo(){return e.event},onClose:a,onPost:a})}}),null),O})()};$e(["click"]);const ba=e=>v(ss,{get children(){return v(as,{get event(){return e.event}})}}),sg=S('<div class="flex content-center text-xs"><div class="h-5 w-5 shrink-0 pr-1 text-green-500" aria-hidden="true"></div><div class="flex-1 truncate break-all"> がリポスト</div><div></div></div>'),og=S('<div class="pt-1"></div>'),ya=e=>{const t=ga(),n=()=>e.event.tags.find(([s])=>s==="e")?.[1],r=Z(()=>Je(e.event));return v(ss,{get children(){return[(()=>{const s=sg.cloneNode(!0),o=s.firstChild,i=o.nextSibling,a=i.firstChild,c=i.nextSibling;return _(o,v(da,{})),_(i,v(ns,{get pubkey(){return e.event.pubkey}}),a),_(c,()=>t(r().createdAtAsDate())),s})(),(()=>{const s=og.cloneNode(!0);return _(s,v(er,{get eventId(){return n()}})),s})()]}})},ig=S("<div>unknown event</div>"),gr=e=>v(nt,{get each(){return e.events},children:t=>v(xt,{get fallback(){return ig.cloneNode(!0)},get children(){return[v(pe,{get when(){return t.kind===le.Text},get children(){return v(ba,{event:t})}}),v(pe,{get when(){return t.kind===6},get children(){return v(ya,{event:t})}})]}})}),ag=S('<span class="h-4 w-4 pt-[1px] text-rose-400"></span>'),cg=S('<img alt="icon" class="rounded">'),lg=S('<div class="flex gap-1 px-1 text-sm"><div class="notification-icon flex place-items-center"></div><div class="notification-user flex gap-1"><div class="author-icon h-5 w-5 shrink-0 overflow-hidden object-cover"></div><div><span class="truncate whitespace-pre-wrap break-all font-bold"></span> がリアクション</div></div></div>'),ug=S('<div class="notification-event py-1"></div>'),dg=S('<div class="truncate">loading </div>'),hg=e=>{const t=()=>e.event.tags.find(([i])=>i==="e")?.[1],{profile:n}=rn(()=>({pubkey:e.event.pubkey})),{event:r,query:s}=sa(()=>({eventId:t()})),o=()=>s.isSuccess&&r()==null;return v(z,{get when(){return!o()},get children(){return v(ss,{get children(){return[(()=>{const i=lg.cloneNode(!0),a=i.firstChild,c=a.nextSibling,d=c.firstChild,u=d.nextSibling,l=u.firstChild;return _(a,v(xt,{get fallback(){return e.event.content},get children(){return v(pe,{get when(){return e.event.content==="+"},get children(){const h=ag.cloneNode(!0);return _(h,v(ua,{})),h}})}})),_(d,v(z,{get when(){return n()?.picture!=null},get children(){const h=cg.cloneNode(!0);return ee(()=>ge(h,"src",n()?.picture)),h}})),_(l,v(ns,{get pubkey(){return e.event.pubkey}})),i})(),(()=>{const i=ug.cloneNode(!0);return _(i,v(z,{get when(){return r()},get fallback(){return(()=>{const a=dg.cloneNode(!0);return a.firstChild,_(a,t,null),a})()},keyed:!0,children:a=>v(as,{event:a})})),i})()]}})}})},fg=S("<div>unknown event</div>"),lo=e=>v(nt,{get each(){return e.events},children:t=>v(xt,{get fallback(){return fg.cloneNode(!0)},get children(){return[v(pe,{get when(){return t.kind===le.Text},get children(){return v(ba,{event:t})}}),v(pe,{get when(){return t.kind===le.Reaction},get children(){return v(hg,{event:t})}}),v(pe,{get when(){return t.kind===6},get children(){return v(ya,{event:t})}})]}})});var pg=jn;function gg(){this.__data__=new pg,this.size=0}var bg=gg;function yg(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}var mg=yg;function vg(e){return this.__data__.get(e)}var wg=vg;function xg(e){return this.__data__.has(e)}var $g=xg,_g=jn,Eg=Ur,kg=Pr,Sg=200;function Ag(e,t){var n=this.__data__;if(n instanceof _g){var r=n.__data__;if(!Eg||r.length<Sg-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new kg(r)}return n.set(e,t),this.size=n.size,this}var Tg=Ag,Cg=jn,Ig=bg,Hg=mg,Lg=wg,Bg=$g,Rg=Tg;function Tt(e){var t=this.__data__=new Cg(e);this.size=t.size}Tt.prototype.clear=Ig;Tt.prototype.delete=Hg;Tt.prototype.get=Lg;Tt.prototype.has=Bg;Tt.prototype.set=Rg;var ma=Tt;function Og(e,t){for(var n=-1,r=e==null?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Ug=Og,Pg=Wo,Mg=Ug,Ng=qo,Dg=1,Fg=2;function jg(e,t,n,r,s,o){var i=n&Dg,a=e.length,c=t.length;if(a!=c&&!(i&&c>a))return!1;var d=o.get(e),u=o.get(t);if(d&&u)return d==t&&u==e;var l=-1,h=!0,f=n&Fg?new Pg:void 0;for(o.set(e,t),o.set(t,e);++l<a;){var p=e[l],g=t[l];if(r)var m=i?r(g,p,l,t,e,o):r(p,g,l,e,t,o);if(m!==void 0){if(m)continue;h=!1;break}if(f){if(!Mg(t,function($,x){if(!Ng(f,x)&&(p===$||s(p,$,n,r,o)))return f.push(x)})){h=!1;break}}else if(!(p===g||s(p,g,n,r,o))){h=!1;break}}return o.delete(e),o.delete(t),h}var va=jg,zg=_e,Kg=zg.Uint8Array,Gg=Kg;function Wg(e){var t=-1,n=Array(e.size);return e.forEach(function(r,s){n[++t]=[s,r]}),n}var qg=Wg,uo=Nn,ho=Gg,Qg=Go,Vg=va,Zg=qg,Xg=Mr,Yg=1,Jg=2,eb="[object Boolean]",tb="[object Date]",nb="[object Error]",rb="[object Map]",sb="[object Number]",ob="[object RegExp]",ib="[object Set]",ab="[object String]",cb="[object Symbol]",lb="[object ArrayBuffer]",ub="[object DataView]",fo=uo?uo.prototype:void 0,br=fo?fo.valueOf:void 0;function db(e,t,n,r,s,o,i){switch(n){case ub:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case lb:return!(e.byteLength!=t.byteLength||!o(new ho(e),new ho(t)));case eb:case tb:case sb:return Qg(+e,+t);case nb:return e.name==t.name&&e.message==t.message;case ob:case ab:return e==t+"";case rb:var a=Zg;case ib:var c=r&Yg;if(a||(a=Xg),e.size!=t.size&&!c)return!1;var d=i.get(e);if(d)return d==t;r|=Jg,i.set(e,t);var u=Vg(a(e),a(t),r,s,o,i);return i.delete(e),u;case cb:if(br)return br.call(e)==br.call(t)}return!1}var hb=db;function fb(e,t){for(var n=-1,r=t.length,s=e.length;++n<r;)e[s+n]=t[n];return e}var pb=fb,gb=Array.isArray,We=gb,bb=pb,yb=We;function mb(e,t,n){var r=t(e);return yb(e)?r:bb(r,n(e))}var vb=mb;function wb(e,t){for(var n=-1,r=e==null?0:e.length,s=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[s++]=i)}return o}var xb=wb;function $b(){return[]}var _b=$b,Eb=xb,kb=_b,Sb=Object.prototype,Ab=Sb.propertyIsEnumerable,po=Object.getOwnPropertySymbols,Tb=po?function(e){return e==null?[]:(e=Object(e),Eb(po(e),function(t){return Ab.call(e,t)}))}:kb,Cb=Tb;function Ib(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}var Hb=Ib;function Lb(e){return e!=null&&typeof e=="object"}var sn=Lb,Bb=Zt,Rb=sn,Ob="[object Arguments]";function Ub(e){return Rb(e)&&Bb(e)==Ob}var Pb=Ub,go=Pb,Mb=sn,wa=Object.prototype,Nb=wa.hasOwnProperty,Db=wa.propertyIsEnumerable,Fb=go(function(){return arguments}())?go:function(e){return Mb(e)&&Nb.call(e,"callee")&&!Db.call(e,"callee")},xa=Fb,Qt={},jb={get exports(){return Qt},set exports(e){Qt=e}};function zb(){return!1}var Kb=zb;(function(e,t){var n=_e,r=Kb,s=t&&!t.nodeType&&t,o=s&&!0&&e&&!e.nodeType&&e,i=o&&o.exports===s,a=i?n.Buffer:void 0,c=a?a.isBuffer:void 0,d=c||r;e.exports=d})(jb,Qt);var Gb=9007199254740991,Wb=/^(?:0|[1-9]\d*)$/;function qb(e,t){var n=typeof e;return t=t??Gb,!!t&&(n=="number"||n!="symbol"&&Wb.test(e))&&e>-1&&e%1==0&&e<t}var $a=qb,Qb=9007199254740991;function Vb(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=Qb}var cs=Vb,Zb=Zt,Xb=cs,Yb=sn,Jb="[object Arguments]",e1="[object Array]",t1="[object Boolean]",n1="[object Date]",r1="[object Error]",s1="[object Function]",o1="[object Map]",i1="[object Number]",a1="[object Object]",c1="[object RegExp]",l1="[object Set]",u1="[object String]",d1="[object WeakMap]",h1="[object ArrayBuffer]",f1="[object DataView]",p1="[object Float32Array]",g1="[object Float64Array]",b1="[object Int8Array]",y1="[object Int16Array]",m1="[object Int32Array]",v1="[object Uint8Array]",w1="[object Uint8ClampedArray]",x1="[object Uint16Array]",$1="[object Uint32Array]",W={};W[p1]=W[g1]=W[b1]=W[y1]=W[m1]=W[v1]=W[w1]=W[x1]=W[$1]=!0;W[Jb]=W[e1]=W[h1]=W[t1]=W[f1]=W[n1]=W[r1]=W[s1]=W[o1]=W[i1]=W[a1]=W[c1]=W[l1]=W[u1]=W[d1]=!1;function _1(e){return Yb(e)&&Xb(e.length)&&!!W[Zb(e)]}var E1=_1;function k1(e){return function(t){return e(t)}}var S1=k1,Pn={},A1={get exports(){return Pn},set exports(e){Pn=e}};(function(e,t){var n=Fo,r=t&&!t.nodeType&&t,s=r&&!0&&e&&!e.nodeType&&e,o=s&&s.exports===r,i=o&&n.process,a=function(){try{var c=s&&s.require&&s.require("util").types;return c||i&&i.binding&&i.binding("util")}catch{}}();e.exports=a})(A1,Pn);var T1=E1,C1=S1,bo=Pn,yo=bo&&bo.isTypedArray,I1=yo?C1(yo):T1,_a=I1,H1=Hb,L1=xa,B1=We,R1=Qt,O1=$a,U1=_a,P1=Object.prototype,M1=P1.hasOwnProperty;function N1(e,t){var n=B1(e),r=!n&&L1(e),s=!n&&!r&&R1(e),o=!n&&!r&&!s&&U1(e),i=n||r||s||o,a=i?H1(e.length,String):[],c=a.length;for(var d in e)(t||M1.call(e,d))&&!(i&&(d=="length"||s&&(d=="offset"||d=="parent")||o&&(d=="buffer"||d=="byteLength"||d=="byteOffset")||O1(d,c)))&&a.push(d);return a}var D1=N1,F1=Object.prototype;function j1(e){var t=e&&e.constructor,n=typeof t=="function"&&t.prototype||F1;return e===n}var z1=j1;function K1(e,t){return function(n){return e(t(n))}}var G1=K1,W1=G1,q1=W1(Object.keys,Object),Q1=q1,V1=z1,Z1=Q1,X1=Object.prototype,Y1=X1.hasOwnProperty;function J1(e){if(!V1(e))return Z1(e);var t=[];for(var n in Object(e))Y1.call(e,n)&&n!="constructor"&&t.push(n);return t}var ey=J1,ty=zo,ny=cs;function ry(e){return e!=null&&ny(e.length)&&!ty(e)}var sy=ry,oy=D1,iy=ey,ay=sy;function cy(e){return ay(e)?oy(e):iy(e)}var Ea=cy,ly=vb,uy=Cb,dy=Ea;function hy(e){return ly(e,dy,uy)}var fy=hy,mo=fy,py=1,gy=Object.prototype,by=gy.hasOwnProperty;function yy(e,t,n,r,s,o){var i=n&py,a=mo(e),c=a.length,d=mo(t),u=d.length;if(c!=u&&!i)return!1;for(var l=c;l--;){var h=a[l];if(!(i?h in t:by.call(t,h)))return!1}var f=o.get(e),p=o.get(t);if(f&&p)return f==t&&p==e;var g=!0;o.set(e,t),o.set(t,e);for(var m=i;++l<c;){h=a[l];var $=e[h],x=t[h];if(r)var y=i?r(x,$,h,t,e,o):r($,x,h,e,t,o);if(!(y===void 0?$===x||s($,x,n,r,o):y)){g=!1;break}m||(m=h=="constructor")}if(g&&!m){var b=e.constructor,w=t.constructor;b!=w&&"constructor"in e&&"constructor"in t&&!(typeof b=="function"&&b instanceof b&&typeof w=="function"&&w instanceof w)&&(g=!1)}return o.delete(e),o.delete(t),g}var my=yy,vy=_t,wy=_e,xy=vy(wy,"DataView"),$y=xy,_y=_t,Ey=_e,ky=_y(Ey,"Promise"),Sy=ky,Ay=_t,Ty=_e,Cy=Ay(Ty,"WeakMap"),Iy=Cy,Ir=$y,Hr=Ur,Lr=Sy,Br=Qo,Rr=Iy,ka=Zt,Ct=Ko,vo="[object Map]",Hy="[object Object]",wo="[object Promise]",xo="[object Set]",$o="[object WeakMap]",_o="[object DataView]",Ly=Ct(Ir),By=Ct(Hr),Ry=Ct(Lr),Oy=Ct(Br),Uy=Ct(Rr),Qe=ka;(Ir&&Qe(new Ir(new ArrayBuffer(1)))!=_o||Hr&&Qe(new Hr)!=vo||Lr&&Qe(Lr.resolve())!=wo||Br&&Qe(new Br)!=xo||Rr&&Qe(new Rr)!=$o)&&(Qe=function(e){var t=ka(e),n=t==Hy?e.constructor:void 0,r=n?Ct(n):"";if(r)switch(r){case Ly:return _o;case By:return vo;case Ry:return wo;case Oy:return xo;case Uy:return $o}return t});var Py=Qe,yr=ma,My=va,Ny=hb,Dy=my,Eo=Py,ko=We,So=Qt,Fy=_a,jy=1,Ao="[object Arguments]",To="[object Array]",vn="[object Object]",zy=Object.prototype,Co=zy.hasOwnProperty;function Ky(e,t,n,r,s,o){var i=ko(e),a=ko(t),c=i?To:Eo(e),d=a?To:Eo(t);c=c==Ao?vn:c,d=d==Ao?vn:d;var u=c==vn,l=d==vn,h=c==d;if(h&&So(e)){if(!So(t))return!1;i=!0,u=!1}if(h&&!u)return o||(o=new yr),i||Fy(e)?My(e,t,n,r,s,o):Ny(e,t,c,n,r,s,o);if(!(n&jy)){var f=u&&Co.call(e,"__wrapped__"),p=l&&Co.call(t,"__wrapped__");if(f||p){var g=f?e.value():e,m=p?t.value():t;return o||(o=new yr),s(g,m,n,r,o)}}return h?(o||(o=new yr),Dy(e,t,n,r,s,o)):!1}var Gy=Ky,Wy=Gy,Io=sn;function Sa(e,t,n,r,s){return e===t?!0:e==null||t==null||!Io(e)&&!Io(t)?e!==e&&t!==t:Wy(e,t,n,r,Sa,s)}var Aa=Sa,qy=ma,Qy=Aa,Vy=1,Zy=2;function Xy(e,t,n,r){var s=n.length,o=s,i=!r;if(e==null)return!o;for(e=Object(e);s--;){var a=n[s];if(i&&a[2]?a[1]!==e[a[0]]:!(a[0]in e))return!1}for(;++s<o;){a=n[s];var c=a[0],d=e[c],u=a[1];if(i&&a[2]){if(d===void 0&&!(c in e))return!1}else{var l=new qy;if(r)var h=r(d,u,c,e,t,l);if(!(h===void 0?Qy(u,d,Vy|Zy,r,l):h))return!1}}return!0}var Yy=Xy,Jy=$t;function em(e){return e===e&&!Jy(e)}var Ta=em,tm=Ta,nm=Ea;function rm(e){for(var t=nm(e),n=t.length;n--;){var r=t[n],s=e[r];t[n]=[r,s,tm(s)]}return t}var sm=rm;function om(e,t){return function(n){return n==null?!1:n[e]===t&&(t!==void 0||e in Object(n))}}var Ca=om,im=Yy,am=sm,cm=Ca;function lm(e){var t=am(e);return t.length==1&&t[0][2]?cm(t[0][0],t[0][1]):function(n){return n===e||im(n,e,t)}}var um=lm,dm=Zt,hm=sn,fm="[object Symbol]";function pm(e){return typeof e=="symbol"||hm(e)&&dm(e)==fm}var tr=pm,gm=We,bm=tr,ym=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,mm=/^\w*$/;function vm(e,t){if(gm(e))return!1;var n=typeof e;return n=="number"||n=="symbol"||n=="boolean"||e==null||bm(e)?!0:mm.test(e)||!ym.test(e)||t!=null&&e in Object(t)}var ls=vm,Ia=Pr,wm="Expected a function";function us(e,t){if(typeof e!="function"||t!=null&&typeof t!="function")throw new TypeError(wm);var n=function(){var r=arguments,s=t?t.apply(this,r):r[0],o=n.cache;if(o.has(s))return o.get(s);var i=e.apply(this,r);return n.cache=o.set(s,i)||o,i};return n.cache=new(us.Cache||Ia),n}us.Cache=Ia;var xm=us,$m=xm,_m=500;function Em(e){var t=$m(e,function(r){return n.size===_m&&n.clear(),r}),n=t.cache;return t}var km=Em,Sm=km,Am=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Tm=/\\(\\)?/g,Cm=Sm(function(e){var t=[];return e.charCodeAt(0)===46&&t.push(""),e.replace(Am,function(n,r,s,o){t.push(s?o.replace(Tm,"$1"):r||n)}),t}),Im=Cm;function Hm(e,t){for(var n=-1,r=e==null?0:e.length,s=Array(r);++n<r;)s[n]=t(e[n],n,e);return s}var Lm=Hm,Ho=Nn,Bm=Lm,Rm=We,Om=tr,Um=1/0,Lo=Ho?Ho.prototype:void 0,Bo=Lo?Lo.toString:void 0;function Ha(e){if(typeof e=="string")return e;if(Rm(e))return Bm(e,Ha)+"";if(Om(e))return Bo?Bo.call(e):"";var t=e+"";return t=="0"&&1/e==-Um?"-0":t}var Pm=Ha,Mm=Pm;function Nm(e){return e==null?"":Mm(e)}var Dm=Nm,Fm=We,jm=ls,zm=Im,Km=Dm;function Gm(e,t){return Fm(e)?e:jm(e,t)?[e]:zm(Km(e))}var La=Gm,Wm=tr,qm=1/0;function Qm(e){if(typeof e=="string"||Wm(e))return e;var t=e+"";return t=="0"&&1/e==-qm?"-0":t}var nr=Qm,Vm=La,Zm=nr;function Xm(e,t){t=Vm(t,e);for(var n=0,r=t.length;e!=null&&n<r;)e=e[Zm(t[n++])];return n&&n==r?e:void 0}var Ba=Xm,Ym=Ba;function Jm(e,t,n){var r=e==null?void 0:Ym(e,t);return r===void 0?n:r}var ev=Jm;function tv(e,t){return e!=null&&t in Object(e)}var nv=tv,rv=La,sv=xa,ov=We,iv=$a,av=cs,cv=nr;function lv(e,t,n){t=rv(t,e);for(var r=-1,s=t.length,o=!1;++r<s;){var i=cv(t[r]);if(!(o=e!=null&&n(e,i)))break;e=e[i]}return o||++r!=s?o:(s=e==null?0:e.length,!!s&&av(s)&&iv(i,s)&&(ov(e)||sv(e)))}var uv=lv,dv=nv,hv=uv;function fv(e,t){return e!=null&&hv(e,t,dv)}var pv=fv,gv=Aa,bv=ev,yv=pv,mv=ls,vv=Ta,wv=Ca,xv=nr,$v=1,_v=2;function Ev(e,t){return mv(e)&&vv(t)?wv(xv(e),t):function(n){var r=bv(n,e);return r===void 0&&r===t?yv(n,e):gv(t,r,$v|_v)}}var kv=Ev;function Sv(e){return e}var Av=Sv;function Tv(e){return function(t){return t?.[e]}}var Cv=Tv,Iv=Ba;function Hv(e){return function(t){return Iv(t,e)}}var Lv=Hv,Bv=Cv,Rv=Lv,Ov=ls,Uv=nr;function Pv(e){return Ov(e)?Bv(Uv(e)):Rv(e)}var Mv=Pv,Nv=um,Dv=kv,Fv=Av,jv=We,zv=Mv;function Kv(e){return typeof e=="function"?e:e==null?Fv:typeof e=="object"?jv(e)?Dv(e[0],e[1]):Nv(e):zv(e)}var Gv=Kv,Wv=Gv,qv=Vo;function Qv(e,t){return e&&e.length?qv(e,Wv(t)):[]}var Vv=Qv;const mr=e=>Array.from(e).sort((t,n)=>n.created_at-t.created_at);let $n=0;setInterval(()=>console.log("sub",$n),1e3);const jt=e=>{const t=Yn(),[n,r]=X([]),s=()=>{const o=e();if(o==null)return;const{relayUrls:i,filters:a,options:c,onEvent:d,onEOSE:u,continuous:l=!0}=o,h=t().sub(i,a,c);let f=!0;$n+=1;let p=!1,g=!1;const m=[];h.on("event",x=>{d?.(x),!(o.clientEventFilter!=null&&!o.clientEventFilter(x))&&(g?r(y=>{const b=mr([x,...y].slice(0,50)),w=Vv(b,E=>E.id);return w.length!==b.length&&console.warn("duplicated event",x),w}):(p=!0,m.push(x)))}),h.on("eose",()=>{u?.(),g=!0,r(mr(m)),l||(h.unsub(),f&&(f=!1,$n-=1))});const $=setInterval(()=>{if(g){clearInterval($);return}p&&(p=!1,r(mr(m)))},100);wt(()=>{h.unsub(),f&&(f=!1,$n-=1),clearInterval($)})};return En(()=>{s()}),{events:n}};var Zv=_e,Xv=function(){return Zv.Date.now()},Yv=Xv,Jv=/\s/;function e2(e){for(var t=e.length;t--&&Jv.test(e.charAt(t)););return t}var t2=e2,n2=t2,r2=/^\s+/;function s2(e){return e&&e.slice(0,n2(e)+1).replace(r2,"")}var o2=s2,i2=o2,Ro=$t,a2=tr,Oo=0/0,c2=/^[-+]0x[0-9a-f]+$/i,l2=/^0b[01]+$/i,u2=/^0o[0-7]+$/i,d2=parseInt;function h2(e){if(typeof e=="number")return e;if(a2(e))return Oo;if(Ro(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=Ro(t)?t+"":t}if(typeof e!="string")return e===0?e:+e;e=i2(e);var n=l2.test(e);return n||u2.test(e)?d2(e.slice(2),n?2:8):c2.test(e)?Oo:+e}var f2=h2,p2=$t,vr=Yv,Uo=f2,g2="Expected a function",b2=Math.max,y2=Math.min;function m2(e,t,n){var r,s,o,i,a,c,d=0,u=!1,l=!1,h=!0;if(typeof e!="function")throw new TypeError(g2);t=Uo(t)||0,p2(n)&&(u=!!n.leading,l="maxWait"in n,o=l?b2(Uo(n.maxWait)||0,t):o,h="trailing"in n?!!n.trailing:h);function f(E){var B=r,A=s;return r=s=void 0,d=E,i=e.apply(A,B),i}function p(E){return d=E,a=setTimeout($,t),u?f(E):i}function g(E){var B=E-c,A=E-d,R=t-B;return l?y2(R,o-A):R}function m(E){var B=E-c,A=E-d;return c===void 0||B>=t||B<0||l&&A>=o}function $(){var E=vr();if(m(E))return x(E);a=setTimeout($,g(E))}function x(E){return a=void 0,h&&r?f(E):(r=s=void 0,i)}function y(){a!==void 0&&clearTimeout(a),d=0,r=c=s=a=void 0}function b(){return a===void 0?i:x(vr())}function w(){var E=vr(),B=m(E);if(r=arguments,s=this,c=E,B){if(a===void 0)return p(c);if(l)return clearTimeout(a),a=setTimeout($,t),f(c)}return a===void 0&&(a=setTimeout($,t)),i}return w.cancel=y,w.flush=b,w}var v2=m2,w2=v2,x2=$t,$2="Expected a function";function _2(e,t,n){var r=!0,s=!0;if(typeof e!="function")throw new TypeError($2);return x2(n)&&(r="leading"in n?!!n.leading:r,s="trailing"in n?!!n.trailing:s),w2(e,t,{leading:r,maxWait:t,trailing:s})}var E2=_2;const k2=[{key:"n",command:{command:"openPostForm"}},{key:"h",command:{command:"moveToPrevColumn"}},{key:"j",command:{command:"moveToNextItem"}},{key:"k",command:{command:"moveToPrevItem"}},{key:"l",command:{command:"moveToNextColumn"}},{key:"1",command:{command:"moveToColumn",columnIndex:1}},{key:"2",command:{command:"moveToColumn",columnIndex:2}},{key:"3",command:{command:"moveToColumn",columnIndex:3}},{key:"4",command:{command:"moveToColumn",columnIndex:4}},{key:"5",command:{command:"moveToColumn",columnIndex:5}},{key:"6",command:{command:"moveToColumn",columnIndex:6}},{key:"7",command:{command:"moveToColumn",columnIndex:7}},{key:"8",command:{command:"moveToColumn",columnIndex:8}},{key:"9",command:{command:"moveToColumn",columnIndex:9}},{key:"0",command:{command:"moveToLastColumn"}},{key:"ArrowLeft",command:{command:"moveToPrevColumn"}},{key:"ArrowDown",command:{command:"moveToNextItem"}},{key:"ArrowUp",command:{command:"moveToPrevItem"}},{key:"ArrowRight",command:{command:"moveToNextColumn"}},{key:"f",command:{command:"like"}},{key:"t",command:{command:"repost"}},{key:"r",command:{command:"openReplyForm"}},{key:"?",command:{command:"openHelp"}},{key:"Enter",command:{command:"openItemDetail"}},{key:"Backspace",command:{command:"closeItemDetail"}}],S2=e=>{const t=new Map;return e.forEach(n=>{t.set(n.key,n)}),t},A2=({shortcuts:e=k2,onShortcut:t})=>{const n=S2(e);tt(()=>{const r=E2(s=>{if(s.type!=="keydown"||s.ctrlKey||s.altKey||s.metaKey||s.target instanceof HTMLTextAreaElement||s.target instanceof HTMLInputElement)return;const o=n.get(s.key);o!=null&&t(o)},50);window.addEventListener("keydown",r),wt(()=>{window.removeEventListener("keydown",r)})})},T2=()=>{const e=xd();A2({onShortcut:t=>{e(t.command).then(()=>console.debug(`shortcut key '${t.key}' was processed successfully`),n=>console.error(n))}})},C2=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5a17.92 17.92 0 0 1-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418"></path></svg>'),I2=(e={})=>(()=>{const t=C2.cloneNode(!0);return de(t,e,!0,!0),t})(),H2=S('<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5A3.375 3.375 0 0 0 6.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0 0 15 2.25h-1.5a2.251 2.251 0 0 0-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 0 0-9-9z"></path></svg>'),L2=(e={})=>(()=>{const t=H2.cloneNode(!0);return de(t,e,!0,!0),t})(),B2=S(`<div class="absolute left-[-1rem] top-[-1.5rem] rounded
                 bg-rose-300 p-1 text-xs font-bold text-white shadow">Copied!</div>`),R2=S('<div class="relative inline-block"><button type="button"></button></div>'),O2=e=>{const[t,n]=X(!1),r=()=>{navigator.clipboard.writeText(e.text).then(s=>{n(!0),setTimeout(()=>n(!1),1e3)}).catch(s=>{console.error("failed to copy",s)})};return(()=>{const s=R2.cloneNode(!0),o=s.firstChild;return o.$$click=r,_(o,v(L2,{})),_(s,v(z,{get when(){return t()},get children(){return B2.cloneNode(!0)}}),null),ee(()=>Ka(o,e.class)),s})()};$e(["click"]);const U2=S('<div class="h-40 w-full sm:h-52"></div>'),P2=S('<div class="flex h-[64px] items-center gap-4 px-4"><div class="mt-[-64px] h-28 w-28 shrink-0 rounded-lg bg-stone-400 shadow-md"></div><div><div class="flex items-center gap-2"><div class="truncate text-xl font-bold"></div><div class="shrink-0 text-sm font-bold">@</div></div><div class="flex gap-1"><div class="truncate text-xs"></div></div></div></div>'),M2=S('<div class="max-h-32 overflow-scroll whitespace-pre-wrap px-5 py-2 text-sm"></div>'),N2=S('<li class="flex items-center gap-1"><span class="inline-block h-4 w-4" area-label="website" title="website"></span><a class="text-blue-500 underline" target="_blank" rel="noreferrer noopener"></a></li>'),D2=S('<ul class="border-t px-5 py-2 text-xs"></ul>'),F2=S('<div class="max-h-full w-[640px] max-w-full overflow-scroll"><div class="flex justify-end"><button class="h-8 w-8 text-stone-700" aria-label="Close"></button></div><div class="flex w-full flex-col overflow-hidden rounded-2xl border bg-white text-stone-700 shadow-lg"></div></div>'),j2=S('<img alt="header" class="h-full w-full object-cover">'),z2=S('<img alt="user icon" class="h-full w-full rounded-lg object-cover">'),K2=e=>{const{profile:t,query:n}=rn(()=>({pubkey:e.pubkey})),r=Z(()=>Jn(e.pubkey));return v(la,{onClose:()=>e.onClose?.(),get children(){const s=F2.cloneNode(!0),o=s.firstChild,i=o.firstChild,a=o.nextSibling;return i.$$click=()=>e.onClose?.(),_(i,v(Kn,{})),_(a,v(z,{get when(){return n.isFetched},get fallback(){return"loading"},get children(){return[(()=>{const c=U2.cloneNode(!0);return _(c,v(z,{get when(){return t()?.banner},keyed:!0,children:d=>(()=>{const u=j2.cloneNode(!0);return ge(u,"src",d),u})()})),c})(),(()=>{const c=P2.cloneNode(!0),d=c.firstChild,u=d.nextSibling,l=u.firstChild,h=l.firstChild,f=h.nextSibling;f.firstChild;const p=l.nextSibling,g=p.firstChild;return _(d,v(z,{get when(){return t()?.picture},keyed:!0,children:m=>(()=>{const $=z2.cloneNode(!0);return ge($,"src",m),$})()})),_(h,()=>t()?.display_name),_(f,()=>t()?.name,null),_(g,r),_(p,v(O2,{class:"h-4 w-4 text-stone-500 hover:text-stone-700",get text(){return r()}}),null),c})(),(()=>{const c=M2.cloneNode(!0);return _(c,()=>t()?.about),c})(),(()=>{const c=D2.cloneNode(!0);return _(c,v(z,{get when(){return t()?.website},get children(){const d=N2.cloneNode(!0),u=d.firstChild,l=u.nextSibling;return _(u,v(I2,{})),_(l,()=>t()?.website),ee(()=>ge(l,"href",t()?.website)),d}})),c})()]}})),s}})};$e(["click"]);const G2=S('<div class="absolute inset-0 flex w-screen touch-manipulation flex-row overflow-hidden"><div class="flex h-full snap-x snap-mandatory flex-row overflow-y-hidden overflow-x-scroll"></div></div>'),ow=()=>{T2();const e=Ga(),{persistStatus:t}=Qa(),{modalState:n,closeModal:r}=os(),s=Yn(),{config:o}=Se(),i=rs();En(()=>{o().relayUrls.map(async f=>{(await s().ensureRelay(f)).on("notice",g=>{console.error(`NOTICE: ${f}: ${g}`)})})});const{followingPubkeys:a}=O0(()=>Ae([i()])(([f])=>({relayUrls:o().relayUrls,pubkey:f})));En(()=>{console.log(a())});const{events:c}=jt(()=>Ae([i()])(([f])=>({relayUrls:o().relayUrls,filters:[{kinds:[1,6],authors:Nr([...a(),f]),limit:25}]}))),{events:d}=jt(()=>Ae([i()])(([f])=>({relayUrls:o().relayUrls,filters:[{kinds:[1,6],authors:[f],limit:25}]}))),{events:u}=jt(()=>Ae([i()])(([f])=>({relayUrls:o().relayUrls,filters:[{kinds:[7],authors:[f],limit:25}]}))),{events:l}=jt(()=>Ae([i()])(([f])=>({relayUrls:o().relayUrls,filters:[{kinds:[1,6,7],"#p":[f],limit:25}]}))),{events:h}=jt(()=>Ae([i()])(([f])=>({relayUrls:["wss://relay-jp.nostr.wirednet.jp","wss://nostr.h3z.jp","wss://nostr.holybea.com"],filters:[{kinds:[1,6],limit:25,since:Math.floor(Date.now()/1e3)-12*60*60}]})));return tt(()=>{t().loggedIn||e("/hello")}),(()=>{const f=G2.cloneNode(!0),p=f.firstChild;return _(f,v(cp,{}),p),_(p,v(Mt,{name:"ホーム",columnIndex:1,width:"widest",get children(){return v(gr,{get events(){return c()}})}}),null),_(p,v(Mt,{name:"通知",columnIndex:2,width:"medium",get children(){return v(lo,{get events(){return l()}})}}),null),_(p,v(Mt,{name:"日本リレー",columnIndex:3,width:"medium",get children(){return v(gr,{get events(){return h()}})}}),null),_(p,v(Mt,{name:"自分の投稿",columnIndex:4,width:"medium",get children(){return v(gr,{get events(){return d()}})}}),null),_(p,v(Mt,{name:"自分のいいね",columnIndex:5,lastColumn:!0,width:"medium",get children(){return v(lo,{get events(){return u()}})}}),null),_(f,v(z,{get when(){return n()},keyed:!0,children:g=>v(xt,{get children(){return v(pe,{get when(){return g.type==="Profile"&&g.pubkey},keyed:!0,children:m=>v(K2,{pubkey:m,onClose:r})})}})}),null),f})()};export{ow as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
