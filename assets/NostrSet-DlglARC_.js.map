{"version":3,"file":"NostrSet-DlglARC_.js","sources":["../../src/nostr/event/ParameterizedReplaceableEvent.ts","../../src/nostr/event/sets/NostrSetTagsMixIn.ts","../../src/nostr/event/sets/NostrSet.ts"],"sourcesContent":["import { isParameterizedReplaceableKind } from 'nostr-tools/kinds';\nimport { type Event as NostrEvent } from 'nostr-tools/pure';\n\nimport GenericEvent from '@/nostr/event/GenericEvent';\n\nexport default class ParameterizedReplaceableEvent extends GenericEvent {\n  constructor(readonly rawEvent: NostrEvent) {\n    if (!isParameterizedReplaceableKind(rawEvent.kind)) {\n      throw new TypeError('kind should be parameterized replaceable event');\n    }\n    super(rawEvent);\n  }\n\n  identifier(): string {\n    const dTag = this.findFirstTagByName('d');\n    const id = dTag?.[1];\n    if (id == null) {\n      throw new TypeError('failed to find d tag');\n    }\n    return id;\n  }\n}\n","import { type AbstractConstructorOf } from '@/utils/typeUtils';\n\nimport type TagsBase from '@/nostr/event/TagsBase';\n\nconst NostrSetTagsMixIn = <TBase extends AbstractConstructorOf<TagsBase>>(Base: TBase) => {\n  abstract class NostrSetBase extends Base {\n    title(): string | undefined {\n      const titleTag = this.findFirstTagByName('title');\n      return titleTag?.[1];\n    }\n\n    image(): string | undefined {\n      const imageTag = this.findFirstTagByName('image');\n      return imageTag?.[1];\n    }\n\n    description(): string | undefined {\n      const descriptionTag = this.findFirstTagByName('description');\n      return descriptionTag?.[1];\n    }\n  }\n\n  return NostrSetBase;\n};\n\nexport default NostrSetTagsMixIn;\n","import ParameterizedReplaceableEvent from '@/nostr/event/ParameterizedReplaceableEvent';\nimport NostrSetTagsMixIn from '@/nostr/event/sets/NostrSetTagsMixIn';\nimport Tags from '@/nostr/event/Tags';\n\nexport const NostrSetTags = NostrSetTagsMixIn(Tags);\n\nconst NostrSet = NostrSetTagsMixIn(ParameterizedReplaceableEvent);\n\nexport default NostrSet;\n"],"names":["ParameterizedReplaceableEvent","GenericEvent","rawEvent","isParameterizedReplaceableKind","id","NostrSetTagsMixIn","Base","NostrSetBase","NostrSetTags","Tags","NostrSet"],"mappings":"0FAKA,MAAqBA,UAAsCC,CAAa,CACtE,YAAqBC,EAAsB,CACzC,GAAI,CAACC,EAA+BD,EAAS,IAAI,EACzC,MAAA,IAAI,UAAU,gDAAgD,EAEtE,MAAMA,CAAQ,EAJK,KAAA,SAAAA,CAKrB,CAEA,YAAqB,CAEb,MAAAE,EADO,KAAK,mBAAmB,GAAG,IACtB,CAAC,EACnB,GAAIA,GAAM,KACF,MAAA,IAAI,UAAU,sBAAsB,EAErC,OAAAA,CACT,CACF,CCjBA,MAAMC,EAAoEC,GAAgB,CACxF,MAAeC,UAAqBD,CAAK,CACvC,OAA4B,CAE1B,OADiB,KAAK,mBAAmB,OAAO,IAC9B,CAAC,CACrB,CAEA,OAA4B,CAE1B,OADiB,KAAK,mBAAmB,OAAO,IAC9B,CAAC,CACrB,CAEA,aAAkC,CAEhC,OADuB,KAAK,mBAAmB,aAAa,IACpC,CAAC,CAC3B,CACF,CAEO,OAAAC,CACT,ECnBaC,EAAeH,EAAkBI,CAAI,EAE5CC,EAAWL,EAAkBL,CAA6B"}