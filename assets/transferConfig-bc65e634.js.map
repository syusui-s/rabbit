{"version":3,"file":"transferConfig-bc65e634.js","sources":["../../src/interWindow.ts","../../transfer-config.ts"],"sourcesContent":["export type InterWindowRequest = {\n  type: 'GET_CONFIG';\n};\n\nexport type InterWindowRequestWithId = InterWindowRequest & {\n  requestId: number;\n};\n\nexport type InterWindowResponse = {\n  type: 'OK' | 'BAD_REQUEST' | 'NOT_FOUND' | 'INTERNAL_PEER_ERROR';\n  payload?: string;\n};\n\nexport type InterWindowResponseWithId = InterWindowResponse & {\n  requestId: number;\n};\n\nexport type RequestHandler = (request: InterWindowRequestWithId) => InterWindowResponse;\n\nexport const ok = (payload?: string): InterWindowResponse => ({\n  type: 'OK',\n  payload,\n});\n\nexport const badRequest = (payload?: string): InterWindowResponse => ({\n  type: 'BAD_REQUEST',\n  payload,\n});\n\nexport const notFound = (payload?: string): InterWindowResponse => ({\n  type: 'NOT_FOUND',\n  payload,\n});\n\nexport const internalPeerError = (payload?: string): InterWindowResponse => ({\n  type: 'INTERNAL_PEER_ERROR',\n  payload,\n});\n","import {\n  ok,\n  notFound,\n  internalPeerError,\n  type InterWindowRequestWithId,\n  type RequestHandler,\n} from '@/interWindow';\n\n(() => {\n  const acceptableOrigins = [\n    window.location.origin,\n    'http://localhost:3000',\n    'http://localhost:12345',\n    'https://rabbit.syusui.net',\n  ];\n\n  const rawMessageHandler = (handler: RequestHandler) => (event: MessageEvent) => {\n    console.log('transfer-config: received request', event.data, event.origin);\n    if (!acceptableOrigins.includes(event.origin)) return;\n\n    const { origin, source } = event;\n    if (typeof event.data !== 'string') return;\n    const request = JSON.parse(event.data) as InterWindowRequestWithId;\n\n    let responseObj;\n    try {\n      responseObj = handler(request);\n    } catch (e) {\n      responseObj = internalPeerError(undefined);\n    }\n\n    const response = JSON.stringify({ requestId: request.requestId, ...responseObj });\n    // @ts-expect-error postMessage\n    source?.postMessage(response, origin);\n  };\n\n  window.addEventListener(\n    'message',\n    rawMessageHandler((request) => {\n      switch (request.type) {\n        case 'GET_CONFIG': {\n          const value = window.localStorage.getItem('RabbitConfig') ?? '';\n          return ok(value);\n        }\n        default:\n          return notFound();\n      }\n    }),\n    false,\n  );\n\n  console.log('transfer-config: mounted');\n})();\n"],"names":["ok","payload","notFound","internalPeerError","acceptableOrigins","rawMessageHandler","handler","event","origin","source","request","responseObj","response","value"],"mappings":"6CAmBa,MAAAA,EAAMC,IAA2C,CAC5D,KAAM,KACN,QAAAA,CACF,GAOaC,EAAYD,IAA2C,CAClE,KAAM,YACN,QAAAA,CACF,GAEaE,EAAqBF,IAA2C,CAC3E,KAAM,sBACN,QAAAA,CACF,IC7BC,IAAM,CACL,MAAMG,EAAoB,CACxB,OAAO,SAAS,OAChB,wBACA,yBACA,2BAAA,EAGIC,EAAqBC,GAA6BC,GAAwB,CAE9E,GADA,QAAQ,IAAI,oCAAqCA,EAAM,KAAMA,EAAM,MAAM,EACrE,CAACH,EAAkB,SAASG,EAAM,MAAM,EAAG,OAEzC,KAAA,CAAE,OAAAC,EAAQ,OAAAC,CAAW,EAAAF,EACvB,GAAA,OAAOA,EAAM,MAAS,SAAU,OACpC,MAAMG,EAAU,KAAK,MAAMH,EAAM,IAAI,EAEjC,IAAAI,EACA,GAAA,CACFA,EAAcL,EAAQI,CAAO,OACnB,CACVC,EAAcR,EAAkB,MAAS,CAC3C,CAEM,MAAAS,EAAW,KAAK,UAAU,CAAE,UAAWF,EAAQ,UAAW,GAAGC,CAAA,CAAa,EAExEF,GAAA,YAAYG,EAAUJ,CAAM,CAAA,EAG/B,OAAA,iBACL,UACAH,EAAmBK,GAAY,CAC7B,OAAQA,EAAQ,KAAM,CACpB,IAAK,aAAc,CACjB,MAAMG,EAAQ,OAAO,aAAa,QAAQ,cAAc,GAAK,GAC7D,OAAOb,EAAGa,CAAK,CACjB,CACA,QACE,OAAOX,EAAS,CACpB,CAAA,CACD,EACD,EAAA,EAGF,QAAQ,IAAI,0BAA0B,CACxC,GAAG"}