{"version":3,"file":"url-DPIb-kBm.js","sources":["../../src/utils/url.ts"],"sourcesContent":["export const isImageUrl = (urlString: string): boolean => {\n  try {\n    const url = new URL(urlString);\n    return /\\.(jpeg|jpg|png|gif|webp|avif|apng|svg)$/i.test(url.pathname);\n  } catch {\n    return false;\n  }\n};\n\nexport const isVideoUrl = (urlString: string): boolean => {\n  try {\n    const url = new URL(urlString);\n    return /\\.(mpg|mpeg|mp4|avi|mov|mkv|webm|ogv)$/i.test(url.pathname);\n  } catch {\n    return false;\n  }\n};\n\nexport const isAudioUrl = (urlString: string): boolean => {\n  try {\n    const url = new URL(urlString);\n    return /\\.(wav|mp3|flac|wma|m4a|aac|ogg|oga|opus)$/i.test(url.pathname);\n  } catch {\n    return false;\n  }\n};\n\nexport const isWebSocketUrl = (urlString: string): boolean => {\n  try {\n    const url = new URL(urlString);\n    return /^wss?:$/.test(url.protocol);\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Generate a URL of thumbnail for a given URL.\n */\nexport const thumbnailUrl = (\n  urlString: string,\n  size: 'icon' | 'thumbnail' = 'thumbnail',\n): string => {\n  try {\n    const url = new URL(urlString);\n    // Imgur\n    if (url.host === 'i.imgur.com' || url.host === 'imgur.com') {\n      const match = url.pathname.match(/^\\/([a-zA-Z0-9]+)\\.(jpeg|jpg|png|gif|webp|avif|apng)/);\n      if (match != null) {\n        const result = new URL(url);\n        const imageId = match[1];\n        const ext = match[2];\n        result.host = 'i.imgur.com';\n        if (size === 'icon') {\n          result.pathname = `${imageId}s.${ext}`;\n        } else if (size === 'thumbnail') {\n          result.pathname = `${imageId}l.${ext}`;\n        } else {\n          // fallback\n          return urlString;\n        }\n        return result.toString();\n      }\n      return url.toString();\n    }\n\n    // Gyazo\n    if (url.host === 'i.gyazo.com') {\n      const result = new URL(url);\n      result.host = 'thumb.gyazo.com';\n      if (size === 'icon') {\n        result.pathname = `/thumb/160${url.pathname}`;\n      } else if (size === 'thumbnail') {\n        result.pathname = `/thumb/640${url.pathname}`;\n      } else {\n        // fallback\n        return urlString;\n      }\n      return result.toString();\n    }\n\n    // nostr.build\n    // https://github.com/nostrbuild/nostr.build/blob/main/SiteConfig.php#L71-L75\n    // https://github.com/nostrbuild/nostr.build/blob/main/api/v2/routes_upload.php\n    if (\n      url.host === 'nostr.build' ||\n      url.host === 'i.nostr.build' ||\n      url.host === 'image.nostr.build' ||\n      url.host === 'cdn.nostr.build'\n    ) {\n      // profile pic (PFP)\n      if (url.pathname.startsWith('/i/p/')) return urlString;\n\n      const result = new URL(url);\n      if (url.pathname.startsWith('/i/')) {\n        const withoutI = url.pathname.replace(/^\\/i/, '');\n        result.hostname = 'image.nostr.build';\n        result.pathname = `/resp/240p${withoutI}`;\n      } else if (url.pathname.match(/^\\/[0-9a-zA-Z]+\\.(jpeg|jpg|png|gif|webp|avif|apng)$/)) {\n        result.pathname = `/resp/240p${url.pathname}`;\n      } else {\n        // fallback\n        return urlString;\n      }\n      return result.toString();\n    }\n\n    // pbs.twimg.com\n    // https://qiita.com/ma7ma7pipipi/items/713460b24710e0a46242\n    if (url.host === 'pbs.twimg.com') {\n      if (url.pathname.startsWith('/profile_images/')) {\n        const result = new URL(url);\n        result.pathname = url.pathname.replace(\n          /(?:_(?:mini|normal|bigger|200x200|400x400))?\\.(jpg|png)$/,\n          '_normal.$1',\n        );\n        return result.toString();\n      }\n      if (url.pathname.startsWith('/media/')) {\n        const result = new URL(url);\n        result.searchParams.set('format', 'jpg');\n        result.searchParams.set('name', 'small');\n        return result.toString();\n      }\n      return urlString;\n    }\n\n    // media.discrodapp.net\n    if (\n      url.hostname === 'media.discordapp.net' &&\n      url.pathname.match(/^\\/attachments\\/\\d+\\/\\d+\\/[a-z0-9]+\\.(png|jpg|gif)/)\n    ) {\n      const result = new URL(url);\n      result.searchParams.set('format', 'webp');\n      if (size === 'icon') {\n        result.searchParams.set('width', '100');\n        result.searchParams.set('height', '100');\n      } else if (size === 'thumbnail') {\n        result.searchParams.set('width', '320');\n        result.searchParams.set('height', '320');\n      } else {\n        return urlString;\n      }\n    }\n    return url.toString();\n\n    // Gravater\n    // https://gravatar.com/userimage/ID/IMAGE_ID.jpeg\n    if (url.host === 'gravatar.com' && url.pathname.startsWith('/userimage/')) {\n      const result = new URL(url);\n      url.searchParams.set('size', '128');\n      return result.toString();\n    }\n  } catch {\n    return urlString;\n  }\n};\n\nexport const isTwitterUrl = (urlString: string): boolean => {\n  try {\n    const url = new URL(urlString);\n    return url.protocol === 'https:' && (url.host === 'twitter.com' || url.host === 'x.com');\n  } catch {\n    return false;\n  }\n};\n\ntype YouTubeVideo = {\n  videoId: string;\n};\n\nconst YouTubeHosts = ['www.youtube.com', 'm.youtube.com', 'youtube.com'];\nexport const parseYouTubeVideoUrl = (urlString: string): YouTubeVideo | null => {\n  try {\n    const url = new URL(urlString);\n    if (url.protocol !== 'https:') return null;\n\n    if (YouTubeHosts.includes(url.host)) {\n      if (url.pathname === '/watch') {\n        const videoId = url.searchParams.get('v');\n        if (videoId != null) {\n          return { videoId };\n        }\n      }\n      if (url.pathname.startsWith('/shorts/')) {\n        const match = url.pathname.match(/^\\/shorts\\/([0-9a-zA-Z_-]*)$/);\n        if (match) {\n          return { videoId: match[1] };\n        }\n      }\n    }\n\n    if (url.host === 'youtu.be' && url.pathname.lastIndexOf('/') === 0) {\n      return { videoId: url.pathname };\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n};\n\nexport const softwareToGitHostUrl = (gitUrl: string): string | undefined => {\n  const githubMatch = gitUrl.match(/^git\\+https:\\/\\/github.com\\/(\\w+\\/\\w+)\\.git$/);\n  if (githubMatch != null) {\n    const path = githubMatch[1];\n    return `https://github.com/${path}`;\n  }\n  return undefined;\n};\n"],"names":["isImageUrl","urlString","url","isVideoUrl","isAudioUrl","isWebSocketUrl","thumbnailUrl","size","match","result","imageId","ext","withoutI","isTwitterUrl","YouTubeHosts","parseYouTubeVideoUrl","videoId","softwareToGitHostUrl","gitUrl","githubMatch"],"mappings":"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"}